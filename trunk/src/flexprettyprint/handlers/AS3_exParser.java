// $ANTLR 3.1.1 AS3_ex.g3 2011-08-05 17:41:10

package flexprettyprint.handlers;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class AS3_exParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "AS", "BREAK", "CASE", "CATCH", "CLASS", "CONST", "CONTINUE", "DEFAULT", "DELETE", "DO", "ELSE", "EXTENDS", "FALSE", "FINALLY", "FOR", "FUNCTION", "IF", "IMPLEMENTS", "IMPORT", "IN", "INSTANCEOF", "INTERFACE", "INTERNAL", "IS", "NATIVE", "NEW", "NULL", "PACKAGE", "PRIVATE", "PROTECTED", "PUBLIC", "RETURN", "SUPER", "SWITCH", "THIS", "THROW", "TO", "TRUE", "TRY", "TYPEOF", "USE", "VAR", "VOID", "WHILE", "WITH", "EACH", "GET", "SET", "NAMESPACE", "INCLUDE", "DYNAMIC", "FINAL", "OVERRIDE", "STATIC", "SEMI", "LCURLY", "RCURLY", "LPAREN", "RPAREN", "LBRACK", "RBRACK", "DOT", "COMMA", "LT", "GT", "LTE", "GTE", "EQ", "NEQ", "SAME", "NSAME", "PLUS", "SUB", "STAR", "DIV", "MOD", "INC", "DEC", "SHL", "SHR", "SHU", "AND", "OR", "XOR", "NOT", "INV", "LAND", "LOR", "QUE", "COLON", "ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN", "SHL_ASSIGN", "SHR_ASSIGN", "SHU_ASSIGN", "LAND_ASSIGN", "LOR_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "ELLIPSIS", "XML_ELLIPSIS", "XML_TEND", "XML_E_TEND", "XML_NS_OP", "XML_AT", "XML_LS_STD", "XML_LS_END", "UNDERSCORE", "DOLLAR", "ALPHABET", "NUMBER", "HEX_DIGIT", "CR", "LF", "UNICODE_ESCAPE", "ESCAPE_SEQUENCE", "EOL", "WHITESPACE", "COMMENT_MULTILINE", "COMMENT_SINGLELINE", "SINGLE_QUOTE_LITERAL", "DOUBLE_QUOTE_LITERAL", "REGULAR_EXPR_BODY", "REGULAR_EXPR_FLAG", "REGULAR_EXPR_LITERAL", "REGULAR_EXPR_FIRST_CHAR", "REGULAR_EXPR_CHAR", "BACKSLASH_SEQUENCE", "IDENT_PART", "HEX_NUMBER_LITERAL", "DEC_NUMBER", "EXPONENT", "DEC_NUMBER_LITERAL", "IDENT_NAME_ASCII_START", "IDENTIFIER", "IDENT_ASCII_START", "XML_COMMENT", "XML_CDATA", "XML_PI", "XML_TEXT"
    };
    public static final int PACKAGE=31;
    public static final int FUNCTION=19;
    public static final int SHR=83;
    public static final int LOR=91;
    public static final int INTERNAL=26;
    public static final int EXPONENT=139;
    public static final int LT=67;
    public static final int STAR=77;
    public static final int BACKSLASH_SEQUENCE=135;
    public static final int WHILE=47;
    public static final int MOD=79;
    public static final int SHL=82;
    public static final int CONST=9;
    public static final int MOD_ASSIGN=96;
    public static final int CASE=6;
    public static final int NEW=29;
    public static final int DO=13;
    public static final int IDENT_ASCII_START=143;
    public static final int NOT=88;
    public static final int HEX_NUMBER_LITERAL=137;
    public static final int EOF=-1;
    public static final int DIV_ASSIGN=95;
    public static final int BREAK=5;
    public static final int FINAL=55;
    public static final int RPAREN=62;
    public static final int INC=80;
    public static final int IMPORT=22;
    public static final int EOL=124;
    public static final int XML_AT=112;
    public static final int INCLUDE=53;
    public static final int THIS=38;
    public static final int RETURN=35;
    public static final int XML_PI=146;
    public static final int XML_CDATA=145;
    public static final int REGULAR_EXPR_FIRST_CHAR=133;
    public static final int IDENT_NAME_ASCII_START=141;
    public static final int GET=50;
    public static final int VAR=45;
    public static final int VOID=46;
    public static final int SUPER=36;
    public static final int EACH=49;
    public static final int EQ=71;
    public static final int SHU=84;
    public static final int RBRACK=64;
    public static final int ADD_ASSIGN=97;
    public static final int PRIVATE=32;
    public static final int STATIC=57;
    public static final int INV=89;
    public static final int SWITCH=37;
    public static final int NULL=30;
    public static final int LAND_ASSIGN=102;
    public static final int ELSE=14;
    public static final int NUMBER=118;
    public static final int DOUBLE_QUOTE_LITERAL=129;
    public static final int ELLIPSIS=107;
    public static final int NATIVE=28;
    public static final int WHITESPACE=125;
    public static final int UNDERSCORE=115;
    public static final int LCURLY=59;
    public static final int DELETE=12;
    public static final int TRY=42;
    public static final int NAMESPACE=52;
    public static final int REGULAR_EXPR_CHAR=134;
    public static final int TYPEOF=43;
    public static final int XML_LS_END=114;
    public static final int QUE=92;
    public static final int OR=86;
    public static final int IDENT_PART=136;
    public static final int GT=68;
    public static final int USE=44;
    public static final int DEC_NUMBER=138;
    public static final int CATCH=7;
    public static final int FALSE=16;
    public static final int LAND=90;
    public static final int XML_E_TEND=110;
    public static final int THROW=39;
    public static final int DYNAMIC=54;
    public static final int COMMENT_SINGLELINE=127;
    public static final int DOLLAR=116;
    public static final int PROTECTED=33;
    public static final int DEC=81;
    public static final int CLASS=8;
    public static final int LBRACK=63;
    public static final int REGULAR_EXPR_BODY=130;
    public static final int GTE=70;
    public static final int FOR=18;
    public static final int SHU_ASSIGN=101;
    public static final int SUB=76;
    public static final int AND=85;
    public static final int AND_ASSIGN=104;
    public static final int LTE=69;
    public static final int XML_LS_STD=113;
    public static final int LPAREN=61;
    public static final int SHR_ASSIGN=100;
    public static final int IF=20;
    public static final int ESCAPE_SEQUENCE=123;
    public static final int AS=4;
    public static final int XML_COMMENT=144;
    public static final int UNICODE_ESCAPE=122;
    public static final int SHL_ASSIGN=99;
    public static final int DEC_NUMBER_LITERAL=140;
    public static final int IN=23;
    public static final int IMPLEMENTS=21;
    public static final int CONTINUE=10;
    public static final int COMMA=66;
    public static final int IS=27;
    public static final int IDENTIFIER=142;
    public static final int XML_ELLIPSIS=108;
    public static final int XOR_ASSIGN=105;
    public static final int PLUS=75;
    public static final int DOT=65;
    public static final int WITH=48;
    public static final int XOR=87;
    public static final int TO=40;
    public static final int ALPHABET=117;
    public static final int DEFAULT=11;
    public static final int NSAME=74;
    public static final int REGULAR_EXPR_FLAG=131;
    public static final int HEX_DIGIT=119;
    public static final int SET=51;
    public static final int INSTANCEOF=24;
    public static final int XML_TEXT=147;
    public static final int TRUE=41;
    public static final int SEMI=58;
    public static final int SAME=73;
    public static final int COLON=93;
    public static final int OR_ASSIGN=106;
    public static final int NEQ=72;
    public static final int SINGLE_QUOTE_LITERAL=128;
    public static final int FINALLY=17;
    public static final int OVERRIDE=56;
    public static final int XML_NS_OP=111;
    public static final int RCURLY=60;
    public static final int ASSIGN=94;
    public static final int REGULAR_EXPR_LITERAL=132;
    public static final int INTERFACE=25;
    public static final int XML_TEND=109;
    public static final int DIV=78;
    public static final int CR=120;
    public static final int PUBLIC=34;
    public static final int EXTENDS=15;
    public static final int SUB_ASSIGN=98;
    public static final int COMMENT_MULTILINE=126;
    public static final int LOR_ASSIGN=103;
    public static final int LF=121;

    // delegates
    // delegators


        public AS3_exParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public AS3_exParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[549+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return AS3_exParser.tokenNames; }
    public String getGrammarFileName() { return "AS3_ex.g3"; }


       
       		//options
    private List<Exception> mParseErrors;
    		
    private ASPrettyPrinter mPrinter;
    private CommonTokenStream mRawTokens;
    private int mStatementCount=0;

    private List<Integer> mCodeBlockStack=new ArrayList<Integer>(); //this is used for tracking which block I'm in so that I can handle the open brace differently depending on context
    private boolean mIsFunctionDecl; //flag that tells me whether the function body is associated with an expression or a declaration
    private List<IfElseBlockTracker> mIfElseBlocks=new ArrayList<IfElseBlockTracker>();
    private List<Boolean> mXMLTextContentStack=new ArrayList<Boolean>();

    private boolean mInFunctionParameterDecl=false; //set during formal parameter list so that I know where variable decls came from
    private boolean mInEqualAlignDecl=false; //only set to true for variable statement declarations (not ones in the parameter list, for loops, etc.)

    public AS3_exParser(ASPrettyPrinter printer, CommonTokenStream tokenStream)
    {
    	this(tokenStream, new RecognizerSharedState());
    	mRawTokens=tokenStream;
        mPrinter=printer;
        mStatementCount=0;
    }

    private static class IfElseBlockTracker
    {
    	public boolean mBlockFlag=false;
    	public boolean mBlockFlagSet=false;
    }

    public void addIfElseBlockTracker()
    {
    	mIfElseBlocks.add(new IfElseBlockTracker());
    }

    public void popIfElseBlockTracker()
    {
    	if (mIfElseBlocks.size()>0)
    		mIfElseBlocks.remove(mIfElseBlocks.size()-1);
    }

    public IfElseBlockTracker getCurrentIfElseTracker()
    {
    	if (mIfElseBlocks.size()>0)
    		return mIfElseBlocks.get(mIfElseBlocks.size()-1);
    		
    	return null;
    }

    public void setBlockFlag(boolean flag)
    {
    	IfElseBlockTracker tracker=getCurrentIfElseTracker();
    	if (tracker!=null)
    	{
    		//don't set if already set
    		if (tracker.mBlockFlagSet)
    			return;
    			
    		tracker.mBlockFlag=flag;
    		tracker.mBlockFlagSet=true;
    	}
    }

    public void markBlockFlag()
    {
    	IfElseBlockTracker tracker=getCurrentIfElseTracker();
    	if (tracker!=null)
    		tracker.mBlockFlagSet=true;
    }

    public void clearBlockFlag()
    {
    	IfElseBlockTracker tracker=getCurrentIfElseTracker();
    	if (tracker!=null)
    		tracker.mBlockFlagSet=false;
    }

    public boolean isBlockFlag()
    {
    	IfElseBlockTracker tracker=getCurrentIfElseTracker();
    	if (tracker!=null)
    		return tracker.mBlockFlag;
    		
    	return false;
    }

    private void popBlockStack()
    {
    	if (mCodeBlockStack.size()>0)
    	{
    		mCodeBlockStack.remove(mCodeBlockStack.size()-1);
    	}
    }

    private void setXMLTextContentFlag()
    {
    	if (mXMLTextContentStack.size()>0)
    	{
    		mXMLTextContentStack.set(mXMLTextContentStack.size()-1, true);
    	}
    }

    private void pushXMLTextContentFlag()
    {
    	mXMLTextContentStack.add(false);
    }

    private boolean popXMLTextContentFlag()
    {
    	if (mXMLTextContentStack.size()>0)
    	{
    		int index=mXMLTextContentStack.size()-1;
    		boolean value=mXMLTextContentStack.get(index);
    		mXMLTextContentStack.remove(index);
    		return value;
    	}
    	return false;
    }

    private void emitXMLBreak(Token tok, boolean before)
    {
    	WrapOptions options=mPrinter.getXMLWrapOptions();
    	if ((options.getWrapType()==WrapOptions.WRAP_BY_COLUMN || options.getWrapType()==WrapOptions.WRAP_BY_COLUMN_ONLY_ADD_CRS))
    	{
    		mPrinter.saveWrapChar(tok, ASPrettyPrinter.Break_XML_code, before, false, -1, "");
    	}
    }

    public boolean foundNextLT()
    {
       int i=1;
       while (true)
       {
           Token token=input.LT(i);
           if (token.getText()!=null && token.getText().startsWith("<"))
              return (i>1);
           if (token.getType()==EOF)
              return false;
           i++;   
       }
    }

    public void changeTokensUpToNextLT()
    {
       int i=1;
       while (true)
       {
           Token t=input.LT(i);
           if (t.getText()!=null && t.getText().startsWith("<"))
              return;
           if (t.getType()==EOF)
              return;
           t.setType(XML_TEXT);          
              
           i++;   
       }
    }

    //this is for '.' and other similar characters that might cause a break
    private void wrapEmit(Token item, int breakType)
    {
    	pushExpressionIndent(); //needs to be matched with a popIndent later
    	WrapOptions options=mPrinter.getExpressionWrapOptions();
    	boolean breakBefore=options.isBeforeSeparator();
    	if (breakType==ASPrettyPrinter.Break_Assignment_code || breakType==ASPrettyPrinter.Break_Parameter_Assignment_code)
    		breakBefore=options.isBeforeAssignmentOperator();
    	if ((options.getWrapType()==WrapOptions.WRAP_BY_COLUMN || options.getWrapType()==WrapOptions.WRAP_BY_COLUMN_ONLY_ADD_CRS) && breakBefore)
    	{
    		insertMaxColumnCR();
    	}
    	emit(item);
    	if ((options.getWrapType()==WrapOptions.WRAP_BY_COLUMN || options.getWrapType()==WrapOptions.WRAP_BY_COLUMN_ONLY_ADD_CRS) && !breakBefore)
    	{
    		insertMaxColumnCR();
    	}
    	
    	if ((options.getWrapType()==WrapOptions.WRAP_BY_COLUMN || options.getWrapType()==WrapOptions.WRAP_BY_COLUMN_ONLY_ADD_CRS))
    	{
    		mPrinter.saveWrapChar(item, breakType, (breakType==ASPrettyPrinter.Break_Keyword_code) ? true : breakBefore, false, -1, "");
    	}
    }

    //this is for binary operators
    private void indentEmit(Token operator, int breakType)
    {
    	pushExpressionIndent(); //needs to be matched with a popIndent later
    	WrapOptions options=mPrinter.getExpressionWrapOptions();
    	boolean breakBefore=options.isBeforeSeparator();
    	if (breakType==ASPrettyPrinter.Break_Arithmetic_Ops_code)
    		breakBefore=options.isBeforeArithmeticOperator();
    	else if (breakType==ASPrettyPrinter.Break_Logical_Ops_code || breakType==ASPrettyPrinter.Break_Ternary_code)
    		breakBefore=options.isBeforeLogicalOperator();
    	if ((options.getWrapType()==WrapOptions.WRAP_BY_COLUMN || options.getWrapType()==WrapOptions.WRAP_BY_COLUMN_ONLY_ADD_CRS) && breakBefore)
    	{
    		insertMaxColumnCR();
    	}
    	char firstChar=0;
    	if (operator.getText().length()>0)
    		firstChar=operator.getText().charAt(0);
    	if (firstChar!=0)
    	{
    		if (Character.isJavaIdentifierPart(firstChar))
    			insertWS(1); //add 1 space around text operators (ex. 'as', 'instanceof')
    		else
    			insertWS(mPrinter.getExpressionSpacesAroundSymbolicOperators()); //add configurable symbolic operator value
    	}	
    	emit(operator);
    	if ((options.getWrapType()==WrapOptions.WRAP_BY_COLUMN || options.getWrapType()==WrapOptions.WRAP_BY_COLUMN_ONLY_ADD_CRS) && !breakBefore)
    	{
    		insertMaxColumnCR();
    	}
    	
    	if ((options.getWrapType()==WrapOptions.WRAP_BY_COLUMN || options.getWrapType()==WrapOptions.WRAP_BY_COLUMN_ONLY_ADD_CRS))
    	{
    		mPrinter.saveWrapChar(operator, breakType, breakBefore, false, -1, "");
    	}
    	
    	if (firstChar!=0)
    	{
    		if (Character.isJavaIdentifierPart(firstChar))
    			insertWS(1); //add 1 space around text operators (ex. 'as', 'instanceof')
    		else
    			insertWS(mPrinter.getExpressionSpacesAroundSymbolicOperators()); //add configurable symbolic operator value
    	}	
    }

    private boolean pushWrapInfo(WrapOptions options, boolean newLevel)
    {
    	if (mPrinter.isDoFormat())
    	{
    		if (options.getWrapType()==WrapOptions.WRAP_BY_COLUMN_ONLY_ADD_CRS || options.getWrapType()==WrapOptions.WRAP_BY_COLUMN)
    		{
    			mPrinter.createWrapContext(newLevel);
    			return true;
    		}
    	}
    	
    	return false;
    }

    private boolean pushFormatType(WrapOptions options, boolean lazy)
    {
    	if (mPrinter.isDoFormat())
    	{
    		int formatMode=0;
    		if (options.getWrapType()==WrapOptions.WRAP_DONT_PROCESS)
    		{
    			formatMode=ASPrettyPrinter.FORMAT_INDENT;
    		}
    		else if (options.getWrapType()==WrapOptions.WRAP_FORMAT_NO_CRs)
    		{
    			formatMode=ASPrettyPrinter.FORMAT_NOCRs;
    		}
    		else if (options.getWrapType()==WrapOptions.WRAP_BY_COLUMN_ONLY_ADD_CRS)
    		{
    			formatMode=ASPrettyPrinter.FORMAT_OnlyAddCRs;
    		}
    		else
    		{
    			//if we didn't have a restrictive format, we want to make sure we're using the full format
    			formatMode=ASPrettyPrinter.FORMAT_ALL;
    		}

    		if (formatMode>0)
    		{
    //		    if (formatMode==mPrinter.getFormatMode())
    //		    	return false; //no need to nest format modes of the same type
    		    	
    			if (lazy)
    				mPrinter.pushLazyFormat(formatMode);
    			else
    				mPrinter.pushFormatMode(formatMode);
    			return true;
    		}
    		
    	} 
    	
    	return false;
    }

    private void emitCRForTag(WrapOptions options)
    {
    	if (options.getWrapType()==WrapOptions.WRAP_BY_COLUMN || options.getWrapType()==WrapOptions.WRAP_BY_COLUMN_ONLY_ADD_CRS)
    	{
    		insertMaxColumnCR();
    	}
    	else if (options.getWrapType()==WrapOptions.WRAP_BY_TAG)
    	{
    		insertCR(false);
    	}

    }

    private boolean emitCommaWithSpacingAndCRs(WrapOptions options, Token comma, boolean pushedIndent, int firstParmLocation, String contextType)
    {
    	if ((options.getWrapType()==WrapOptions.WRAP_BY_COLUMN || options.getWrapType()==WrapOptions.WRAP_BY_COLUMN_ONLY_ADD_CRS) && options.isBeforeSeparator())
    	{
    		insertMaxColumnCR();
    	}
    	
    	if (!pushedIndent)
    	{
    		pushedIndent=true;
    		pushExpressionIndent();
    	}
    	
        insertWS(mPrinter.getSpacesBeforeComma());
        emit(comma); 
    	if ((options.getWrapType()==WrapOptions.WRAP_BY_COLUMN || options.getWrapType()==WrapOptions.WRAP_BY_COLUMN_ONLY_ADD_CRS) && !options.isBeforeSeparator())
    	{
    		insertMaxColumnCR();
    	}
    	if ((options.getWrapType()==WrapOptions.WRAP_BY_COLUMN || options.getWrapType()==WrapOptions.WRAP_BY_COLUMN_ONLY_ADD_CRS))
    	{
    		mPrinter.saveWrapChar(comma, ASPrettyPrinter.Break_Commas_code, options.isBeforeSeparator(), options.getIndentStyle()==WrapOptions.WRAP_STYLE_INDENT_TO_WRAP_ELEMENT, firstParmLocation, contextType);
    	}
    	insertWS(mPrinter.getSpacesAfterComma());
    	return pushedIndent;
    }

        public boolean findVirtualHiddenToken(ParserRuleReturnScope retval)
        {
        		//the point of this method is to look for something that can serve as a semicolon.  So a carriage return
        		//or a comment containing a carriage return will fit the bill.
                int index = retval.start.getTokenIndex();
                if(index<0){
                    index = input.size();
                }
                else
                {
                	Token lt=input.get(index);
                	if (lt.getType()==EOF || lt.getType()==SEMI || lt.getType()==RCURLY)
                		return false;
                }
                
    /*            //we are on the next regular channel token after the rule.  So we walk backward to determine if between
                //the rule and this token is a single line comment, multiline comment, or new line that can serve as the
                //end token.  If so, then we 'promote' that token by returning it as the 'end' token of the rule (in place
                //of the semi colon).
    	        for (int ix = index - 1; ix >= 0; ix--){
    	            Token lt = input.get(ix);
    	            int type = lt.getType();
    	            if(lt.getChannel() == Token.DEFAULT_CHANNEL)
    	                break;
    	            if (type == EOL || type==COMMENT_SINGLELINE || (type == COMMENT_MULTILINE && lt.getText().matches("/.*\r\n|\r|\n")))
    	            {
    	            	retval.start=lt;
    	                return true;
    	            }
    	        }*/
                
                
                //the token index is pointing to the next default channel token, which is not what we want.
                //We want to walk backward to the previous default channel token (first loop), and then walk forward
                //again looking for EOL/comments (2nd loop)
                int ix=index-1;
                for (; ix >= 0; ix--){
                    Token lt = input.get(ix);
                    if(lt.getChannel() == Token.DEFAULT_CHANNEL)
                        break;
                }
                
                //walk forward again
                ix++; //to move to next token that's not default channel
                for (;ix<input.size();ix++) //now search for the next "statement ender"
                {
                    Token lt = input.get(ix);
                    int type = lt.getType();
                    if (lt.getChannel() == Token.DEFAULT_CHANNEL)
                        break;
                    if (type == EOL || type==COMMENT_SINGLELINE || (type == COMMENT_MULTILINE && lt.getText().matches("/.*\r\n|\r|\n")))
                    {
                    	retval.start=lt;
                        return true;
                    }
                }

                return false;

        }

    public void reportError(RecognitionException e)
    {
        if (mParseErrors==null)
        	mParseErrors=new ArrayList<Exception>();
        mParseErrors.add(e);
        super.reportError(e);
    }
    		
    private void insertWS(int amt)
    {
        mPrinter.insertWS(amt);
    }

    private void insertLines(int amt)
    {
    	insertLines(amt, true);
    }

    private void insertVariableDeclAssignmentWhitespace(Token equalToken, boolean before)
    {
    	if (mPrinter.isDoFormat() && !mPrinter.isInParameterDecl() && mPrinter.isKeepingExcessDeclWhitespace())
    	{
    		int spaceCount=0;
    		if (before)
    		{
    			Token testToken=mRawTokens.get(equalToken.getTokenIndex()-1);
    			if (testToken.getChannel()==CHANNEL_WHITESPACE)
    			{
    				//if the token before the whitespace is a carriage return, we *don't* want to apply this "preserve whitespace" logic
    				Token prevTok=mRawTokens.get(equalToken.getTokenIndex()-2);
    				if (!(prevTok.getChannel()==CHANNEL_SLCOMMENT || prevTok.getChannel()==CHANNEL_EOL))
    				{
    					if (testToken.getText().indexOf('\t')>=0)
    					{
    						spaceCount=mPrinter.getColumnForIndex(equalToken, 0)-mPrinter.getColumnForIndex(testToken, 0);
    					}
    					else
    					{
    					    spaceCount=testToken.getText().length();
    					}
    				}
    			}
    		}
    		else
    		{
    			Token testToken=mRawTokens.get(equalToken.getTokenIndex()+1);
    			if (testToken.getChannel()==CHANNEL_WHITESPACE)
    			{
    				//if the token after the whitespace is a carriage return, we *don't* want to apply this "preserve whitespace" logic
    				//I think we only care about actual EOL here, not sl comment or ml comment, since there is actual text before the CR,
    				//even if it's not 'code' text.
    				Token nextTok=mRawTokens.get(equalToken.getTokenIndex()+2);
    				if (!(nextTok.getChannel()==CHANNEL_EOL))
    				{
    					if (testToken.getText().indexOf('\t')>=0)
    					{
    						spaceCount=mPrinter.getColumnForIndex(testToken, testToken.getText().length())-mPrinter.getColumnForIndex(equalToken, equalToken.getText().length());
    					}
    					else
    					{
    					    spaceCount=testToken.getText().length();
    					}
    				}
    			}
    		}
    		
    		if (spaceCount>mPrinter.getSpacesAroundAssignment())
    		{
    			insertWS(spaceCount);
    			return;
    		}
    	}
    	
    	insertWS(mPrinter.isInParameterDecl() ? mPrinter.getAdvancedSpacesAroundAssignmentInOptionalParameters() : mPrinter.getSpacesAroundAssignment());
    }

    //this method is for inserting blank lines before elements, based on the format settings
    private void insertLines(int amt, boolean inCodeBlock)
    {
        //don't add blank lines if not inside a block
    	if (!mPrinter.isHardIndent())
    	    return;
    	//don't add blank lines if the wrapper is a labeled statement indent
    	if (mPrinter.isLabeledIndent())
    		return;
    		
    	//don't add blank lines if we are at start of block
    	if (inCodeBlock)
    	{
    		if (!mPrinter.isCanAddCRsAtBlockStart() && mPrinter.isAtBlockStart())
    		{
    			return;
    		}
    	}
    	
        for (int i=0;i<amt;i++)
        {
            mPrinter.insertCR(true);
        }
    }

    private void insertMaxColumnCR()
    {
    	mPrinter.insertCRBeyondMaxCol();
    }

    private void insertStatementCR()
    {
    	if (!mPrinter.isLabeledIndent())
    		insertCR(false);
    }

    boolean isFirstImport=true;
    boolean isFirstClassSeen=false;
    boolean isSeenPackage=false;
    private void addBlankLinesBeforeFirstImport()
    {
    	//only add blank lines for before first import in 'package' area.  The assumption is that all the 
    	// imports are together, or this setting doesn't really make sense.
    	int linesToAdd=mPrinter.getBlankLinesBeforeImports();
    	if (isFirstImport && !isFirstClassSeen && isSeenPackage)
    	{
    		isFirstImport=false;
    		for (int i=0;i<linesToAdd;i++)
    		{
    			insertCR(true);
    		}
    	}
    }
    		
    private void insertCR(boolean override)
    {
        mPrinter.insertCR(override);
    }
    	
    private void pushLabeledIndent()
    {
    	pushExpressionIndent(); //push an expression indent so that it won't further indent the nested statement 
    	mPrinter.makeLabeledIndent();
    }
    	
    private void pushIndent(boolean hardIndent)
    {
    	mPrinter.pushIndent(hardIndent ? ASPrettyPrinter.BRACE_INDENT : ASPrettyPrinter.STATEMENT_INDENT);
    }

    private void pushExpressionIndent()
    {
    	mPrinter.pushIndent(ASPrettyPrinter.EXPRESSION_INDENT);
    }

    private boolean pushLazyParmIndent(boolean alreadyPushed, int indentStyle)
    {
    	if (!alreadyPushed)
    	{
    		if (!mPrinter.isUseAdvancedWrapping() && indentStyle==WrapOptions.WRAP_STYLE_INDENT_TO_WRAP_ELEMENT)
    			mPrinter.pushLazyIndent(ASPrettyPrinter.EXPRESSION_INDENT_NEXTITEM);
    		else
    			pushLazyIndent();
    	}
    	return true;
    }

    private void pushLazyIndent()
    {
    	mPrinter.pushLazyIndent(ASPrettyPrinter.EXPRESSION_INDENT);
    }

    private void popIndent()
    {
        mPrinter.popIndent();
    }
    		
    private void leftCurlyNewlineHandler(boolean checkBraceIndent)
    {
       if (mPrinter.isCRBeforeOpenBrace(mCodeBlockStack) || (checkBraceIndent && mPrinter.getIndentType(0)==mPrinter.BRACE_INDENT))
       {
           insertCR(false);
           insertWS(1); //add a space here just in case newlines can't be added
       }
       else
           insertWS(1);
    }
    		
    private void emit(Token tok)
    {
        mPrinter.emit(tok);
    }
    		    
    		
    public List<Exception> getParseErrors()
    {
        return mParseErrors;
    }
    		
    /*        boolean isNotReservedWord(String name) {
            String[] reserveWords = new String[]
                {
                    "as",
                    "break",
                    "case",
                    "catch",
                    "class",
                    "const",
                    "continue",
                    "default",
                    "delete",
                    "do",
                    "else",
                    "extends",
                    "false",
                    "finally",
                    "for",
                    "function",
                    "if",
                    "implements",
                    "import",
                    "in",
                    "instanceof",
                    "interface",
                    "internal",
                    "is",
                    "native",
                    "new",
                    "null",
                    "package",
                    "private",
                    "protected",
                    "public",
                    "return",
                    "super",
                    "switch",
                    "this",
                    "throw",
                    "to",
                    "true",
                    "try",
                    "typeof",
                    "use",
                    "var",
                    "void",
                    "while",
                    "with"
                };
            for (int i = 0; i<reserveWords.length; i++) {
                if ( reserveWords[i].equals(name) ) {
                    return false;
                }
            }
            return true;
        }
        */
        
    /*    private final void promoteEOL(ParserRuleReturnScope rule)
        {
            System.out.println("start promoteEOL <<let HIDDENT Token EOL be visible>>");
            Token lt = input.LT(1);
            int index = lt.getTokenIndex();
            if(index<0){
                index = input.size();
            }
            int la = lt.getType();
            
            for (int ix = index - 1; ix >= 0; ix--){
                lt = input.get(ix);
                int type = lt.getType();
                if (type == EOL || (type == COMMENT_MULTILINE && lt.getText().matches("/.*\r\n|\r|\n"))){
                    lt.setChannel(Token.DEFAULT_CHANNEL);
                    input.seek(lt.getTokenIndex());
                    System.out.println("promoteEOL : HIDDEN Token ("+lt+") is set to DEFAULT");
                    if (rule != null){
                        System.out.println("promoteEOL :  startToken set as "+lt);
                        rule.start = lt;
                    }
                    return;
                }else if(lt.getChannel() == Token.DEFAULT_CHANNEL){
                    break;
                }
            }
            System.out.println("");
        }
      */
        
        public static final int CHANNEL_SLCOMMENT=43;
        public static final int CHANNEL_MLCOMMENT=42;
        public static final int CHANNEL_WHITESPACE=41;
        public static final int CHANNEL_EOL=40;
        
        private final boolean promoteWhitespace()
        {
        	//find the current lookahead token
            Token lt = input.LT(1);
            int index = lt.getTokenIndex();
            if(index<0){
                index = input.size();
            }

    		//walk backward through tokens to see if the previous token is whitespace.
            for (int ix = index - 1; ix >= 0; ix--){
                lt = input.get(ix);
                int channel=lt.getChannel();
                if (channel == CHANNEL_EOL || channel ==  CHANNEL_WHITESPACE){
                    return true;
                } else if(channel == Token.DEFAULT_CHANNEL){
                    break;
                }
            }
            return false;
        }


    public static class booleanLiteral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "booleanLiteral"
    // AS3_ex.g3:1242:1: booleanLiteral : (T= TRUE | F= FALSE );
    public final AS3_exParser.booleanLiteral_return booleanLiteral() throws RecognitionException {
        AS3_exParser.booleanLiteral_return retval = new AS3_exParser.booleanLiteral_return();
        retval.start = input.LT(1);
        int booleanLiteral_StartIndex = input.index();
        Object root_0 = null;

        Token T=null;
        Token F=null;

        Object T_tree=null;
        Object F_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // AS3_ex.g3:1242:36: (T= TRUE | F= FALSE )
            int alt1=2;
            int LA1_0 = input.LA(1);

            if ( (LA1_0==TRUE) ) {
                alt1=1;
            }
            else if ( (LA1_0==FALSE) ) {
                alt1=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 1, 0, input);

                throw nvae;
            }
            switch (alt1) {
                case 1 :
                    // AS3_ex.g3:1242:40: T= TRUE
                    {
                    root_0 = (Object)adaptor.nil();

                    T=(Token)match(input,TRUE,FOLLOW_TRUE_in_booleanLiteral3642); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    T_tree = (Object)adaptor.create(T);
                    adaptor.addChild(root_0, T_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(T);
                    }

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:1242:61: F= FALSE
                    {
                    root_0 = (Object)adaptor.nil();

                    F=(Token)match(input,FALSE,FOLLOW_FALSE_in_booleanLiteral3650); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    F_tree = (Object)adaptor.create(F);
                    adaptor.addChild(root_0, F_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(F);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, booleanLiteral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "booleanLiteral"

    public static class numericLiteral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericLiteral"
    // AS3_ex.g3:1244:1: numericLiteral : (D= DEC_NUMBER_LITERAL | H= HEX_NUMBER_LITERAL );
    public final AS3_exParser.numericLiteral_return numericLiteral() throws RecognitionException {
        AS3_exParser.numericLiteral_return retval = new AS3_exParser.numericLiteral_return();
        retval.start = input.LT(1);
        int numericLiteral_StartIndex = input.index();
        Object root_0 = null;

        Token D=null;
        Token H=null;

        Object D_tree=null;
        Object H_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // AS3_ex.g3:1244:36: (D= DEC_NUMBER_LITERAL | H= HEX_NUMBER_LITERAL )
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==DEC_NUMBER_LITERAL) ) {
                alt2=1;
            }
            else if ( (LA2_0==HEX_NUMBER_LITERAL) ) {
                alt2=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;
            }
            switch (alt2) {
                case 1 :
                    // AS3_ex.g3:1244:40: D= DEC_NUMBER_LITERAL
                    {
                    root_0 = (Object)adaptor.nil();

                    D=(Token)match(input,DEC_NUMBER_LITERAL,FOLLOW_DEC_NUMBER_LITERAL_in_numericLiteral3684); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    D_tree = (Object)adaptor.create(D);
                    adaptor.addChild(root_0, D_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(D);
                    }

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:1244:75: H= HEX_NUMBER_LITERAL
                    {
                    root_0 = (Object)adaptor.nil();

                    H=(Token)match(input,HEX_NUMBER_LITERAL,FOLLOW_HEX_NUMBER_LITERAL_in_numericLiteral3692); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    H_tree = (Object)adaptor.create(H);
                    adaptor.addChild(root_0, H_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(H);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, numericLiteral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numericLiteral"

    public static class stringLiteral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stringLiteral"
    // AS3_ex.g3:1246:1: stringLiteral : (S= SINGLE_QUOTE_LITERAL | D= DOUBLE_QUOTE_LITERAL );
    public final AS3_exParser.stringLiteral_return stringLiteral() throws RecognitionException {
        AS3_exParser.stringLiteral_return retval = new AS3_exParser.stringLiteral_return();
        retval.start = input.LT(1);
        int stringLiteral_StartIndex = input.index();
        Object root_0 = null;

        Token S=null;
        Token D=null;

        Object S_tree=null;
        Object D_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // AS3_ex.g3:1246:36: (S= SINGLE_QUOTE_LITERAL | D= DOUBLE_QUOTE_LITERAL )
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==SINGLE_QUOTE_LITERAL) ) {
                alt3=1;
            }
            else if ( (LA3_0==DOUBLE_QUOTE_LITERAL) ) {
                alt3=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;
            }
            switch (alt3) {
                case 1 :
                    // AS3_ex.g3:1246:40: S= SINGLE_QUOTE_LITERAL
                    {
                    root_0 = (Object)adaptor.nil();

                    S=(Token)match(input,SINGLE_QUOTE_LITERAL,FOLLOW_SINGLE_QUOTE_LITERAL_in_stringLiteral3727); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    S_tree = (Object)adaptor.create(S);
                    adaptor.addChild(root_0, S_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(S);
                    }

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:1246:76: D= DOUBLE_QUOTE_LITERAL
                    {
                    root_0 = (Object)adaptor.nil();

                    D=(Token)match(input,DOUBLE_QUOTE_LITERAL,FOLLOW_DOUBLE_QUOTE_LITERAL_in_stringLiteral3734); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    D_tree = (Object)adaptor.create(D);
                    adaptor.addChild(root_0, D_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(D);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, stringLiteral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "stringLiteral"

    public static class regularExpresionLiteral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "regularExpresionLiteral"
    // AS3_ex.g3:1248:1: regularExpresionLiteral : R= REGULAR_EXPR_LITERAL ;
    public final AS3_exParser.regularExpresionLiteral_return regularExpresionLiteral() throws RecognitionException {
        AS3_exParser.regularExpresionLiteral_return retval = new AS3_exParser.regularExpresionLiteral_return();
        retval.start = input.LT(1);
        int regularExpresionLiteral_StartIndex = input.index();
        Object root_0 = null;

        Token R=null;

        Object R_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // AS3_ex.g3:1248:36: (R= REGULAR_EXPR_LITERAL )
            // AS3_ex.g3:1248:40: R= REGULAR_EXPR_LITERAL
            {
            root_0 = (Object)adaptor.nil();

            R=(Token)match(input,REGULAR_EXPR_LITERAL,FOLLOW_REGULAR_EXPR_LITERAL_in_regularExpresionLiteral3759); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            R_tree = (Object)adaptor.create(R);
            adaptor.addChild(root_0, R_tree);
            }
            if ( state.backtracking==0 ) {
              emit(R);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, regularExpresionLiteral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "regularExpresionLiteral"

    public static class identifierLiteral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "identifierLiteral"
    // AS3_ex.g3:1250:1: identifierLiteral : (I= IDENTIFIER | notQuiteReservedWord );
    public final AS3_exParser.identifierLiteral_return identifierLiteral() throws RecognitionException {
        AS3_exParser.identifierLiteral_return retval = new AS3_exParser.identifierLiteral_return();
        retval.start = input.LT(1);
        int identifierLiteral_StartIndex = input.index();
        Object root_0 = null;

        Token I=null;
        AS3_exParser.notQuiteReservedWord_return notQuiteReservedWord1 = null;


        Object I_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // AS3_ex.g3:1250:36: (I= IDENTIFIER | notQuiteReservedWord )
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==IDENTIFIER) ) {
                alt4=1;
            }
            else if ( (LA4_0==NATIVE||LA4_0==TO||(LA4_0>=EACH && LA4_0<=NAMESPACE)||(LA4_0>=DYNAMIC && LA4_0<=STATIC)) ) {
                alt4=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;
            }
            switch (alt4) {
                case 1 :
                    // AS3_ex.g3:1250:88: I= IDENTIFIER
                    {
                    root_0 = (Object)adaptor.nil();

                    I=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_identifierLiteral3792); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    I_tree = (Object)adaptor.create(I);
                    adaptor.addChild(root_0, I_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(I);
                    }

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:1250:114: notQuiteReservedWord
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_notQuiteReservedWord_in_identifierLiteral3797);
                    notQuiteReservedWord1=notQuiteReservedWord();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, notQuiteReservedWord1.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, identifierLiteral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "identifierLiteral"

    public static class xmlNameLiteral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlNameLiteral"
    // AS3_ex.g3:1252:1: xmlNameLiteral : (I= IDENTIFIER | allKeywords ) ({...}? => (s= SUB | d= DOT | c= COLON ) {...}? => (I2= IDENTIFIER | allKeywords ) )* ;
    public final AS3_exParser.xmlNameLiteral_return xmlNameLiteral() throws RecognitionException {
        AS3_exParser.xmlNameLiteral_return retval = new AS3_exParser.xmlNameLiteral_return();
        retval.start = input.LT(1);
        int xmlNameLiteral_StartIndex = input.index();
        Object root_0 = null;

        Token I=null;
        Token s=null;
        Token d=null;
        Token c=null;
        Token I2=null;
        AS3_exParser.allKeywords_return allKeywords2 = null;

        AS3_exParser.allKeywords_return allKeywords3 = null;


        Object I_tree=null;
        Object s_tree=null;
        Object d_tree=null;
        Object c_tree=null;
        Object I2_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // AS3_ex.g3:1252:36: ( (I= IDENTIFIER | allKeywords ) ({...}? => (s= SUB | d= DOT | c= COLON ) {...}? => (I2= IDENTIFIER | allKeywords ) )* )
            // AS3_ex.g3:1252:40: (I= IDENTIFIER | allKeywords ) ({...}? => (s= SUB | d= DOT | c= COLON ) {...}? => (I2= IDENTIFIER | allKeywords ) )*
            {
            root_0 = (Object)adaptor.nil();

            // AS3_ex.g3:1252:40: (I= IDENTIFIER | allKeywords )
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==IDENTIFIER) ) {
                alt5=1;
            }
            else if ( ((LA5_0>=AS && LA5_0<=STATIC)) ) {
                alt5=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 5, 0, input);

                throw nvae;
            }
            switch (alt5) {
                case 1 :
                    // AS3_ex.g3:1252:41: I= IDENTIFIER
                    {
                    I=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_xmlNameLiteral3832); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    I_tree = (Object)adaptor.create(I);
                    adaptor.addChild(root_0, I_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(I);
                    }

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:1252:67: allKeywords
                    {
                    pushFollow(FOLLOW_allKeywords_in_xmlNameLiteral3837);
                    allKeywords2=allKeywords();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, allKeywords2.getTree());

                    }
                    break;

            }

            // AS3_ex.g3:1252:80: ({...}? => (s= SUB | d= DOT | c= COLON ) {...}? => (I2= IDENTIFIER | allKeywords ) )*
            loop8:
            do {
                int alt8=2;
                alt8 = dfa8.predict(input);
                switch (alt8) {
            	case 1 :
            	    // AS3_ex.g3:1252:82: {...}? => (s= SUB | d= DOT | c= COLON ) {...}? => (I2= IDENTIFIER | allKeywords )
            	    {
            	    if ( !((!promoteWhitespace())) ) {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        throw new FailedPredicateException(input, "xmlNameLiteral", "!promoteWhitespace()");
            	    }
            	    // AS3_ex.g3:1252:108: (s= SUB | d= DOT | c= COLON )
            	    int alt6=3;
            	    switch ( input.LA(1) ) {
            	    case SUB:
            	        {
            	        alt6=1;
            	        }
            	        break;
            	    case DOT:
            	        {
            	        alt6=2;
            	        }
            	        break;
            	    case COLON:
            	        {
            	        alt6=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 6, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt6) {
            	        case 1 :
            	            // AS3_ex.g3:1252:109: s= SUB
            	            {
            	            s=(Token)match(input,SUB,FOLLOW_SUB_in_xmlNameLiteral3848); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            s_tree = (Object)adaptor.create(s);
            	            adaptor.addChild(root_0, s_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              emit(s);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // AS3_ex.g3:1252:129: d= DOT
            	            {
            	            d=(Token)match(input,DOT,FOLLOW_DOT_in_xmlNameLiteral3856); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            d_tree = (Object)adaptor.create(d);
            	            adaptor.addChild(root_0, d_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              emit(d);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // AS3_ex.g3:1252:149: c= COLON
            	            {
            	            c=(Token)match(input,COLON,FOLLOW_COLON_in_xmlNameLiteral3864); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            c_tree = (Object)adaptor.create(c);
            	            adaptor.addChild(root_0, c_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              emit(c);
            	            }

            	            }
            	            break;

            	    }

            	    if ( !((!promoteWhitespace())) ) {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        throw new FailedPredicateException(input, "xmlNameLiteral", "!promoteWhitespace()");
            	    }
            	    // AS3_ex.g3:1252:196: (I2= IDENTIFIER | allKeywords )
            	    int alt7=2;
            	    int LA7_0 = input.LA(1);

            	    if ( (LA7_0==IDENTIFIER) ) {
            	        alt7=1;
            	    }
            	    else if ( ((LA7_0>=AS && LA7_0<=STATIC)) ) {
            	        alt7=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 7, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt7) {
            	        case 1 :
            	            // AS3_ex.g3:1252:197: I2= IDENTIFIER
            	            {
            	            I2=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_xmlNameLiteral3875); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            I2_tree = (Object)adaptor.create(I2);
            	            adaptor.addChild(root_0, I2_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              emit(I2);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // AS3_ex.g3:1252:226: allKeywords
            	            {
            	            pushFollow(FOLLOW_allKeywords_in_xmlNameLiteral3881);
            	            allKeywords3=allKeywords();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, allKeywords3.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop8;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, xmlNameLiteral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmlNameLiteral"

    public static class literal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "literal"
    // AS3_ex.g3:1255:1: literal : (N= NULL | booleanLiteral | numericLiteral | stringLiteral | regularExpresionLiteral );
    public final AS3_exParser.literal_return literal() throws RecognitionException {
        AS3_exParser.literal_return retval = new AS3_exParser.literal_return();
        retval.start = input.LT(1);
        int literal_StartIndex = input.index();
        Object root_0 = null;

        Token N=null;
        AS3_exParser.booleanLiteral_return booleanLiteral4 = null;

        AS3_exParser.numericLiteral_return numericLiteral5 = null;

        AS3_exParser.stringLiteral_return stringLiteral6 = null;

        AS3_exParser.regularExpresionLiteral_return regularExpresionLiteral7 = null;


        Object N_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // AS3_ex.g3:1255:36: (N= NULL | booleanLiteral | numericLiteral | stringLiteral | regularExpresionLiteral )
            int alt9=5;
            switch ( input.LA(1) ) {
            case NULL:
                {
                alt9=1;
                }
                break;
            case FALSE:
            case TRUE:
                {
                alt9=2;
                }
                break;
            case HEX_NUMBER_LITERAL:
            case DEC_NUMBER_LITERAL:
                {
                alt9=3;
                }
                break;
            case SINGLE_QUOTE_LITERAL:
            case DOUBLE_QUOTE_LITERAL:
                {
                alt9=4;
                }
                break;
            case REGULAR_EXPR_LITERAL:
                {
                alt9=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;
            }

            switch (alt9) {
                case 1 :
                    // AS3_ex.g3:1255:40: N= NULL
                    {
                    root_0 = (Object)adaptor.nil();

                    N=(Token)match(input,NULL,FOLLOW_NULL_in_literal3934); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    N_tree = (Object)adaptor.create(N);
                    adaptor.addChild(root_0, N_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(N);
                    }

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:1255:61: booleanLiteral
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_booleanLiteral_in_literal3940);
                    booleanLiteral4=booleanLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, booleanLiteral4.getTree());

                    }
                    break;
                case 3 :
                    // AS3_ex.g3:1255:78: numericLiteral
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_numericLiteral_in_literal3944);
                    numericLiteral5=numericLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericLiteral5.getTree());

                    }
                    break;
                case 4 :
                    // AS3_ex.g3:1255:95: stringLiteral
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_stringLiteral_in_literal3948);
                    stringLiteral6=stringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringLiteral6.getTree());

                    }
                    break;
                case 5 :
                    // AS3_ex.g3:1255:111: regularExpresionLiteral
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_regularExpresionLiteral_in_literal3952);
                    regularExpresionLiteral7=regularExpresionLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, regularExpresionLiteral7.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, literal_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "literal"

    public static class xmlMarkup_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlMarkup"
    // AS3_ex.g3:1258:1: xmlMarkup : ( xmlComment | xmlCDATA | xmlPI );
    public final AS3_exParser.xmlMarkup_return xmlMarkup() throws RecognitionException {
        AS3_exParser.xmlMarkup_return retval = new AS3_exParser.xmlMarkup_return();
        retval.start = input.LT(1);
        int xmlMarkup_StartIndex = input.index();
        Object root_0 = null;

        AS3_exParser.xmlComment_return xmlComment8 = null;

        AS3_exParser.xmlCDATA_return xmlCDATA9 = null;

        AS3_exParser.xmlPI_return xmlPI10 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // AS3_ex.g3:1258:36: ( xmlComment | xmlCDATA | xmlPI )
            int alt10=3;
            switch ( input.LA(1) ) {
            case XML_COMMENT:
                {
                alt10=1;
                }
                break;
            case XML_CDATA:
                {
                alt10=2;
                }
                break;
            case XML_PI:
                {
                alt10=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }

            switch (alt10) {
                case 1 :
                    // AS3_ex.g3:1258:40: xmlComment
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_xmlComment_in_xmlMarkup3988);
                    xmlComment8=xmlComment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlComment8.getTree());

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:1258:53: xmlCDATA
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_xmlCDATA_in_xmlMarkup3992);
                    xmlCDATA9=xmlCDATA();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlCDATA9.getTree());

                    }
                    break;
                case 3 :
                    // AS3_ex.g3:1258:64: xmlPI
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_xmlPI_in_xmlMarkup3996);
                    xmlPI10=xmlPI();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlPI10.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, xmlMarkup_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmlMarkup"

    public static class xmlComment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlComment"
    // AS3_ex.g3:1259:1: xmlComment : x= XML_COMMENT ;
    public final AS3_exParser.xmlComment_return xmlComment() throws RecognitionException {
        AS3_exParser.xmlComment_return retval = new AS3_exParser.xmlComment_return();
        retval.start = input.LT(1);
        int xmlComment_StartIndex = input.index();
        Object root_0 = null;

        Token x=null;

        Object x_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // AS3_ex.g3:1259:36: (x= XML_COMMENT )
            // AS3_ex.g3:1259:40: x= XML_COMMENT
            {
            root_0 = (Object)adaptor.nil();

            x=(Token)match(input,XML_COMMENT,FOLLOW_XML_COMMENT_in_xmlComment4031); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            x_tree = (Object)adaptor.create(x);
            adaptor.addChild(root_0, x_tree);
            }
            if ( state.backtracking==0 ) {
              emit(x);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, xmlComment_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmlComment"

    public static class xmlCDATA_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlCDATA"
    // AS3_ex.g3:1260:1: xmlCDATA : x= XML_CDATA ;
    public final AS3_exParser.xmlCDATA_return xmlCDATA() throws RecognitionException {
        AS3_exParser.xmlCDATA_return retval = new AS3_exParser.xmlCDATA_return();
        retval.start = input.LT(1);
        int xmlCDATA_StartIndex = input.index();
        Object root_0 = null;

        Token x=null;

        Object x_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // AS3_ex.g3:1260:36: (x= XML_CDATA )
            // AS3_ex.g3:1260:40: x= XML_CDATA
            {
            root_0 = (Object)adaptor.nil();

            x=(Token)match(input,XML_CDATA,FOLLOW_XML_CDATA_in_xmlCDATA4073); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            x_tree = (Object)adaptor.create(x);
            adaptor.addChild(root_0, x_tree);
            }
            if ( state.backtracking==0 ) {
              emit(x);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, xmlCDATA_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmlCDATA"

    public static class xmlPI_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlPI"
    // AS3_ex.g3:1261:1: xmlPI : x= XML_PI ;
    public final AS3_exParser.xmlPI_return xmlPI() throws RecognitionException {
        AS3_exParser.xmlPI_return retval = new AS3_exParser.xmlPI_return();
        retval.start = input.LT(1);
        int xmlPI_StartIndex = input.index();
        Object root_0 = null;

        Token x=null;

        Object x_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // AS3_ex.g3:1261:36: (x= XML_PI )
            // AS3_ex.g3:1261:40: x= XML_PI
            {
            root_0 = (Object)adaptor.nil();

            x=(Token)match(input,XML_PI,FOLLOW_XML_PI_in_xmlPI4116); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            x_tree = (Object)adaptor.create(x);
            adaptor.addChild(root_0, x_tree);
            }
            if ( state.backtracking==0 ) {
              emit(x);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, xmlPI_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmlPI"

    public static class xmlExprEval_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlExprEval"
    // AS3_ex.g3:1262:1: xmlExprEval : L= LCURLY expression R= RCURLY ;
    public final AS3_exParser.xmlExprEval_return xmlExprEval() throws RecognitionException {
        AS3_exParser.xmlExprEval_return retval = new AS3_exParser.xmlExprEval_return();
        retval.start = input.LT(1);
        int xmlExprEval_StartIndex = input.index();
        Object root_0 = null;

        Token L=null;
        Token R=null;
        AS3_exParser.expression_return expression11 = null;


        Object L_tree=null;
        Object R_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // AS3_ex.g3:1262:36: (L= LCURLY expression R= RCURLY )
            // AS3_ex.g3:1262:40: L= LCURLY expression R= RCURLY
            {
            root_0 = (Object)adaptor.nil();

            L=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_xmlExprEval4154); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            L_tree = (Object)adaptor.create(L);
            adaptor.addChild(root_0, L_tree);
            }
            if ( state.backtracking==0 ) {
              emit(L);pushIndent(true);
            }
            pushFollow(FOLLOW_expression_in_xmlExprEval4158);
            expression11=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression11.getTree());
            R=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_xmlExprEval4162); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            R_tree = (Object)adaptor.create(R);
            adaptor.addChild(root_0, R_tree);
            }
            if ( state.backtracking==0 ) {
              popIndent();emit(R);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, xmlExprEval_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmlExprEval"

    public static class xmlTextElement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlTextElement"
    // AS3_ex.g3:1265:1: xmlTextElement : ( allKeywords | lexToken= ( DEC_NUMBER_LITERAL | HEX_NUMBER_LITERAL | SINGLE_QUOTE_LITERAL | DOUBLE_QUOTE_LITERAL | IDENTIFIER | XML_TEXT | DIV | SEMI | RCURLY | LPAREN | RPAREN | LBRACK | RBRACK | DOT | COMMA | GT | LTE | EQ | NEQ | SAME | NSAME | PLUS | SUB | STAR | MOD | INC | DEC | SHL | AND | OR | XOR | NOT | INV | LAND | LOR | QUE | COLON | ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | SHL_ASSIGN | AND_ASSIGN | XOR_ASSIGN | OR_ASSIGN | LOR_ASSIGN | LAND_ASSIGN | ELLIPSIS | XML_ELLIPSIS | XML_NS_OP | XML_AT ) );
    public final AS3_exParser.xmlTextElement_return xmlTextElement() throws RecognitionException {
        AS3_exParser.xmlTextElement_return retval = new AS3_exParser.xmlTextElement_return();
        retval.start = input.LT(1);
        int xmlTextElement_StartIndex = input.index();
        Object root_0 = null;

        Token lexToken=null;
        AS3_exParser.allKeywords_return allKeywords12 = null;


        Object lexToken_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // AS3_ex.g3:1266:5: ( allKeywords | lexToken= ( DEC_NUMBER_LITERAL | HEX_NUMBER_LITERAL | SINGLE_QUOTE_LITERAL | DOUBLE_QUOTE_LITERAL | IDENTIFIER | XML_TEXT | DIV | SEMI | RCURLY | LPAREN | RPAREN | LBRACK | RBRACK | DOT | COMMA | GT | LTE | EQ | NEQ | SAME | NSAME | PLUS | SUB | STAR | MOD | INC | DEC | SHL | AND | OR | XOR | NOT | INV | LAND | LOR | QUE | COLON | ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | SHL_ASSIGN | AND_ASSIGN | XOR_ASSIGN | OR_ASSIGN | LOR_ASSIGN | LAND_ASSIGN | ELLIPSIS | XML_ELLIPSIS | XML_NS_OP | XML_AT ) )
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( ((LA11_0>=AS && LA11_0<=STATIC)) ) {
                alt11=1;
            }
            else if ( (LA11_0==SEMI||(LA11_0>=RCURLY && LA11_0<=COMMA)||(LA11_0>=GT && LA11_0<=LTE)||(LA11_0>=EQ && LA11_0<=SHL)||(LA11_0>=AND && LA11_0<=SHL_ASSIGN)||(LA11_0>=LAND_ASSIGN && LA11_0<=XML_ELLIPSIS)||(LA11_0>=XML_NS_OP && LA11_0<=XML_AT)||(LA11_0>=SINGLE_QUOTE_LITERAL && LA11_0<=DOUBLE_QUOTE_LITERAL)||LA11_0==HEX_NUMBER_LITERAL||LA11_0==DEC_NUMBER_LITERAL||LA11_0==IDENTIFIER||LA11_0==XML_TEXT) ) {
                alt11=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;
            }
            switch (alt11) {
                case 1 :
                    // AS3_ex.g3:1267:3: allKeywords
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_allKeywords_in_xmlTextElement4180);
                    allKeywords12=allKeywords();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, allKeywords12.getTree());
                    if ( state.backtracking==0 ) {
                      /*TODO: see if I can change token type*/
                    }

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:1268:7: lexToken= ( DEC_NUMBER_LITERAL | HEX_NUMBER_LITERAL | SINGLE_QUOTE_LITERAL | DOUBLE_QUOTE_LITERAL | IDENTIFIER | XML_TEXT | DIV | SEMI | RCURLY | LPAREN | RPAREN | LBRACK | RBRACK | DOT | COMMA | GT | LTE | EQ | NEQ | SAME | NSAME | PLUS | SUB | STAR | MOD | INC | DEC | SHL | AND | OR | XOR | NOT | INV | LAND | LOR | QUE | COLON | ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | SHL_ASSIGN | AND_ASSIGN | XOR_ASSIGN | OR_ASSIGN | LOR_ASSIGN | LAND_ASSIGN | ELLIPSIS | XML_ELLIPSIS | XML_NS_OP | XML_AT )
                    {
                    root_0 = (Object)adaptor.nil();

                    lexToken=(Token)input.LT(1);
                    if ( input.LA(1)==SEMI||(input.LA(1)>=RCURLY && input.LA(1)<=COMMA)||(input.LA(1)>=GT && input.LA(1)<=LTE)||(input.LA(1)>=EQ && input.LA(1)<=SHL)||(input.LA(1)>=AND && input.LA(1)<=SHL_ASSIGN)||(input.LA(1)>=LAND_ASSIGN && input.LA(1)<=XML_ELLIPSIS)||(input.LA(1)>=XML_NS_OP && input.LA(1)<=XML_AT)||(input.LA(1)>=SINGLE_QUOTE_LITERAL && input.LA(1)<=DOUBLE_QUOTE_LITERAL)||input.LA(1)==HEX_NUMBER_LITERAL||input.LA(1)==DEC_NUMBER_LITERAL||input.LA(1)==IDENTIFIER||input.LA(1)==XML_TEXT ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(lexToken));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }

                    if ( state.backtracking==0 ) {

                              lexToken.setType(XML_TEXT); 
                              emit(lexToken);
                          
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, xmlTextElement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmlTextElement"

    public static class xmlText_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlText"
    // AS3_ex.g3:1339:1: xmlText : ( xmlTextElement )+ ;
    public final AS3_exParser.xmlText_return xmlText() throws RecognitionException {
        AS3_exParser.xmlText_return retval = new AS3_exParser.xmlText_return();
        retval.start = input.LT(1);
        int xmlText_StartIndex = input.index();
        Object root_0 = null;

        AS3_exParser.xmlTextElement_return xmlTextElement13 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // AS3_ex.g3:1340:5: ( ( xmlTextElement )+ )
            // AS3_ex.g3:1341:5: ( xmlTextElement )+
            {
            root_0 = (Object)adaptor.nil();

            // AS3_ex.g3:1341:5: ( xmlTextElement )+
            int cnt12=0;
            loop12:
            do {
                int alt12=2;
                switch ( input.LA(1) ) {
                case AS:
                case BREAK:
                case CASE:
                case CATCH:
                case CLASS:
                case CONST:
                case CONTINUE:
                case DEFAULT:
                case DELETE:
                case DO:
                case ELSE:
                case EXTENDS:
                case FALSE:
                case FINALLY:
                case FOR:
                case FUNCTION:
                case IF:
                case IMPLEMENTS:
                case IMPORT:
                case IN:
                case INSTANCEOF:
                case INTERFACE:
                case INTERNAL:
                case IS:
                case NEW:
                case NULL:
                case PACKAGE:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case RETURN:
                case SUPER:
                case SWITCH:
                case THIS:
                case THROW:
                case TRUE:
                case TRY:
                case TYPEOF:
                case USE:
                case VAR:
                case VOID:
                case WHILE:
                case WITH:
                case INCLUDE:
                    {
                    int LA12_2 = input.LA(2);

                    if ( (synpred68_AS3_ex()) ) {
                        alt12=1;
                    }


                    }
                    break;
                case NATIVE:
                case TO:
                case EACH:
                case GET:
                case SET:
                case NAMESPACE:
                case DYNAMIC:
                case FINAL:
                case OVERRIDE:
                case STATIC:
                    {
                    int LA12_3 = input.LA(2);

                    if ( (synpred68_AS3_ex()) ) {
                        alt12=1;
                    }


                    }
                    break;
                case SEMI:
                case RCURLY:
                case LPAREN:
                case RPAREN:
                case LBRACK:
                case RBRACK:
                case DOT:
                case COMMA:
                case GT:
                case LTE:
                case EQ:
                case NEQ:
                case SAME:
                case NSAME:
                case PLUS:
                case SUB:
                case STAR:
                case DIV:
                case MOD:
                case INC:
                case DEC:
                case SHL:
                case AND:
                case OR:
                case XOR:
                case NOT:
                case INV:
                case LAND:
                case LOR:
                case QUE:
                case COLON:
                case ASSIGN:
                case DIV_ASSIGN:
                case MOD_ASSIGN:
                case ADD_ASSIGN:
                case SUB_ASSIGN:
                case SHL_ASSIGN:
                case LAND_ASSIGN:
                case LOR_ASSIGN:
                case AND_ASSIGN:
                case XOR_ASSIGN:
                case OR_ASSIGN:
                case ELLIPSIS:
                case XML_ELLIPSIS:
                case XML_NS_OP:
                case XML_AT:
                case SINGLE_QUOTE_LITERAL:
                case DOUBLE_QUOTE_LITERAL:
                case HEX_NUMBER_LITERAL:
                case DEC_NUMBER_LITERAL:
                case IDENTIFIER:
                case XML_TEXT:
                    {
                    int LA12_4 = input.LA(2);

                    if ( (synpred68_AS3_ex()) ) {
                        alt12=1;
                    }


                    }
                    break;

                }

                switch (alt12) {
            	case 1 :
            	    // AS3_ex.g3:1341:6: xmlTextElement
            	    {
            	    pushFollow(FOLLOW_xmlTextElement_in_xmlText4908);
            	    xmlTextElement13=xmlTextElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlTextElement13.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt12 >= 1 ) break loop12;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(12, input);
                        throw eee;
                }
                cnt12++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, xmlText_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmlText"

    public static class xmlPrimaryExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlPrimaryExpression"
    // AS3_ex.g3:1345:1: xmlPrimaryExpression : ( xmlPropertyIdentifier | xmlInitialiser | xmlListInitialiser );
    public final AS3_exParser.xmlPrimaryExpression_return xmlPrimaryExpression() throws RecognitionException {
        AS3_exParser.xmlPrimaryExpression_return retval = new AS3_exParser.xmlPrimaryExpression_return();
        retval.start = input.LT(1);
        int xmlPrimaryExpression_StartIndex = input.index();
        Object root_0 = null;

        AS3_exParser.xmlPropertyIdentifier_return xmlPropertyIdentifier14 = null;

        AS3_exParser.xmlInitialiser_return xmlInitialiser15 = null;

        AS3_exParser.xmlListInitialiser_return xmlListInitialiser16 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // AS3_ex.g3:1346:5: ( xmlPropertyIdentifier | xmlInitialiser | xmlListInitialiser )
            int alt13=3;
            switch ( input.LA(1) ) {
            case AS:
            case BREAK:
            case CASE:
            case CATCH:
            case CLASS:
            case CONST:
            case CONTINUE:
            case DEFAULT:
            case DELETE:
            case DO:
            case ELSE:
            case EXTENDS:
            case FALSE:
            case FINALLY:
            case FOR:
            case FUNCTION:
            case IF:
            case IMPLEMENTS:
            case IMPORT:
            case IN:
            case INSTANCEOF:
            case INTERFACE:
            case INTERNAL:
            case IS:
            case NATIVE:
            case NEW:
            case NULL:
            case PACKAGE:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case RETURN:
            case SUPER:
            case SWITCH:
            case THIS:
            case THROW:
            case TO:
            case TRUE:
            case TRY:
            case TYPEOF:
            case USE:
            case VAR:
            case VOID:
            case WHILE:
            case WITH:
            case EACH:
            case GET:
            case SET:
            case NAMESPACE:
            case INCLUDE:
            case DYNAMIC:
            case FINAL:
            case OVERRIDE:
            case STATIC:
            case STAR:
            case XML_AT:
            case IDENTIFIER:
                {
                alt13=1;
                }
                break;
            case LT:
            case XML_COMMENT:
            case XML_CDATA:
            case XML_PI:
                {
                alt13=2;
                }
                break;
            case XML_LS_STD:
                {
                alt13=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;
            }

            switch (alt13) {
                case 1 :
                    // AS3_ex.g3:1346:9: xmlPropertyIdentifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_xmlPropertyIdentifier_in_xmlPrimaryExpression4932);
                    xmlPropertyIdentifier14=xmlPropertyIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlPropertyIdentifier14.getTree());

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:1347:9: xmlInitialiser
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_xmlInitialiser_in_xmlPrimaryExpression4942);
                    xmlInitialiser15=xmlInitialiser();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlInitialiser15.getTree());

                    }
                    break;
                case 3 :
                    // AS3_ex.g3:1348:9: xmlListInitialiser
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_xmlListInitialiser_in_xmlPrimaryExpression4952);
                    xmlListInitialiser16=xmlListInitialiser();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlListInitialiser16.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, xmlPrimaryExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmlPrimaryExpression"

    public static class xmlPropertyIdentifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlPropertyIdentifier"
    // AS3_ex.g3:1361:1: xmlPropertyIdentifier : ( xmlAttributeIdentifier | xmlQualifiedIdentifier | s= STAR );
    public final AS3_exParser.xmlPropertyIdentifier_return xmlPropertyIdentifier() throws RecognitionException {
        AS3_exParser.xmlPropertyIdentifier_return retval = new AS3_exParser.xmlPropertyIdentifier_return();
        retval.start = input.LT(1);
        int xmlPropertyIdentifier_StartIndex = input.index();
        Object root_0 = null;

        Token s=null;
        AS3_exParser.xmlAttributeIdentifier_return xmlAttributeIdentifier17 = null;

        AS3_exParser.xmlQualifiedIdentifier_return xmlQualifiedIdentifier18 = null;


        Object s_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // AS3_ex.g3:1362:7: ( xmlAttributeIdentifier | xmlQualifiedIdentifier | s= STAR )
            int alt14=3;
            switch ( input.LA(1) ) {
            case XML_AT:
                {
                alt14=1;
                }
                break;
            case AS:
            case BREAK:
            case CASE:
            case CATCH:
            case CLASS:
            case CONST:
            case CONTINUE:
            case DEFAULT:
            case DELETE:
            case DO:
            case ELSE:
            case EXTENDS:
            case FALSE:
            case FINALLY:
            case FOR:
            case FUNCTION:
            case IF:
            case IMPLEMENTS:
            case IMPORT:
            case IN:
            case INSTANCEOF:
            case INTERFACE:
            case INTERNAL:
            case IS:
            case NATIVE:
            case NEW:
            case NULL:
            case PACKAGE:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case RETURN:
            case SUPER:
            case SWITCH:
            case THIS:
            case THROW:
            case TO:
            case TRUE:
            case TRY:
            case TYPEOF:
            case USE:
            case VAR:
            case VOID:
            case WHILE:
            case WITH:
            case EACH:
            case GET:
            case SET:
            case NAMESPACE:
            case INCLUDE:
            case DYNAMIC:
            case FINAL:
            case OVERRIDE:
            case STATIC:
            case IDENTIFIER:
                {
                alt14=2;
                }
                break;
            case STAR:
                {
                int LA14_5 = input.LA(2);

                if ( (synpred72_AS3_ex()) ) {
                    alt14=2;
                }
                else if ( (true) ) {
                    alt14=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 14, 5, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;
            }

            switch (alt14) {
                case 1 :
                    // AS3_ex.g3:1362:11: xmlAttributeIdentifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_xmlAttributeIdentifier_in_xmlPropertyIdentifier5045);
                    xmlAttributeIdentifier17=xmlAttributeIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlAttributeIdentifier17.getTree());

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:1363:11: xmlQualifiedIdentifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_xmlQualifiedIdentifier_in_xmlPropertyIdentifier5057);
                    xmlQualifiedIdentifier18=xmlQualifiedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlQualifiedIdentifier18.getTree());

                    }
                    break;
                case 3 :
                    // AS3_ex.g3:1364:11: s= STAR
                    {
                    root_0 = (Object)adaptor.nil();

                    s=(Token)match(input,STAR,FOLLOW_STAR_in_xmlPropertyIdentifier5071); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    s_tree = (Object)adaptor.create(s);
                    adaptor.addChild(root_0, s_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(s);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, xmlPropertyIdentifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmlPropertyIdentifier"

    public static class xmlAttributeIdentifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlAttributeIdentifier"
    // AS3_ex.g3:1367:1: xmlAttributeIdentifier : at= XML_AT ( xmlQualifiedIdentifier | xmlPropertySelector | indexSuffix ) ;
    public final AS3_exParser.xmlAttributeIdentifier_return xmlAttributeIdentifier() throws RecognitionException {
        AS3_exParser.xmlAttributeIdentifier_return retval = new AS3_exParser.xmlAttributeIdentifier_return();
        retval.start = input.LT(1);
        int xmlAttributeIdentifier_StartIndex = input.index();
        Object root_0 = null;

        Token at=null;
        AS3_exParser.xmlQualifiedIdentifier_return xmlQualifiedIdentifier19 = null;

        AS3_exParser.xmlPropertySelector_return xmlPropertySelector20 = null;

        AS3_exParser.indexSuffix_return indexSuffix21 = null;


        Object at_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // AS3_ex.g3:1368:5: (at= XML_AT ( xmlQualifiedIdentifier | xmlPropertySelector | indexSuffix ) )
            // AS3_ex.g3:1368:9: at= XML_AT ( xmlQualifiedIdentifier | xmlPropertySelector | indexSuffix )
            {
            root_0 = (Object)adaptor.nil();

            at=(Token)match(input,XML_AT,FOLLOW_XML_AT_in_xmlAttributeIdentifier5136); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            at_tree = (Object)adaptor.create(at);
            adaptor.addChild(root_0, at_tree);
            }
            if ( state.backtracking==0 ) {
              emit(at);
            }
            // AS3_ex.g3:1369:9: ( xmlQualifiedIdentifier | xmlPropertySelector | indexSuffix )
            int alt15=3;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
                {
                int LA15_1 = input.LA(2);

                if ( (synpred73_AS3_ex()) ) {
                    alt15=1;
                }
                else if ( (synpred74_AS3_ex()) ) {
                    alt15=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 15, 1, input);

                    throw nvae;
                }
                }
                break;
            case AS:
            case BREAK:
            case CASE:
            case CATCH:
            case CLASS:
            case CONST:
            case CONTINUE:
            case DEFAULT:
            case DELETE:
            case DO:
            case ELSE:
            case EXTENDS:
            case FALSE:
            case FINALLY:
            case FOR:
            case FUNCTION:
            case IF:
            case IMPLEMENTS:
            case IMPORT:
            case IN:
            case INSTANCEOF:
            case INTERFACE:
            case INTERNAL:
            case IS:
            case NEW:
            case NULL:
            case PACKAGE:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case RETURN:
            case SUPER:
            case SWITCH:
            case THIS:
            case THROW:
            case TRUE:
            case TRY:
            case TYPEOF:
            case USE:
            case VAR:
            case VOID:
            case WHILE:
            case WITH:
            case INCLUDE:
                {
                int LA15_2 = input.LA(2);

                if ( (synpred73_AS3_ex()) ) {
                    alt15=1;
                }
                else if ( (synpred74_AS3_ex()) ) {
                    alt15=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 15, 2, input);

                    throw nvae;
                }
                }
                break;
            case NATIVE:
            case TO:
            case EACH:
            case GET:
            case SET:
            case NAMESPACE:
            case DYNAMIC:
            case FINAL:
            case OVERRIDE:
            case STATIC:
                {
                int LA15_3 = input.LA(2);

                if ( (synpred73_AS3_ex()) ) {
                    alt15=1;
                }
                else if ( (synpred74_AS3_ex()) ) {
                    alt15=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 15, 3, input);

                    throw nvae;
                }
                }
                break;
            case STAR:
                {
                int LA15_4 = input.LA(2);

                if ( (synpred73_AS3_ex()) ) {
                    alt15=1;
                }
                else if ( (synpred74_AS3_ex()) ) {
                    alt15=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 15, 4, input);

                    throw nvae;
                }
                }
                break;
            case LBRACK:
                {
                alt15=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 15, 0, input);

                throw nvae;
            }

            switch (alt15) {
                case 1 :
                    // AS3_ex.g3:1370:12: xmlQualifiedIdentifier
                    {
                    pushFollow(FOLLOW_xmlQualifiedIdentifier_in_xmlAttributeIdentifier5162);
                    xmlQualifiedIdentifier19=xmlQualifiedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlQualifiedIdentifier19.getTree());

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:1371:14: xmlPropertySelector
                    {
                    pushFollow(FOLLOW_xmlPropertySelector_in_xmlAttributeIdentifier5177);
                    xmlPropertySelector20=xmlPropertySelector();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlPropertySelector20.getTree());

                    }
                    break;
                case 3 :
                    // AS3_ex.g3:1372:14: indexSuffix
                    {
                    pushFollow(FOLLOW_indexSuffix_in_xmlAttributeIdentifier5192);
                    indexSuffix21=indexSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, indexSuffix21.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, xmlAttributeIdentifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmlAttributeIdentifier"

    public static class xmlPropertySelector_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlPropertySelector"
    // AS3_ex.g3:1376:1: xmlPropertySelector : ( xmlNameLiteral | s= STAR );
    public final AS3_exParser.xmlPropertySelector_return xmlPropertySelector() throws RecognitionException {
        AS3_exParser.xmlPropertySelector_return retval = new AS3_exParser.xmlPropertySelector_return();
        retval.start = input.LT(1);
        int xmlPropertySelector_StartIndex = input.index();
        Object root_0 = null;

        Token s=null;
        AS3_exParser.xmlNameLiteral_return xmlNameLiteral22 = null;


        Object s_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // AS3_ex.g3:1377:5: ( xmlNameLiteral | s= STAR )
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( ((LA16_0>=AS && LA16_0<=STATIC)||LA16_0==IDENTIFIER) ) {
                alt16=1;
            }
            else if ( (LA16_0==STAR) ) {
                alt16=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;
            }
            switch (alt16) {
                case 1 :
                    // AS3_ex.g3:1377:9: xmlNameLiteral
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_xmlNameLiteral_in_xmlPropertySelector5282);
                    xmlNameLiteral22=xmlNameLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlNameLiteral22.getTree());

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:1378:9: s= STAR
                    {
                    root_0 = (Object)adaptor.nil();

                    s=(Token)match(input,STAR,FOLLOW_STAR_in_xmlPropertySelector5295); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    s_tree = (Object)adaptor.create(s);
                    adaptor.addChild(root_0, s_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(s);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, xmlPropertySelector_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmlPropertySelector"

    public static class xmlQualifiedIdentifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlQualifiedIdentifier"
    // AS3_ex.g3:1381:1: xmlQualifiedIdentifier : xmlPropertySelector x= XML_NS_OP ( xmlPropertySelector | indexSuffix ) ;
    public final AS3_exParser.xmlQualifiedIdentifier_return xmlQualifiedIdentifier() throws RecognitionException {
        AS3_exParser.xmlQualifiedIdentifier_return retval = new AS3_exParser.xmlQualifiedIdentifier_return();
        retval.start = input.LT(1);
        int xmlQualifiedIdentifier_StartIndex = input.index();
        Object root_0 = null;

        Token x=null;
        AS3_exParser.xmlPropertySelector_return xmlPropertySelector23 = null;

        AS3_exParser.xmlPropertySelector_return xmlPropertySelector24 = null;

        AS3_exParser.indexSuffix_return indexSuffix25 = null;


        Object x_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // AS3_ex.g3:1382:5: ( xmlPropertySelector x= XML_NS_OP ( xmlPropertySelector | indexSuffix ) )
            // AS3_ex.g3:1382:9: xmlPropertySelector x= XML_NS_OP ( xmlPropertySelector | indexSuffix )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_xmlPropertySelector_in_xmlQualifiedIdentifier5316);
            xmlPropertySelector23=xmlPropertySelector();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlPropertySelector23.getTree());
            x=(Token)match(input,XML_NS_OP,FOLLOW_XML_NS_OP_in_xmlQualifiedIdentifier5321); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            x_tree = (Object)adaptor.create(x);
            adaptor.addChild(root_0, x_tree);
            }
            if ( state.backtracking==0 ) {
              wrapEmit(x, ASPrettyPrinter.Break_Other_Connectors_code);
            }
            // AS3_ex.g3:1383:5: ( xmlPropertySelector | indexSuffix )
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( ((LA17_0>=AS && LA17_0<=STATIC)||LA17_0==STAR||LA17_0==IDENTIFIER) ) {
                alt17=1;
            }
            else if ( (LA17_0==LBRACK) ) {
                alt17=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;
            }
            switch (alt17) {
                case 1 :
                    // AS3_ex.g3:1384:9: xmlPropertySelector
                    {
                    pushFollow(FOLLOW_xmlPropertySelector_in_xmlQualifiedIdentifier5356);
                    xmlPropertySelector24=xmlPropertySelector();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlPropertySelector24.getTree());

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:1385:11: indexSuffix
                    {
                    pushFollow(FOLLOW_indexSuffix_in_xmlQualifiedIdentifier5368);
                    indexSuffix25=indexSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, indexSuffix25.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              popIndent();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, xmlQualifiedIdentifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmlQualifiedIdentifier"

    public static class xmlInitialiser_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlInitialiser"
    // AS3_ex.g3:1390:1: xmlInitialiser : ( xmlMarkup | xmlElement );
    public final AS3_exParser.xmlInitialiser_return xmlInitialiser() throws RecognitionException {
        AS3_exParser.xmlInitialiser_return retval = new AS3_exParser.xmlInitialiser_return();
        retval.start = input.LT(1);
        int xmlInitialiser_StartIndex = input.index();
        Object root_0 = null;

        AS3_exParser.xmlMarkup_return xmlMarkup26 = null;

        AS3_exParser.xmlElement_return xmlElement27 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // AS3_ex.g3:1391:5: ( xmlMarkup | xmlElement )
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( ((LA18_0>=XML_COMMENT && LA18_0<=XML_PI)) ) {
                alt18=1;
            }
            else if ( (LA18_0==LT) ) {
                alt18=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);

                throw nvae;
            }
            switch (alt18) {
                case 1 :
                    // AS3_ex.g3:1391:9: xmlMarkup
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_xmlMarkup_in_xmlInitialiser5399);
                    xmlMarkup26=xmlMarkup();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlMarkup26.getTree());

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:1392:9: xmlElement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_xmlElement_in_xmlInitialiser5409);
                    xmlElement27=xmlElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlElement27.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, xmlInitialiser_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmlInitialiser"

    public static class xmlElement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlElement"
    // AS3_ex.g3:1403:1: xmlElement : L= LT xmlTagName ( xmlAttributes )? (x= XML_TEND | G= GT ( xmlElementContent[false] )? x= XML_E_TEND xmlTagName G= GT ) ;
    public final AS3_exParser.xmlElement_return xmlElement() throws RecognitionException {
        AS3_exParser.xmlElement_return retval = new AS3_exParser.xmlElement_return();
        retval.start = input.LT(1);
        int xmlElement_StartIndex = input.index();
        Object root_0 = null;

        Token L=null;
        Token x=null;
        Token G=null;
        AS3_exParser.xmlTagName_return xmlTagName28 = null;

        AS3_exParser.xmlAttributes_return xmlAttributes29 = null;

        AS3_exParser.xmlElementContent_return xmlElementContent30 = null;

        AS3_exParser.xmlTagName_return xmlTagName31 = null;


        Object L_tree=null;
        Object x_tree=null;
        Object G_tree=null;


        	WrapOptions options=mPrinter.getXMLWrapOptions();
        	boolean pushedFormat=false;
        	boolean pushedWrapInfo=false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // AS3_ex.g3:1410:5: (L= LT xmlTagName ( xmlAttributes )? (x= XML_TEND | G= GT ( xmlElementContent[false] )? x= XML_E_TEND xmlTagName G= GT ) )
            // AS3_ex.g3:1411:5: L= LT xmlTagName ( xmlAttributes )? (x= XML_TEND | G= GT ( xmlElementContent[false] )? x= XML_E_TEND xmlTagName G= GT )
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              pushedFormat=pushFormatType(options, true);
            }
            if ( state.backtracking==0 ) {
              pushedWrapInfo=pushWrapInfo(options, true);
            }
            if ( state.backtracking==0 ) {
              emitCRForTag(options);
            }
            L=(Token)match(input,LT,FOLLOW_LT_in_xmlElement5475); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            L_tree = (Object)adaptor.create(L);
            adaptor.addChild(root_0, L_tree);
            }
            if ( state.backtracking==0 ) {
              emit(L);
            }
            if ( state.backtracking==0 ) {
              emitXMLBreak(L, true);
            }
            if ( state.backtracking==0 ) {
              pushIndent(true);
            }
            pushFollow(FOLLOW_xmlTagName_in_xmlElement5481);
            xmlTagName28=xmlTagName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlTagName28.getTree());
            // AS3_ex.g3:1414:77: ( xmlAttributes )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( ((LA19_0>=AS && LA19_0<=STATIC)||LA19_0==LCURLY||LA19_0==IDENTIFIER) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // AS3_ex.g3:0:0: xmlAttributes
                    {
                    pushFollow(FOLLOW_xmlAttributes_in_xmlElement5483);
                    xmlAttributes29=xmlAttributes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlAttributes29.getTree());

                    }
                    break;

            }

            // AS3_ex.g3:1415:5: (x= XML_TEND | G= GT ( xmlElementContent[false] )? x= XML_E_TEND xmlTagName G= GT )
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==XML_TEND) ) {
                alt21=1;
            }
            else if ( (LA21_0==GT) ) {
                alt21=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 21, 0, input);

                throw nvae;
            }
            switch (alt21) {
                case 1 :
                    // AS3_ex.g3:1416:9: x= XML_TEND
                    {
                    x=(Token)match(input,XML_TEND,FOLLOW_XML_TEND_in_xmlElement5503); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    x_tree = (Object)adaptor.create(x);
                    adaptor.addChild(root_0, x_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(x);
                    }
                    if ( state.backtracking==0 ) {
                      emitCRForTag(options);
                    }
                    if ( state.backtracking==0 ) {
                      popIndent();
                    }

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:1422:9: G= GT ( xmlElementContent[false] )? x= XML_E_TEND xmlTagName G= GT
                    {
                    G=(Token)match(input,GT,FOLLOW_GT_in_xmlElement5559); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    G_tree = (Object)adaptor.create(G);
                    adaptor.addChild(root_0, G_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(G);pushXMLTextContentFlag();
                    }
                    // AS3_ex.g3:1422:51: ( xmlElementContent[false] )?
                    int alt20=2;
                    int LA20_0 = input.LA(1);

                    if ( ((LA20_0>=AS && LA20_0<=LTE)||(LA20_0>=EQ && LA20_0<=SHL)||(LA20_0>=AND && LA20_0<=SHL_ASSIGN)||(LA20_0>=LAND_ASSIGN && LA20_0<=XML_ELLIPSIS)||(LA20_0>=XML_NS_OP && LA20_0<=XML_AT)||(LA20_0>=SINGLE_QUOTE_LITERAL && LA20_0<=DOUBLE_QUOTE_LITERAL)||LA20_0==HEX_NUMBER_LITERAL||LA20_0==DEC_NUMBER_LITERAL||LA20_0==IDENTIFIER||(LA20_0>=XML_COMMENT && LA20_0<=XML_TEXT)) ) {
                        alt20=1;
                    }
                    switch (alt20) {
                        case 1 :
                            // AS3_ex.g3:0:0: xmlElementContent[false]
                            {
                            pushFollow(FOLLOW_xmlElementContent_in_xmlElement5563);
                            xmlElementContent30=xmlElementContent(false);

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlElementContent30.getTree());

                            }
                            break;

                    }

                    x=(Token)match(input,XML_E_TEND,FOLLOW_XML_E_TEND_in_xmlElement5578); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    x_tree = (Object)adaptor.create(x);
                    adaptor.addChild(root_0, x_tree);
                    }
                    if ( state.backtracking==0 ) {
                      popIndent();
                    }
                    if ( state.backtracking==0 ) {
                      emit(x);
                    }
                    if ( state.backtracking==0 ) {
                      if (!popXMLTextContentFlag()) emitXMLBreak(x, true);
                    }
                    pushFollow(FOLLOW_xmlTagName_in_xmlElement5593);
                    xmlTagName31=xmlTagName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlTagName31.getTree());
                    G=(Token)match(input,GT,FOLLOW_GT_in_xmlElement5597); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    G_tree = (Object)adaptor.create(G);
                    adaptor.addChild(root_0, G_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(G);
                    }
                    if ( state.backtracking==0 ) {
                      emitCRForTag(options);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              	    if (pushedWrapInfo) mPrinter.popWrapContext();
              	    if (pushedFormat)
              	    	mPrinter.popFormatMode();
                  
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, xmlElement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmlElement"

    public static class xmlAttributes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlAttributes"
    // AS3_ex.g3:1433:1: xmlAttributes : ( xmlAttribute )+ ;
    public final AS3_exParser.xmlAttributes_return xmlAttributes() throws RecognitionException {
        AS3_exParser.xmlAttributes_return retval = new AS3_exParser.xmlAttributes_return();
        retval.start = input.LT(1);
        int xmlAttributes_StartIndex = input.index();
        Object root_0 = null;

        AS3_exParser.xmlAttribute_return xmlAttribute32 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // AS3_ex.g3:1434:5: ( ( xmlAttribute )+ )
            // AS3_ex.g3:1434:9: ( xmlAttribute )+
            {
            root_0 = (Object)adaptor.nil();

            // AS3_ex.g3:1434:9: ( xmlAttribute )+
            int cnt22=0;
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( ((LA22_0>=AS && LA22_0<=STATIC)||LA22_0==LCURLY||LA22_0==IDENTIFIER) ) {
                    alt22=1;
                }


                switch (alt22) {
            	case 1 :
            	    // AS3_ex.g3:0:0: xmlAttribute
            	    {
            	    pushFollow(FOLLOW_xmlAttribute_in_xmlAttributes5636);
            	    xmlAttribute32=xmlAttribute();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlAttribute32.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt22 >= 1 ) break loop22;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(22, input);
                        throw eee;
                }
                cnt22++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, xmlAttributes_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmlAttributes"

    public static class xmlTagName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlTagName"
    // AS3_ex.g3:1437:1: xmlTagName : ( xmlExprEval | xmlNameLiteral );
    public final AS3_exParser.xmlTagName_return xmlTagName() throws RecognitionException {
        AS3_exParser.xmlTagName_return retval = new AS3_exParser.xmlTagName_return();
        retval.start = input.LT(1);
        int xmlTagName_StartIndex = input.index();
        Object root_0 = null;

        AS3_exParser.xmlExprEval_return xmlExprEval33 = null;

        AS3_exParser.xmlNameLiteral_return xmlNameLiteral34 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // AS3_ex.g3:1438:5: ( xmlExprEval | xmlNameLiteral )
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==LCURLY) ) {
                alt23=1;
            }
            else if ( ((LA23_0>=AS && LA23_0<=STATIC)||LA23_0==IDENTIFIER) ) {
                alt23=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 23, 0, input);

                throw nvae;
            }
            switch (alt23) {
                case 1 :
                    // AS3_ex.g3:1438:9: xmlExprEval
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_xmlExprEval_in_xmlTagName5666);
                    xmlExprEval33=xmlExprEval();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlExprEval33.getTree());

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:1439:4: xmlNameLiteral
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_xmlNameLiteral_in_xmlTagName5671);
                    xmlNameLiteral34=xmlNameLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlNameLiteral34.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, xmlTagName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmlTagName"

    public static class xmlAttribute_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlAttribute"
    // AS3_ex.g3:1442:1: xmlAttribute : {...}? xmlTagName A= ASSIGN ( xmlExprEval | stringLiteral ) ;
    public final AS3_exParser.xmlAttribute_return xmlAttribute() throws RecognitionException {
        AS3_exParser.xmlAttribute_return retval = new AS3_exParser.xmlAttribute_return();
        retval.start = input.LT(1);
        int xmlAttribute_StartIndex = input.index();
        Object root_0 = null;

        Token A=null;
        AS3_exParser.xmlTagName_return xmlTagName35 = null;

        AS3_exParser.xmlExprEval_return xmlExprEval36 = null;

        AS3_exParser.stringLiteral_return stringLiteral37 = null;


        Object A_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // AS3_ex.g3:1443:5: ({...}? xmlTagName A= ASSIGN ( xmlExprEval | stringLiteral ) )
            // AS3_ex.g3:1443:8: {...}? xmlTagName A= ASSIGN ( xmlExprEval | stringLiteral )
            {
            root_0 = (Object)adaptor.nil();

            if ( !((promoteWhitespace())) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "xmlAttribute", "promoteWhitespace()");
            }
            if ( state.backtracking==0 ) {
              insertWS(1);
            }
            pushFollow(FOLLOW_xmlTagName_in_xmlAttribute5694);
            xmlTagName35=xmlTagName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlTagName35.getTree());
            A=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_xmlAttribute5698); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            A_tree = (Object)adaptor.create(A);
            adaptor.addChild(root_0, A_tree);
            }
            if ( state.backtracking==0 ) {
              emit(A);
            }
            // AS3_ex.g3:1444:5: ( xmlExprEval | stringLiteral )
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==LCURLY) ) {
                alt24=1;
            }
            else if ( ((LA24_0>=SINGLE_QUOTE_LITERAL && LA24_0<=DOUBLE_QUOTE_LITERAL)) ) {
                alt24=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 24, 0, input);

                throw nvae;
            }
            switch (alt24) {
                case 1 :
                    // AS3_ex.g3:1445:9: xmlExprEval
                    {
                    pushFollow(FOLLOW_xmlExprEval_in_xmlAttribute5717);
                    xmlExprEval36=xmlExprEval();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlExprEval36.getTree());

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:1446:11: stringLiteral
                    {
                    pushFollow(FOLLOW_stringLiteral_in_xmlAttribute5729);
                    stringLiteral37=stringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringLiteral37.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, xmlAttribute_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmlAttribute"

    public static class xmlElementContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlElementContent"
    // AS3_ex.g3:1450:1: xmlElementContent[boolean crAfterTags] : ( xmlElementContentHelper[crAfterTags] )+ ;
    public final AS3_exParser.xmlElementContent_return xmlElementContent(boolean crAfterTags) throws RecognitionException {
        AS3_exParser.xmlElementContent_return retval = new AS3_exParser.xmlElementContent_return();
        retval.start = input.LT(1);
        int xmlElementContent_StartIndex = input.index();
        Object root_0 = null;

        AS3_exParser.xmlElementContentHelper_return xmlElementContentHelper38 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // AS3_ex.g3:1451:5: ( ( xmlElementContentHelper[crAfterTags] )+ )
            // AS3_ex.g3:1451:8: ( xmlElementContentHelper[crAfterTags] )+
            {
            root_0 = (Object)adaptor.nil();

            // AS3_ex.g3:1451:8: ( xmlElementContentHelper[crAfterTags] )+
            int cnt25=0;
            loop25:
            do {
                int alt25=2;
                int LA25_0 = input.LA(1);

                if ( ((LA25_0>=AS && LA25_0<=LTE)||(LA25_0>=EQ && LA25_0<=SHL)||(LA25_0>=AND && LA25_0<=SHL_ASSIGN)||(LA25_0>=LAND_ASSIGN && LA25_0<=XML_ELLIPSIS)||(LA25_0>=XML_NS_OP && LA25_0<=XML_AT)||(LA25_0>=SINGLE_QUOTE_LITERAL && LA25_0<=DOUBLE_QUOTE_LITERAL)||LA25_0==HEX_NUMBER_LITERAL||LA25_0==DEC_NUMBER_LITERAL||LA25_0==IDENTIFIER||(LA25_0>=XML_COMMENT && LA25_0<=XML_TEXT)) ) {
                    alt25=1;
                }


                switch (alt25) {
            	case 1 :
            	    // AS3_ex.g3:0:0: xmlElementContentHelper[crAfterTags]
            	    {
            	    pushFollow(FOLLOW_xmlElementContentHelper_in_xmlElementContent5761);
            	    xmlElementContentHelper38=xmlElementContentHelper(crAfterTags);

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlElementContentHelper38.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt25 >= 1 ) break loop25;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(25, input);
                        throw eee;
                }
                cnt25++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, xmlElementContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmlElementContent"

    public static class xmlElementContentHelper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlElementContentHelper"
    // AS3_ex.g3:1454:1: xmlElementContentHelper[boolean crAfterTags] : ( xmlExprEval | xmlMarkup | xmlElement | xmlText );
    public final AS3_exParser.xmlElementContentHelper_return xmlElementContentHelper(boolean crAfterTags) throws RecognitionException {
        AS3_exParser.xmlElementContentHelper_return retval = new AS3_exParser.xmlElementContentHelper_return();
        retval.start = input.LT(1);
        int xmlElementContentHelper_StartIndex = input.index();
        Object root_0 = null;

        AS3_exParser.xmlExprEval_return xmlExprEval39 = null;

        AS3_exParser.xmlMarkup_return xmlMarkup40 = null;

        AS3_exParser.xmlElement_return xmlElement41 = null;

        AS3_exParser.xmlText_return xmlText42 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // AS3_ex.g3:1455:5: ( xmlExprEval | xmlMarkup | xmlElement | xmlText )
            int alt26=4;
            switch ( input.LA(1) ) {
            case LCURLY:
                {
                alt26=1;
                }
                break;
            case XML_COMMENT:
            case XML_CDATA:
            case XML_PI:
                {
                alt26=2;
                }
                break;
            case LT:
                {
                alt26=3;
                }
                break;
            case AS:
            case BREAK:
            case CASE:
            case CATCH:
            case CLASS:
            case CONST:
            case CONTINUE:
            case DEFAULT:
            case DELETE:
            case DO:
            case ELSE:
            case EXTENDS:
            case FALSE:
            case FINALLY:
            case FOR:
            case FUNCTION:
            case IF:
            case IMPLEMENTS:
            case IMPORT:
            case IN:
            case INSTANCEOF:
            case INTERFACE:
            case INTERNAL:
            case IS:
            case NATIVE:
            case NEW:
            case NULL:
            case PACKAGE:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case RETURN:
            case SUPER:
            case SWITCH:
            case THIS:
            case THROW:
            case TO:
            case TRUE:
            case TRY:
            case TYPEOF:
            case USE:
            case VAR:
            case VOID:
            case WHILE:
            case WITH:
            case EACH:
            case GET:
            case SET:
            case NAMESPACE:
            case INCLUDE:
            case DYNAMIC:
            case FINAL:
            case OVERRIDE:
            case STATIC:
            case SEMI:
            case RCURLY:
            case LPAREN:
            case RPAREN:
            case LBRACK:
            case RBRACK:
            case DOT:
            case COMMA:
            case GT:
            case LTE:
            case EQ:
            case NEQ:
            case SAME:
            case NSAME:
            case PLUS:
            case SUB:
            case STAR:
            case DIV:
            case MOD:
            case INC:
            case DEC:
            case SHL:
            case AND:
            case OR:
            case XOR:
            case NOT:
            case INV:
            case LAND:
            case LOR:
            case QUE:
            case COLON:
            case ASSIGN:
            case DIV_ASSIGN:
            case MOD_ASSIGN:
            case ADD_ASSIGN:
            case SUB_ASSIGN:
            case SHL_ASSIGN:
            case LAND_ASSIGN:
            case LOR_ASSIGN:
            case AND_ASSIGN:
            case XOR_ASSIGN:
            case OR_ASSIGN:
            case ELLIPSIS:
            case XML_ELLIPSIS:
            case XML_NS_OP:
            case XML_AT:
            case SINGLE_QUOTE_LITERAL:
            case DOUBLE_QUOTE_LITERAL:
            case HEX_NUMBER_LITERAL:
            case DEC_NUMBER_LITERAL:
            case IDENTIFIER:
            case XML_TEXT:
                {
                alt26=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 26, 0, input);

                throw nvae;
            }

            switch (alt26) {
                case 1 :
                    // AS3_ex.g3:1455:7: xmlExprEval
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_xmlExprEval_in_xmlElementContentHelper5781);
                    xmlExprEval39=xmlExprEval();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlExprEval39.getTree());
                    if ( state.backtracking==0 ) {
                      if (crAfterTags) insertCR(false);setXMLTextContentFlag();
                    }

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:1456:7: xmlMarkup
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_xmlMarkup_in_xmlElementContentHelper5791);
                    xmlMarkup40=xmlMarkup();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlMarkup40.getTree());
                    if ( state.backtracking==0 ) {
                      if (crAfterTags) insertCR(false);
                    }

                    }
                    break;
                case 3 :
                    // AS3_ex.g3:1457:7: xmlElement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_xmlElement_in_xmlElementContentHelper5801);
                    xmlElement41=xmlElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlElement41.getTree());
                    if ( state.backtracking==0 ) {
                      if (crAfterTags) insertCR(false);
                    }

                    }
                    break;
                case 4 :
                    // AS3_ex.g3:1458:7: xmlText
                    {
                    root_0 = (Object)adaptor.nil();

                    if ( state.backtracking==0 ) {
                      mPrinter.pushFormatMode(ASPrettyPrinter.FORMAT_INDENT);
                    }
                    pushFollow(FOLLOW_xmlText_in_xmlElementContentHelper5812);
                    xmlText42=xmlText();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlText42.getTree());
                    if ( state.backtracking==0 ) {
                      mPrinter.popFormatMode();
                    }
                    if ( state.backtracking==0 ) {
                      if (crAfterTags) insertCR(false);setXMLTextContentFlag();
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, xmlElementContentHelper_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmlElementContentHelper"

    public static class xmlListInitialiser_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlListInitialiser"
    // AS3_ex.g3:1461:1: xmlListInitialiser : x= XML_LS_STD ( xmlElementContent[true] )? x= XML_LS_END ;
    public final AS3_exParser.xmlListInitialiser_return xmlListInitialiser() throws RecognitionException {
        AS3_exParser.xmlListInitialiser_return retval = new AS3_exParser.xmlListInitialiser_return();
        retval.start = input.LT(1);
        int xmlListInitialiser_StartIndex = input.index();
        Object root_0 = null;

        Token x=null;
        AS3_exParser.xmlElementContent_return xmlElementContent43 = null;


        Object x_tree=null;


        	WrapOptions options=mPrinter.getXMLWrapOptions();
        	boolean pushedFormat=false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // AS3_ex.g3:1467:5: (x= XML_LS_STD ( xmlElementContent[true] )? x= XML_LS_END )
            // AS3_ex.g3:1468:3: x= XML_LS_STD ( xmlElementContent[true] )? x= XML_LS_END
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              pushedFormat=pushFormatType(options, true);
            }
            if ( state.backtracking==0 ) {
              insertCR(false);
            }
            x=(Token)match(input,XML_LS_STD,FOLLOW_XML_LS_STD_in_xmlListInitialiser5854); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            x_tree = (Object)adaptor.create(x);
            adaptor.addChild(root_0, x_tree);
            }
            if ( state.backtracking==0 ) {
              emit(x);
            }
            if ( state.backtracking==0 ) {
              insertCR(false);
            }
            if ( state.backtracking==0 ) {
              pushIndent(true);
            }
            // AS3_ex.g3:1471:5: ( xmlElementContent[true] )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( ((LA27_0>=AS && LA27_0<=LTE)||(LA27_0>=EQ && LA27_0<=SHL)||(LA27_0>=AND && LA27_0<=SHL_ASSIGN)||(LA27_0>=LAND_ASSIGN && LA27_0<=XML_ELLIPSIS)||(LA27_0>=XML_NS_OP && LA27_0<=XML_AT)||(LA27_0>=SINGLE_QUOTE_LITERAL && LA27_0<=DOUBLE_QUOTE_LITERAL)||LA27_0==HEX_NUMBER_LITERAL||LA27_0==DEC_NUMBER_LITERAL||LA27_0==IDENTIFIER||(LA27_0>=XML_COMMENT && LA27_0<=XML_TEXT)) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // AS3_ex.g3:0:0: xmlElementContent[true]
                    {
                    pushFollow(FOLLOW_xmlElementContent_in_xmlListInitialiser5869);
                    xmlElementContent43=xmlElementContent(true);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlElementContent43.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              insertCR(false);
            }
            x=(Token)match(input,XML_LS_END,FOLLOW_XML_LS_END_in_xmlListInitialiser5882); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            x_tree = (Object)adaptor.create(x);
            adaptor.addChild(root_0, x_tree);
            }
            if ( state.backtracking==0 ) {
              popIndent();
            }
            if ( state.backtracking==0 ) {
              emit(x);
            }
            if ( state.backtracking==0 ) {
              insertCR(false);
            }
            if ( state.backtracking==0 ) {

              		    if (pushedFormat)
              		    	mPrinter.popFormatMode();
              	    
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, xmlListInitialiser_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmlListInitialiser"

    public static class semic_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "semic"
    // AS3_ex.g3:1480:1: semic : (S= SEMI | E= EOF | R= RCURLY );
    public final AS3_exParser.semic_return semic() throws RecognitionException {
        AS3_exParser.semic_return retval = new AS3_exParser.semic_return();
        retval.start = input.LT(1);
        int semic_StartIndex = input.index();
        Object root_0 = null;

        Token S=null;
        Token E=null;
        Token R=null;

        Object S_tree=null;
        Object E_tree=null;
        Object R_tree=null;


            // Mark current position so we can unconsume a RBRACE.
            int marker = input.mark();
            // Promote EOL if appropriate
            boolean onBrace=false;
            if (retval.start.getText()!=null && retval.start.getText().equals("}"))
            {
            	onBrace=true;
        		if (state.backtracking>0)
        		{
        			retval.stop=retval.start;
        		    return retval; //we don't want to consume the '}' during the prediction phase
        		}    	
            }
            	
            if (findVirtualHiddenToken(retval))
            {
               retval.stop=retval.start;
               return retval;
            }
               
         //   promoteEOL(retval);

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // AS3_ex.g3:1505:5: (S= SEMI | E= EOF | R= RCURLY )
            int alt28=3;
            switch ( input.LA(1) ) {
            case SEMI:
                {
                alt28=1;
                }
                break;
            case EOF:
                {
                alt28=2;
                }
                break;
            case RCURLY:
                {
                alt28=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 28, 0, input);

                throw nvae;
            }

            switch (alt28) {
                case 1 :
                    // AS3_ex.g3:1505:9: S= SEMI
                    {
                    root_0 = (Object)adaptor.nil();

                    S=(Token)match(input,SEMI,FOLLOW_SEMI_in_semic5920); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    S_tree = (Object)adaptor.create(S);
                    adaptor.addChild(root_0, S_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(S);
                    }

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:1506:9: E= EOF
                    {
                    root_0 = (Object)adaptor.nil();

                    E=(Token)match(input,EOF,FOLLOW_EOF_in_semic5934); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    E_tree = (Object)adaptor.create(E);
                    adaptor.addChild(root_0, E_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(E);
                    }

                    }
                    break;
                case 3 :
                    // AS3_ex.g3:1507:9: R= RCURLY
                    {
                    root_0 = (Object)adaptor.nil();

                    R=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_semic5948); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    R_tree = (Object)adaptor.create(R);
                    adaptor.addChild(root_0, R_tree);
                    }
                    if ( state.backtracking==0 ) {
                       input.rewind(marker); 
                                          if (onBrace)
                                          {
                                               retval.start=input.LT(-1);
                                               retval.stop=retval.start;
                                               retval.tree=null;
                                               return retval;
                                          }
                                       
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, semic_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "semic"

    public static class fileContents_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fileContents"
    // AS3_ex.g3:1521:1: fileContents : ( ( ( packageDeclaration )? ( packageElement )* ) | EOF );
    public final AS3_exParser.fileContents_return fileContents() throws RecognitionException {
        AS3_exParser.fileContents_return retval = new AS3_exParser.fileContents_return();
        retval.start = input.LT(1);
        int fileContents_StartIndex = input.index();
        Object root_0 = null;

        Token EOF46=null;
        AS3_exParser.packageDeclaration_return packageDeclaration44 = null;

        AS3_exParser.packageElement_return packageElement45 = null;


        Object EOF46_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // AS3_ex.g3:1522:2: ( ( ( packageDeclaration )? ( packageElement )* ) | EOF )
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( ((LA31_0>=AS && LA31_0<=LCURLY)||LA31_0==LPAREN||LA31_0==LBRACK||LA31_0==LT||(LA31_0>=PLUS && LA31_0<=STAR)||(LA31_0>=INC && LA31_0<=DEC)||(LA31_0>=NOT && LA31_0<=INV)||(LA31_0>=XML_AT && LA31_0<=XML_LS_STD)||(LA31_0>=SINGLE_QUOTE_LITERAL && LA31_0<=DOUBLE_QUOTE_LITERAL)||LA31_0==REGULAR_EXPR_LITERAL||LA31_0==HEX_NUMBER_LITERAL||LA31_0==DEC_NUMBER_LITERAL||LA31_0==IDENTIFIER||(LA31_0>=XML_COMMENT && LA31_0<=XML_PI)) ) {
                alt31=1;
            }
            else if ( (LA31_0==EOF) ) {
                int LA31_2 = input.LA(2);

                if ( (LA31_2==EOF) ) {
                    alt31=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 31, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;
            }
            switch (alt31) {
                case 1 :
                    // AS3_ex.g3:1522:4: ( ( packageDeclaration )? ( packageElement )* )
                    {
                    root_0 = (Object)adaptor.nil();

                    // AS3_ex.g3:1522:4: ( ( packageDeclaration )? ( packageElement )* )
                    // AS3_ex.g3:1522:5: ( packageDeclaration )? ( packageElement )*
                    {
                    // AS3_ex.g3:1522:5: ( packageDeclaration )?
                    int alt29=2;
                    int LA29_0 = input.LA(1);

                    if ( (LA29_0==PACKAGE) ) {
                        int LA29_1 = input.LA(2);

                        if ( (LA29_1==DEFAULT||LA29_1==INTERNAL||LA29_1==NATIVE||LA29_1==TO||LA29_1==VOID||(LA29_1>=EACH && LA29_1<=NAMESPACE)||(LA29_1>=DYNAMIC && LA29_1<=STATIC)||LA29_1==LCURLY||LA29_1==STAR||LA29_1==IDENTIFIER) ) {
                            alt29=1;
                        }
                    }
                    switch (alt29) {
                        case 1 :
                            // AS3_ex.g3:0:0: packageDeclaration
                            {
                            pushFollow(FOLLOW_packageDeclaration_in_fileContents5968);
                            packageDeclaration44=packageDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, packageDeclaration44.getTree());

                            }
                            break;

                    }

                    // AS3_ex.g3:1522:25: ( packageElement )*
                    loop30:
                    do {
                        int alt30=2;
                        int LA30_0 = input.LA(1);

                        if ( ((LA30_0>=AS && LA30_0<=LCURLY)||LA30_0==LPAREN||LA30_0==LBRACK||LA30_0==LT||(LA30_0>=PLUS && LA30_0<=STAR)||(LA30_0>=INC && LA30_0<=DEC)||(LA30_0>=NOT && LA30_0<=INV)||(LA30_0>=XML_AT && LA30_0<=XML_LS_STD)||(LA30_0>=SINGLE_QUOTE_LITERAL && LA30_0<=DOUBLE_QUOTE_LITERAL)||LA30_0==REGULAR_EXPR_LITERAL||LA30_0==HEX_NUMBER_LITERAL||LA30_0==DEC_NUMBER_LITERAL||LA30_0==IDENTIFIER||(LA30_0>=XML_COMMENT && LA30_0<=XML_PI)) ) {
                            alt30=1;
                        }


                        switch (alt30) {
                    	case 1 :
                    	    // AS3_ex.g3:0:0: packageElement
                    	    {
                    	    pushFollow(FOLLOW_packageElement_in_fileContents5971);
                    	    packageElement45=packageElement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, packageElement45.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop30;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 2 :
                    // AS3_ex.g3:1522:44: EOF
                    {
                    root_0 = (Object)adaptor.nil();

                    EOF46=(Token)match(input,EOF,FOLLOW_EOF_in_fileContents5977); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EOF46_tree = (Object)adaptor.create(EOF46);
                    adaptor.addChild(root_0, EOF46_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, fileContents_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fileContents"

    public static class packageDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "packageDeclaration"
    // AS3_ex.g3:1527:1: packageDeclaration : p= PACKAGE ( type )? l= LCURLY ( packageElement )* r= RCURLY ;
    public final AS3_exParser.packageDeclaration_return packageDeclaration() throws RecognitionException {
        AS3_exParser.packageDeclaration_return retval = new AS3_exParser.packageDeclaration_return();
        retval.start = input.LT(1);
        int packageDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token p=null;
        Token l=null;
        Token r=null;
        AS3_exParser.type_return type47 = null;

        AS3_exParser.packageElement_return packageElement48 = null;


        Object p_tree=null;
        Object l_tree=null;
        Object r_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // AS3_ex.g3:1528:2: (p= PACKAGE ( type )? l= LCURLY ( packageElement )* r= RCURLY )
            // AS3_ex.g3:1528:6: p= PACKAGE ( type )? l= LCURLY ( packageElement )* r= RCURLY
            {
            root_0 = (Object)adaptor.nil();

            p=(Token)match(input,PACKAGE,FOLLOW_PACKAGE_in_packageDeclaration5994); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            p_tree = (Object)adaptor.create(p);
            adaptor.addChild(root_0, p_tree);
            }
            if ( state.backtracking==0 ) {
              isSeenPackage=true;{insertCR(false);}emit(p);pushExpressionIndent();
            }
            // AS3_ex.g3:1528:88: ( type )?
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==DEFAULT||LA32_0==INTERNAL||LA32_0==NATIVE||LA32_0==TO||LA32_0==VOID||(LA32_0>=EACH && LA32_0<=NAMESPACE)||(LA32_0>=DYNAMIC && LA32_0<=STATIC)||LA32_0==STAR||LA32_0==IDENTIFIER) ) {
                alt32=1;
            }
            switch (alt32) {
                case 1 :
                    // AS3_ex.g3:1528:89: type
                    {
                    if ( state.backtracking==0 ) {
                      insertWS(1);
                    }
                    pushFollow(FOLLOW_type_in_packageDeclaration6001);
                    type47=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type47.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              popIndent();
            }
            l=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_packageDeclaration6015); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            l_tree = (Object)adaptor.create(l);
            adaptor.addChild(root_0, l_tree);
            }
            if ( state.backtracking==0 ) {

              	  	   mCodeBlockStack.add(ASPrettyPrinter.BraceContext_package_code);
              	       leftCurlyNewlineHandler(false);
              	       emit(l);
              	       {mPrinter.addDeclEqualsBlock();}
              	       if (mPrinter.isIndentAtPackageLevel())
              	          pushIndent(true);
              	       mCodeBlockStack.add(ASPrettyPrinter.BraceContext_block_code);
              	    
            }
            // AS3_ex.g3:1539:6: ( packageElement )*
            loop33:
            do {
                int alt33=2;
                int LA33_0 = input.LA(1);

                if ( ((LA33_0>=AS && LA33_0<=LCURLY)||LA33_0==LPAREN||LA33_0==LBRACK||LA33_0==LT||(LA33_0>=PLUS && LA33_0<=STAR)||(LA33_0>=INC && LA33_0<=DEC)||(LA33_0>=NOT && LA33_0<=INV)||(LA33_0>=XML_AT && LA33_0<=XML_LS_STD)||(LA33_0>=SINGLE_QUOTE_LITERAL && LA33_0<=DOUBLE_QUOTE_LITERAL)||LA33_0==REGULAR_EXPR_LITERAL||LA33_0==HEX_NUMBER_LITERAL||LA33_0==DEC_NUMBER_LITERAL||LA33_0==IDENTIFIER||(LA33_0>=XML_COMMENT && LA33_0<=XML_PI)) ) {
                    alt33=1;
                }


                switch (alt33) {
            	case 1 :
            	    // AS3_ex.g3:0:0: packageElement
            	    {
            	    pushFollow(FOLLOW_packageElement_in_packageDeclaration6031);
            	    packageElement48=packageElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, packageElement48.getTree());

            	    }
            	    break;

            	default :
            	    break loop33;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              	    	if (mPrinter.isIndentAtPackageLevel())
              	            popIndent();
              	    
            }
            if ( state.backtracking==0 ) {
              mPrinter.popDeclEqualsBlock();
            }
            r=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_packageDeclaration6057); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            r_tree = (Object)adaptor.create(r);
            adaptor.addChild(root_0, r_tree);
            }
            if ( state.backtracking==0 ) {
              insertCR(false);emit(r);popBlockStack();popBlockStack();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, packageDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "packageDeclaration"

    public static class mxmlEmbedded_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mxmlEmbedded"
    // AS3_ex.g3:1551:1: mxmlEmbedded : ( conditionalCompilerOption l= LCURLY mxmlEmbedded r= RCURLY | propertyDeclaration | functionDeclaration | statement | directive | interfaceFunctionDeclaration )* ( EOF )? ;
    public final AS3_exParser.mxmlEmbedded_return mxmlEmbedded() throws RecognitionException {
        AS3_exParser.mxmlEmbedded_return retval = new AS3_exParser.mxmlEmbedded_return();
        retval.start = input.LT(1);
        int mxmlEmbedded_StartIndex = input.index();
        Object root_0 = null;

        Token l=null;
        Token r=null;
        Token EOF56=null;
        AS3_exParser.conditionalCompilerOption_return conditionalCompilerOption49 = null;

        AS3_exParser.mxmlEmbedded_return mxmlEmbedded50 = null;

        AS3_exParser.propertyDeclaration_return propertyDeclaration51 = null;

        AS3_exParser.functionDeclaration_return functionDeclaration52 = null;

        AS3_exParser.statement_return statement53 = null;

        AS3_exParser.directive_return directive54 = null;

        AS3_exParser.interfaceFunctionDeclaration_return interfaceFunctionDeclaration55 = null;


        Object l_tree=null;
        Object r_tree=null;
        Object EOF56_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // AS3_ex.g3:1552:2: ( ( conditionalCompilerOption l= LCURLY mxmlEmbedded r= RCURLY | propertyDeclaration | functionDeclaration | statement | directive | interfaceFunctionDeclaration )* ( EOF )? )
            // AS3_ex.g3:1553:3: ( conditionalCompilerOption l= LCURLY mxmlEmbedded r= RCURLY | propertyDeclaration | functionDeclaration | statement | directive | interfaceFunctionDeclaration )* ( EOF )?
            {
            root_0 = (Object)adaptor.nil();

            // AS3_ex.g3:1553:3: ( conditionalCompilerOption l= LCURLY mxmlEmbedded r= RCURLY | propertyDeclaration | functionDeclaration | statement | directive | interfaceFunctionDeclaration )*
            loop34:
            do {
                int alt34=7;
                alt34 = dfa34.predict(input);
                switch (alt34) {
            	case 1 :
            	    // AS3_ex.g3:1553:4: conditionalCompilerOption l= LCURLY mxmlEmbedded r= RCURLY
            	    {
            	    if ( state.backtracking==0 ) {
            	      insertCR(false);
            	    }
            	    pushFollow(FOLLOW_conditionalCompilerOption_in_mxmlEmbedded6081);
            	    conditionalCompilerOption49=conditionalCompilerOption();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalCompilerOption49.getTree());
            	    l=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_mxmlEmbedded6089); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    l_tree = (Object)adaptor.create(l);
            	    adaptor.addChild(root_0, l_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	       
            	      				mCodeBlockStack.add(ASPrettyPrinter.BraceContext_Conditional_code);
            	      				leftCurlyNewlineHandler(false);
            	      	    		emit(l);pushIndent(true);
            	      	    		mCodeBlockStack.add(ASPrettyPrinter.BraceContext_block_code);
            	      	    	
            	    }
            	    pushFollow(FOLLOW_mxmlEmbedded_in_mxmlEmbedded6099);
            	    mxmlEmbedded50=mxmlEmbedded();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mxmlEmbedded50.getTree());
            	    if ( state.backtracking==0 ) {
            	      popIndent();
            	    }
            	    r=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_mxmlEmbedded6108); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    r_tree = (Object)adaptor.create(r);
            	    adaptor.addChild(root_0, r_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      insertCR(false);emit(r);popBlockStack();popBlockStack();
            	    }

            	    }
            	    break;
            	case 2 :
            	    // AS3_ex.g3:1563:9: propertyDeclaration
            	    {
            	    pushFollow(FOLLOW_propertyDeclaration_in_mxmlEmbedded6121);
            	    propertyDeclaration51=propertyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyDeclaration51.getTree());

            	    }
            	    break;
            	case 3 :
            	    // AS3_ex.g3:1563:31: functionDeclaration
            	    {
            	    pushFollow(FOLLOW_functionDeclaration_in_mxmlEmbedded6125);
            	    functionDeclaration52=functionDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, functionDeclaration52.getTree());

            	    }
            	    break;
            	case 4 :
            	    // AS3_ex.g3:1563:53: statement
            	    {
            	    pushFollow(FOLLOW_statement_in_mxmlEmbedded6129);
            	    statement53=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement53.getTree());

            	    }
            	    break;
            	case 5 :
            	    // AS3_ex.g3:1563:65: directive
            	    {
            	    pushFollow(FOLLOW_directive_in_mxmlEmbedded6133);
            	    directive54=directive();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, directive54.getTree());

            	    }
            	    break;
            	case 6 :
            	    // AS3_ex.g3:1563:77: interfaceFunctionDeclaration
            	    {
            	    pushFollow(FOLLOW_interfaceFunctionDeclaration_in_mxmlEmbedded6137);
            	    interfaceFunctionDeclaration55=interfaceFunctionDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceFunctionDeclaration55.getTree());

            	    }
            	    break;

            	default :
            	    break loop34;
                }
            } while (true);

            // AS3_ex.g3:1565:6: ( EOF )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==EOF) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // AS3_ex.g3:0:0: EOF
                    {
                    EOF56=(Token)match(input,EOF,FOLLOW_EOF_in_mxmlEmbedded6154); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EOF56_tree = (Object)adaptor.create(EOF56);
                    adaptor.addChild(root_0, EOF56_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, mxmlEmbedded_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mxmlEmbedded"

    public static class packageElement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "packageElement"
    // AS3_ex.g3:1568:1: packageElement : ( conditionalCompilerOption l= LCURLY ( packageElement )* r= RCURLY | classOrInterfaceDecl | propertyDeclaration | functionDeclaration | interfaceFunctionDeclaration | statement | directive );
    public final AS3_exParser.packageElement_return packageElement() throws RecognitionException {
        AS3_exParser.packageElement_return retval = new AS3_exParser.packageElement_return();
        retval.start = input.LT(1);
        int packageElement_StartIndex = input.index();
        Object root_0 = null;

        Token l=null;
        Token r=null;
        AS3_exParser.conditionalCompilerOption_return conditionalCompilerOption57 = null;

        AS3_exParser.packageElement_return packageElement58 = null;

        AS3_exParser.classOrInterfaceDecl_return classOrInterfaceDecl59 = null;

        AS3_exParser.propertyDeclaration_return propertyDeclaration60 = null;

        AS3_exParser.functionDeclaration_return functionDeclaration61 = null;

        AS3_exParser.interfaceFunctionDeclaration_return interfaceFunctionDeclaration62 = null;

        AS3_exParser.statement_return statement63 = null;

        AS3_exParser.directive_return directive64 = null;


        Object l_tree=null;
        Object r_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // AS3_ex.g3:1569:5: ( conditionalCompilerOption l= LCURLY ( packageElement )* r= RCURLY | classOrInterfaceDecl | propertyDeclaration | functionDeclaration | interfaceFunctionDeclaration | statement | directive )
            int alt37=7;
            alt37 = dfa37.predict(input);
            switch (alt37) {
                case 1 :
                    // AS3_ex.g3:1570:6: conditionalCompilerOption l= LCURLY ( packageElement )* r= RCURLY
                    {
                    root_0 = (Object)adaptor.nil();

                    if ( state.backtracking==0 ) {
                      insertCR(false);
                    }
                    pushFollow(FOLLOW_conditionalCompilerOption_in_packageElement6180);
                    conditionalCompilerOption57=conditionalCompilerOption();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalCompilerOption57.getTree());
                    l=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_packageElement6188); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    l_tree = (Object)adaptor.create(l);
                    adaptor.addChild(root_0, l_tree);
                    }
                    if ( state.backtracking==0 ) {
                       
                      				mCodeBlockStack.add(ASPrettyPrinter.BraceContext_Conditional_code);
                      				leftCurlyNewlineHandler(false);
                      	    		emit(l);pushIndent(true);
                      	    		{mPrinter.addDeclEqualsBlock();}
                      	    		mCodeBlockStack.add(ASPrettyPrinter.BraceContext_block_code);
                      	    	
                    }
                    // AS3_ex.g3:1579:4: ( packageElement )*
                    loop36:
                    do {
                        int alt36=2;
                        int LA36_0 = input.LA(1);

                        if ( ((LA36_0>=AS && LA36_0<=LCURLY)||LA36_0==LPAREN||LA36_0==LBRACK||LA36_0==LT||(LA36_0>=PLUS && LA36_0<=STAR)||(LA36_0>=INC && LA36_0<=DEC)||(LA36_0>=NOT && LA36_0<=INV)||(LA36_0>=XML_AT && LA36_0<=XML_LS_STD)||(LA36_0>=SINGLE_QUOTE_LITERAL && LA36_0<=DOUBLE_QUOTE_LITERAL)||LA36_0==REGULAR_EXPR_LITERAL||LA36_0==HEX_NUMBER_LITERAL||LA36_0==DEC_NUMBER_LITERAL||LA36_0==IDENTIFIER||(LA36_0>=XML_COMMENT && LA36_0<=XML_PI)) ) {
                            alt36=1;
                        }


                        switch (alt36) {
                    	case 1 :
                    	    // AS3_ex.g3:0:0: packageElement
                    	    {
                    	    pushFollow(FOLLOW_packageElement_in_packageElement6198);
                    	    packageElement58=packageElement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, packageElement58.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop36;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {
                      mPrinter.popDeclEqualsBlock();
                    }
                    if ( state.backtracking==0 ) {
                      popIndent();
                    }
                    r=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_packageElement6213); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    r_tree = (Object)adaptor.create(r);
                    adaptor.addChild(root_0, r_tree);
                    }
                    if ( state.backtracking==0 ) {
                      insertCR(false);emit(r);popBlockStack();popBlockStack();
                    }

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:1582:8: classOrInterfaceDecl
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classOrInterfaceDecl_in_packageElement6228);
                    classOrInterfaceDecl59=classOrInterfaceDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classOrInterfaceDecl59.getTree());

                    }
                    break;
                case 3 :
                    // AS3_ex.g3:1582:31: propertyDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_propertyDeclaration_in_packageElement6232);
                    propertyDeclaration60=propertyDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyDeclaration60.getTree());

                    }
                    break;
                case 4 :
                    // AS3_ex.g3:1582:53: functionDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_functionDeclaration_in_packageElement6236);
                    functionDeclaration61=functionDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, functionDeclaration61.getTree());

                    }
                    break;
                case 5 :
                    // AS3_ex.g3:1582:75: interfaceFunctionDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceFunctionDeclaration_in_packageElement6240);
                    interfaceFunctionDeclaration62=interfaceFunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceFunctionDeclaration62.getTree());

                    }
                    break;
                case 6 :
                    // AS3_ex.g3:1582:106: statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_statement_in_packageElement6244);
                    statement63=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement63.getTree());

                    }
                    break;
                case 7 :
                    // AS3_ex.g3:1582:118: directive
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_directive_in_packageElement6248);
                    directive64=directive();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, directive64.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, packageElement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "packageElement"

    public static class importDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importDeclaration"
    // AS3_ex.g3:1585:1: importDeclaration : i= IMPORT type (D= DOT S= STAR )? semic ;
    public final AS3_exParser.importDeclaration_return importDeclaration() throws RecognitionException {
        AS3_exParser.importDeclaration_return retval = new AS3_exParser.importDeclaration_return();
        retval.start = input.LT(1);
        int importDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token i=null;
        Token D=null;
        Token S=null;
        AS3_exParser.type_return type65 = null;

        AS3_exParser.semic_return semic66 = null;


        Object i_tree=null;
        Object D_tree=null;
        Object S_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // AS3_ex.g3:1586:2: (i= IMPORT type (D= DOT S= STAR )? semic )
            // AS3_ex.g3:1587:2: i= IMPORT type (D= DOT S= STAR )? semic
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              mPrinter.markDeclEqualsContextChange();
            }
            if ( state.backtracking==0 ) {
              insertCR(false);addBlankLinesBeforeFirstImport();
            }
            i=(Token)match(input,IMPORT,FOLLOW_IMPORT_in_importDeclaration6273); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            i_tree = (Object)adaptor.create(i);
            adaptor.addChild(root_0, i_tree);
            }
            if ( state.backtracking==0 ) {
              emit(i);
            }
            pushFollow(FOLLOW_type_in_importDeclaration6277);
            type65=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type65.getTree());
            // AS3_ex.g3:1588:80: (D= DOT S= STAR )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==DOT) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // AS3_ex.g3:1588:81: D= DOT S= STAR
                    {
                    D=(Token)match(input,DOT,FOLLOW_DOT_in_importDeclaration6282); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    D_tree = (Object)adaptor.create(D);
                    adaptor.addChild(root_0, D_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(D);
                    }
                    S=(Token)match(input,STAR,FOLLOW_STAR_in_importDeclaration6288); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    S_tree = (Object)adaptor.create(S);
                    adaptor.addChild(root_0, S_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(S);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_semic_in_importDeclaration6294);
            semic66=semic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, semic66.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, importDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "importDeclaration"

    public static class classOrInterfaceDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classOrInterfaceDecl"
    // AS3_ex.g3:1591:1: classOrInterfaceDecl : ( conditionalDirAndBindingDecls )? ( memberModifiers )? ( interfaceDeclaration | classDeclaration ) ;
    public final AS3_exParser.classOrInterfaceDecl_return classOrInterfaceDecl() throws RecognitionException {
        AS3_exParser.classOrInterfaceDecl_return retval = new AS3_exParser.classOrInterfaceDecl_return();
        retval.start = input.LT(1);
        int classOrInterfaceDecl_StartIndex = input.index();
        Object root_0 = null;

        AS3_exParser.conditionalDirAndBindingDecls_return conditionalDirAndBindingDecls67 = null;

        AS3_exParser.memberModifiers_return memberModifiers68 = null;

        AS3_exParser.interfaceDeclaration_return interfaceDeclaration69 = null;

        AS3_exParser.classDeclaration_return classDeclaration70 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // AS3_ex.g3:1592:2: ( ( conditionalDirAndBindingDecls )? ( memberModifiers )? ( interfaceDeclaration | classDeclaration ) )
            // AS3_ex.g3:1592:6: ( conditionalDirAndBindingDecls )? ( memberModifiers )? ( interfaceDeclaration | classDeclaration )
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              mPrinter.setBindingContext(ASPrettyPrinter.BindingContext_Class);
            }
            // AS3_ex.g3:1592:74: ( conditionalDirAndBindingDecls )?
            int alt39=2;
            switch ( input.LA(1) ) {
                case IDENTIFIER:
                    {
                    int LA39_1 = input.LA(2);

                    if ( (LA39_1==XML_NS_OP) ) {
                        alt39=1;
                    }
                    }
                    break;
                case NATIVE:
                case DYNAMIC:
                case FINAL:
                case OVERRIDE:
                case STATIC:
                    {
                    int LA39_2 = input.LA(2);

                    if ( (LA39_2==XML_NS_OP) ) {
                        alt39=1;
                    }
                    }
                    break;
                case TO:
                case EACH:
                case GET:
                case SET:
                case NAMESPACE:
                    {
                    alt39=1;
                    }
                    break;
            }

            switch (alt39) {
                case 1 :
                    // AS3_ex.g3:1592:75: conditionalDirAndBindingDecls
                    {
                    pushFollow(FOLLOW_conditionalDirAndBindingDecls_in_classOrInterfaceDecl6311);
                    conditionalDirAndBindingDecls67=conditionalDirAndBindingDecls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalDirAndBindingDecls67.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              pushLazyIndent();
            }
            if ( state.backtracking==0 ) {
              insertCR(false);
            }
            if ( state.backtracking==0 ) {
              insertLines(mPrinter.getBlankLinesBeforeClass(), false);isFirstClassSeen=true;
            }
            // AS3_ex.g3:1592:225: ( memberModifiers )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==INTERNAL||LA40_0==NATIVE||(LA40_0>=PRIVATE && LA40_0<=PUBLIC)||(LA40_0>=DYNAMIC && LA40_0<=STATIC)||LA40_0==IDENTIFIER) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // AS3_ex.g3:0:0: memberModifiers
                    {
                    pushFollow(FOLLOW_memberModifiers_in_classOrInterfaceDecl6319);
                    memberModifiers68=memberModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, memberModifiers68.getTree());

                    }
                    break;

            }

            // AS3_ex.g3:1592:242: ( interfaceDeclaration | classDeclaration )
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==INTERFACE) ) {
                alt41=1;
            }
            else if ( (LA41_0==CLASS) ) {
                alt41=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 41, 0, input);

                throw nvae;
            }
            switch (alt41) {
                case 1 :
                    // AS3_ex.g3:1592:243: interfaceDeclaration
                    {
                    pushFollow(FOLLOW_interfaceDeclaration_in_classOrInterfaceDecl6323);
                    interfaceDeclaration69=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceDeclaration69.getTree());

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:1592:266: classDeclaration
                    {
                    pushFollow(FOLLOW_classDeclaration_in_classOrInterfaceDecl6327);
                    classDeclaration70=classDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classDeclaration70.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, classOrInterfaceDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classOrInterfaceDecl"

    public static class directive_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "directive"
    // AS3_ex.g3:1595:1: directive : ( bindingDecl | includeDirective | useNamespaceDirective | importDeclaration | defaultXMLNamespaceDirective ) ;
    public final AS3_exParser.directive_return directive() throws RecognitionException {
        AS3_exParser.directive_return retval = new AS3_exParser.directive_return();
        retval.start = input.LT(1);
        int directive_StartIndex = input.index();
        Object root_0 = null;

        AS3_exParser.bindingDecl_return bindingDecl71 = null;

        AS3_exParser.includeDirective_return includeDirective72 = null;

        AS3_exParser.useNamespaceDirective_return useNamespaceDirective73 = null;

        AS3_exParser.importDeclaration_return importDeclaration74 = null;

        AS3_exParser.defaultXMLNamespaceDirective_return defaultXMLNamespaceDirective75 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // AS3_ex.g3:1596:2: ( ( bindingDecl | includeDirective | useNamespaceDirective | importDeclaration | defaultXMLNamespaceDirective ) )
            // AS3_ex.g3:1597:2: ( bindingDecl | includeDirective | useNamespaceDirective | importDeclaration | defaultXMLNamespaceDirective )
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              pushLazyIndent();
            }
            if ( state.backtracking==0 ) {
              insertCR(false);
            }
            // AS3_ex.g3:1597:39: ( bindingDecl | includeDirective | useNamespaceDirective | importDeclaration | defaultXMLNamespaceDirective )
            int alt42=5;
            switch ( input.LA(1) ) {
            case LBRACK:
                {
                alt42=1;
                }
                break;
            case INCLUDE:
                {
                alt42=2;
                }
                break;
            case USE:
                {
                alt42=3;
                }
                break;
            case IMPORT:
                {
                alt42=4;
                }
                break;
            case DEFAULT:
                {
                alt42=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 42, 0, input);

                throw nvae;
            }

            switch (alt42) {
                case 1 :
                    // AS3_ex.g3:1597:40: bindingDecl
                    {
                    pushFollow(FOLLOW_bindingDecl_in_directive6344);
                    bindingDecl71=bindingDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bindingDecl71.getTree());

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:1597:54: includeDirective
                    {
                    pushFollow(FOLLOW_includeDirective_in_directive6348);
                    includeDirective72=includeDirective();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, includeDirective72.getTree());

                    }
                    break;
                case 3 :
                    // AS3_ex.g3:1597:73: useNamespaceDirective
                    {
                    pushFollow(FOLLOW_useNamespaceDirective_in_directive6352);
                    useNamespaceDirective73=useNamespaceDirective();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, useNamespaceDirective73.getTree());

                    }
                    break;
                case 4 :
                    // AS3_ex.g3:1597:97: importDeclaration
                    {
                    pushFollow(FOLLOW_importDeclaration_in_directive6356);
                    importDeclaration74=importDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, importDeclaration74.getTree());

                    }
                    break;
                case 5 :
                    // AS3_ex.g3:1597:142: defaultXMLNamespaceDirective
                    {
                    pushFollow(FOLLOW_defaultXMLNamespaceDirective_in_directive6362);
                    defaultXMLNamespaceDirective75=defaultXMLNamespaceDirective();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, defaultXMLNamespaceDirective75.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              popIndent();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, directive_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "directive"

    public static class conditionalDirAndBindingDecls_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalDirAndBindingDecls"
    // AS3_ex.g3:1600:1: conditionalDirAndBindingDecls : conditionalCompilerOption ( bindingDecl )* ;
    public final AS3_exParser.conditionalDirAndBindingDecls_return conditionalDirAndBindingDecls() throws RecognitionException {
        AS3_exParser.conditionalDirAndBindingDecls_return retval = new AS3_exParser.conditionalDirAndBindingDecls_return();
        retval.start = input.LT(1);
        int conditionalDirAndBindingDecls_StartIndex = input.index();
        Object root_0 = null;

        AS3_exParser.conditionalCompilerOption_return conditionalCompilerOption76 = null;

        AS3_exParser.bindingDecl_return bindingDecl77 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // AS3_ex.g3:1601:2: ( conditionalCompilerOption ( bindingDecl )* )
            // AS3_ex.g3:1601:4: conditionalCompilerOption ( bindingDecl )*
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              insertCR(false);
            }
            if ( state.backtracking==0 ) {
              mPrinter.markBindablePos(true);
            }
            pushFollow(FOLLOW_conditionalCompilerOption_in_conditionalDirAndBindingDecls6388);
            conditionalCompilerOption76=conditionalCompilerOption();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalCompilerOption76.getTree());
            if ( state.backtracking==0 ) {
              mPrinter.setBindableMode();
            }
            // AS3_ex.g3:1605:4: ( bindingDecl )*
            loop43:
            do {
                int alt43=2;
                int LA43_0 = input.LA(1);

                if ( (LA43_0==LBRACK) ) {
                    alt43=1;
                }


                switch (alt43) {
            	case 1 :
            	    // AS3_ex.g3:1605:5: bindingDecl
            	    {
            	    if ( state.backtracking==0 ) {
            	      insertCR(false);
            	    }
            	    pushFollow(FOLLOW_bindingDecl_in_conditionalDirAndBindingDecls6405);
            	    bindingDecl77=bindingDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bindingDecl77.getTree());

            	    }
            	    break;

            	default :
            	    break loop43;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, conditionalDirAndBindingDecls_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalDirAndBindingDecls"

    public static class xmlKeyword_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlKeyword"
    // AS3_ex.g3:1608:1: xmlKeyword : {...}?I= IDENTIFIER ;
    public final AS3_exParser.xmlKeyword_return xmlKeyword() throws RecognitionException {
        AS3_exParser.xmlKeyword_return retval = new AS3_exParser.xmlKeyword_return();
        retval.start = input.LT(1);
        int xmlKeyword_StartIndex = input.index();
        Object root_0 = null;

        Token I=null;

        Object I_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // AS3_ex.g3:1609:2: ({...}?I= IDENTIFIER )
            // AS3_ex.g3:1609:4: {...}?I= IDENTIFIER
            {
            root_0 = (Object)adaptor.nil();

            if ( !((input.LT(1).getText().equalsIgnoreCase("xml"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "xmlKeyword", "input.LT(1).getText().equalsIgnoreCase(\"xml\")");
            }
            I=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_xmlKeyword6423); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            I_tree = (Object)adaptor.create(I);
            adaptor.addChild(root_0, I_tree);
            }
            if ( state.backtracking==0 ) {
              emit(I);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, xmlKeyword_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "xmlKeyword"

    public static class conditionalCompilerOption_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalCompilerOption"
    // AS3_ex.g3:1612:1: conditionalCompilerOption : identifierLiteral x= XML_NS_OP identifierLiteral ;
    public final AS3_exParser.conditionalCompilerOption_return conditionalCompilerOption() throws RecognitionException {
        AS3_exParser.conditionalCompilerOption_return retval = new AS3_exParser.conditionalCompilerOption_return();
        retval.start = input.LT(1);
        int conditionalCompilerOption_StartIndex = input.index();
        Object root_0 = null;

        Token x=null;
        AS3_exParser.identifierLiteral_return identifierLiteral78 = null;

        AS3_exParser.identifierLiteral_return identifierLiteral79 = null;


        Object x_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // AS3_ex.g3:1613:2: ( identifierLiteral x= XML_NS_OP identifierLiteral )
            // AS3_ex.g3:1614:2: identifierLiteral x= XML_NS_OP identifierLiteral
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifierLiteral_in_conditionalCompilerOption6439);
            identifierLiteral78=identifierLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierLiteral78.getTree());
            x=(Token)match(input,XML_NS_OP,FOLLOW_XML_NS_OP_in_conditionalCompilerOption6443); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            x_tree = (Object)adaptor.create(x);
            adaptor.addChild(root_0, x_tree);
            }
            if ( state.backtracking==0 ) {
              emit(x);
            }
            pushFollow(FOLLOW_identifierLiteral_in_conditionalCompilerOption6447);
            identifierLiteral79=identifierLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierLiteral79.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, conditionalCompilerOption_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalCompilerOption"

    public static class defaultXMLNamespaceDirective_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "defaultXMLNamespaceDirective"
    // AS3_ex.g3:1617:1: defaultXMLNamespaceDirective : D= DEFAULT xmlKeyword N= NAMESPACE A= ASSIGN assignmentExpression semic ;
    public final AS3_exParser.defaultXMLNamespaceDirective_return defaultXMLNamespaceDirective() throws RecognitionException {
        AS3_exParser.defaultXMLNamespaceDirective_return retval = new AS3_exParser.defaultXMLNamespaceDirective_return();
        retval.start = input.LT(1);
        int defaultXMLNamespaceDirective_StartIndex = input.index();
        Object root_0 = null;

        Token D=null;
        Token N=null;
        Token A=null;
        AS3_exParser.xmlKeyword_return xmlKeyword80 = null;

        AS3_exParser.assignmentExpression_return assignmentExpression81 = null;

        AS3_exParser.semic_return semic82 = null;


        Object D_tree=null;
        Object N_tree=null;
        Object A_tree=null;


        	boolean pushedFormat=false;
            WrapOptions options=mPrinter.getExpressionWrapOptions();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // AS3_ex.g3:1623:2: (D= DEFAULT xmlKeyword N= NAMESPACE A= ASSIGN assignmentExpression semic )
            // AS3_ex.g3:1624:2: D= DEFAULT xmlKeyword N= NAMESPACE A= ASSIGN assignmentExpression semic
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              mPrinter.markDeclEqualsContextChange();
            }
            if ( state.backtracking==0 ) {
              pushedFormat=pushFormatType(options, true);
            }
            D=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_defaultXMLNamespaceDirective6474); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            D_tree = (Object)adaptor.create(D);
            adaptor.addChild(root_0, D_tree);
            }
            if ( state.backtracking==0 ) {
              emit(D);
            }
            pushFollow(FOLLOW_xmlKeyword_in_defaultXMLNamespaceDirective6478);
            xmlKeyword80=xmlKeyword();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlKeyword80.getTree());
            N=(Token)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_defaultXMLNamespaceDirective6486); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            N_tree = (Object)adaptor.create(N);
            adaptor.addChild(root_0, N_tree);
            }
            if ( state.backtracking==0 ) {
              emit(N);
            }
            A=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_defaultXMLNamespaceDirective6494); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            A_tree = (Object)adaptor.create(A);
            adaptor.addChild(root_0, A_tree);
            }
            if ( state.backtracking==0 ) {
              insertWS(mPrinter.getSpacesAroundAssignment());emit(A);insertWS(mPrinter.getSpacesAroundAssignment());
            }
            pushFollow(FOLLOW_assignmentExpression_in_defaultXMLNamespaceDirective6498);
            assignmentExpression81=assignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentExpression81.getTree());
            pushFollow(FOLLOW_semic_in_defaultXMLNamespaceDirective6500);
            semic82=semic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, semic82.getTree());
            if ( state.backtracking==0 ) {

                 	    if (pushedFormat)
                 	    {
                 	    	mPrinter.popFormatMode();
                 	    }
              	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, defaultXMLNamespaceDirective_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "defaultXMLNamespaceDirective"

    public static class bindingDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bindingDecl"
    // AS3_ex.g3:1638:1: bindingDecl : L= LBRACK (XA= XML_AT )? I= IDENTIFIER (L= LPAREN ( bindingDeclArg (C= COMMA bindingDeclArg )* )? R= RPAREN )? R= RBRACK (s= SEMI )? ;
    public final AS3_exParser.bindingDecl_return bindingDecl() throws RecognitionException {
        AS3_exParser.bindingDecl_return retval = new AS3_exParser.bindingDecl_return();
        retval.start = input.LT(1);
        int bindingDecl_StartIndex = input.index();
        Object root_0 = null;

        Token L=null;
        Token XA=null;
        Token I=null;
        Token C=null;
        Token R=null;
        Token s=null;
        AS3_exParser.bindingDeclArg_return bindingDeclArg83 = null;

        AS3_exParser.bindingDeclArg_return bindingDeclArg84 = null;


        Object L_tree=null;
        Object XA_tree=null;
        Object I_tree=null;
        Object C_tree=null;
        Object R_tree=null;
        Object s_tree=null;

        boolean bindable=false;
         boolean pushedIndent=false;
        	boolean pushedFormat=false;
        	boolean pushedWrapInfo=false;
         WrapOptions options=mPrinter.getExpressionWrapOptions();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // AS3_ex.g3:1646:2: (L= LBRACK (XA= XML_AT )? I= IDENTIFIER (L= LPAREN ( bindingDeclArg (C= COMMA bindingDeclArg )* )? R= RPAREN )? R= RBRACK (s= SEMI )? )
            // AS3_ex.g3:1647:6: L= LBRACK (XA= XML_AT )? I= IDENTIFIER (L= LPAREN ( bindingDeclArg (C= COMMA bindingDeclArg )* )? R= RPAREN )? R= RBRACK (s= SEMI )?
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              pushedFormat=pushFormatType(options, true);
                  	 pushedWrapInfo=pushWrapInfo(options, true);
                  	
            }
            L=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_bindingDecl6535); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            L_tree = (Object)adaptor.create(L);
            adaptor.addChild(root_0, L_tree);
            }
            // AS3_ex.g3:1651:5: (XA= XML_AT )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==XML_AT) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // AS3_ex.g3:1651:6: XA= XML_AT
                    {
                    XA=(Token)match(input,XML_AT,FOLLOW_XML_AT_in_bindingDecl6546); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    XA_tree = (Object)adaptor.create(XA);
                    adaptor.addChild(root_0, XA_tree);
                    }

                    }
                    break;

            }

            I=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_bindingDecl6552); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            I_tree = (Object)adaptor.create(I);
            adaptor.addChild(root_0, I_tree);
            }
            if ( state.backtracking==0 ) {

              		  		bindable=mPrinter.isDirectiveForNextElement(I.getText());
              		  		if (bindable)
              		  			mPrinter.markBindablePos(false); //call this to mark position *before* we send any of the tokens to the printer
              		  		emit(L); 
            }
            if ( state.backtracking==0 ) {
              if (XA!=null)
              		  		    emit(XA); 
              		  		emit(I);
              		  		mPrinter.setLastBindableTagName(I.getText());
              		  	
            }
            // AS3_ex.g3:1662:3: (L= LPAREN ( bindingDeclArg (C= COMMA bindingDeclArg )* )? R= RPAREN )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==LPAREN) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // AS3_ex.g3:1662:4: L= LPAREN ( bindingDeclArg (C= COMMA bindingDeclArg )* )? R= RPAREN
                    {
                    L=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_bindingDecl6576); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_tree = (Object)adaptor.create(L);
                    adaptor.addChild(root_0, L_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(L);insertWS(mPrinter.getAdvancedSpacesInsideParensInArgumentLists());
                    }
                    // AS3_ex.g3:1663:8: ( bindingDeclArg (C= COMMA bindingDeclArg )* )?
                    int alt46=2;
                    int LA46_0 = input.LA(1);

                    if ( ((LA46_0>=AS && LA46_0<=STATIC)||(LA46_0>=PLUS && LA46_0<=STAR)||LA46_0==XML_AT||(LA46_0>=SINGLE_QUOTE_LITERAL && LA46_0<=DOUBLE_QUOTE_LITERAL)||LA46_0==HEX_NUMBER_LITERAL||LA46_0==DEC_NUMBER_LITERAL||LA46_0==IDENTIFIER) ) {
                        alt46=1;
                    }
                    switch (alt46) {
                        case 1 :
                            // AS3_ex.g3:1663:9: bindingDeclArg (C= COMMA bindingDeclArg )*
                            {
                            pushFollow(FOLLOW_bindingDeclArg_in_bindingDecl6588);
                            bindingDeclArg83=bindingDeclArg();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, bindingDeclArg83.getTree());
                            // AS3_ex.g3:1663:24: (C= COMMA bindingDeclArg )*
                            loop45:
                            do {
                                int alt45=2;
                                int LA45_0 = input.LA(1);

                                if ( (LA45_0==COMMA) ) {
                                    alt45=1;
                                }


                                switch (alt45) {
                            	case 1 :
                            	    // AS3_ex.g3:1663:25: C= COMMA bindingDeclArg
                            	    {
                            	    C=(Token)match(input,COMMA,FOLLOW_COMMA_in_bindingDecl6593); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	    C_tree = (Object)adaptor.create(C);
                            	    adaptor.addChild(root_0, C_tree);
                            	    }
                            	    if ( state.backtracking==0 ) {
                            	      pushedIndent=emitCommaWithSpacingAndCRs(options, C, pushedIndent, -1, ASPrettyPrinter.Break_SubType_Other);
                            	    }
                            	    pushFollow(FOLLOW_bindingDeclArg_in_bindingDecl6597);
                            	    bindingDeclArg84=bindingDeclArg();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bindingDeclArg84.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop45;
                                }
                            } while (true);


                            }
                            break;

                    }

                    R=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_bindingDecl6608); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    R_tree = (Object)adaptor.create(R);
                    adaptor.addChild(root_0, R_tree);
                    }
                    if ( state.backtracking==0 ) {
                      insertWS(mPrinter.getAdvancedSpacesInsideParensInArgumentLists());emit(R);
                    }

                    }
                    break;

            }

            R=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_bindingDecl6629); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            R_tree = (Object)adaptor.create(R);
            adaptor.addChild(root_0, R_tree);
            }
            if ( state.backtracking==0 ) {
              emit(R);
            }
            // AS3_ex.g3:1666:25: (s= SEMI )?
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==SEMI) ) {
                int LA48_1 = input.LA(2);

                if ( (synpred123_AS3_ex()) ) {
                    alt48=1;
                }
            }
            switch (alt48) {
                case 1 :
                    // AS3_ex.g3:1666:26: s= SEMI
                    {
                    s=(Token)match(input,SEMI,FOLLOW_SEMI_in_bindingDecl6635); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    s_tree = (Object)adaptor.create(s);
                    adaptor.addChild(root_0, s_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(s);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

                      	if (pushedWrapInfo)
                      		mPrinter.popWrapContext();
              	        if (pushedIndent)
                  	    	popIndent();
                  	    if (pushedFormat)
                  	    {
                  	    	mPrinter.popFormatMode();
                  	    }
              	   	if (bindable)
              	   	{
              	   		mPrinter.setBindableMode();
              	   	}
              	   
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, bindingDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bindingDecl"

    public static class includeDirective_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "includeDirective"
    // AS3_ex.g3:1683:1: includeDirective : I= INCLUDE stringLiteral semic ;
    public final AS3_exParser.includeDirective_return includeDirective() throws RecognitionException {
        AS3_exParser.includeDirective_return retval = new AS3_exParser.includeDirective_return();
        retval.start = input.LT(1);
        int includeDirective_StartIndex = input.index();
        Object root_0 = null;

        Token I=null;
        AS3_exParser.stringLiteral_return stringLiteral85 = null;

        AS3_exParser.semic_return semic86 = null;


        Object I_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // AS3_ex.g3:1684:2: (I= INCLUDE stringLiteral semic )
            // AS3_ex.g3:1685:2: I= INCLUDE stringLiteral semic
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              mPrinter.markDeclEqualsContextChange();
            }
            I=(Token)match(input,INCLUDE,FOLLOW_INCLUDE_in_includeDirective6665); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            I_tree = (Object)adaptor.create(I);
            adaptor.addChild(root_0, I_tree);
            }
            if ( state.backtracking==0 ) {
              emit(I);
            }
            pushFollow(FOLLOW_stringLiteral_in_includeDirective6668);
            stringLiteral85=stringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, stringLiteral85.getTree());
            pushFollow(FOLLOW_semic_in_includeDirective6670);
            semic86=semic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, semic86.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, includeDirective_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "includeDirective"

    public static class bindingDeclArg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bindingDeclArg"
    // AS3_ex.g3:1689:1: bindingDeclArg : ( eitherIdentifier E= ASSIGN )? ( stringLiteral | (P= PLUS | S= SUB )? numericLiteral | ( eitherIdentifier (D= DOT eitherIdentifier )* ) ) ;
    public final AS3_exParser.bindingDeclArg_return bindingDeclArg() throws RecognitionException {
        AS3_exParser.bindingDeclArg_return retval = new AS3_exParser.bindingDeclArg_return();
        retval.start = input.LT(1);
        int bindingDeclArg_StartIndex = input.index();
        Object root_0 = null;

        Token E=null;
        Token P=null;
        Token S=null;
        Token D=null;
        AS3_exParser.eitherIdentifier_return eitherIdentifier87 = null;

        AS3_exParser.stringLiteral_return stringLiteral88 = null;

        AS3_exParser.numericLiteral_return numericLiteral89 = null;

        AS3_exParser.eitherIdentifier_return eitherIdentifier90 = null;

        AS3_exParser.eitherIdentifier_return eitherIdentifier91 = null;


        Object E_tree=null;
        Object P_tree=null;
        Object S_tree=null;
        Object D_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // AS3_ex.g3:1690:2: ( ( eitherIdentifier E= ASSIGN )? ( stringLiteral | (P= PLUS | S= SUB )? numericLiteral | ( eitherIdentifier (D= DOT eitherIdentifier )* ) ) )
            // AS3_ex.g3:1697:5: ( eitherIdentifier E= ASSIGN )? ( stringLiteral | (P= PLUS | S= SUB )? numericLiteral | ( eitherIdentifier (D= DOT eitherIdentifier )* ) )
            {
            root_0 = (Object)adaptor.nil();

            // AS3_ex.g3:1697:5: ( eitherIdentifier E= ASSIGN )?
            int alt49=2;
            alt49 = dfa49.predict(input);
            switch (alt49) {
                case 1 :
                    // AS3_ex.g3:1697:6: eitherIdentifier E= ASSIGN
                    {
                    pushFollow(FOLLOW_eitherIdentifier_in_bindingDeclArg6699);
                    eitherIdentifier87=eitherIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eitherIdentifier87.getTree());
                    E=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_bindingDeclArg6703); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    E_tree = (Object)adaptor.create(E);
                    adaptor.addChild(root_0, E_tree);
                    }
                    if ( state.backtracking==0 ) {
                      insertWS(mPrinter.getAdvancedSpacesAroundAssignmentInMetatags()); emit(E); insertWS(mPrinter.getAdvancedSpacesAroundAssignmentInMetatags());
                    }

                    }
                    break;

            }

            // AS3_ex.g3:1698:2: ( stringLiteral | (P= PLUS | S= SUB )? numericLiteral | ( eitherIdentifier (D= DOT eitherIdentifier )* ) )
            int alt52=3;
            switch ( input.LA(1) ) {
            case SINGLE_QUOTE_LITERAL:
            case DOUBLE_QUOTE_LITERAL:
                {
                alt52=1;
                }
                break;
            case PLUS:
            case SUB:
            case HEX_NUMBER_LITERAL:
            case DEC_NUMBER_LITERAL:
                {
                alt52=2;
                }
                break;
            case AS:
            case BREAK:
            case CASE:
            case CATCH:
            case CLASS:
            case CONST:
            case CONTINUE:
            case DEFAULT:
            case DELETE:
            case DO:
            case ELSE:
            case EXTENDS:
            case FALSE:
            case FINALLY:
            case FOR:
            case FUNCTION:
            case IF:
            case IMPLEMENTS:
            case IMPORT:
            case IN:
            case INSTANCEOF:
            case INTERFACE:
            case INTERNAL:
            case IS:
            case NATIVE:
            case NEW:
            case NULL:
            case PACKAGE:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case RETURN:
            case SUPER:
            case SWITCH:
            case THIS:
            case THROW:
            case TO:
            case TRUE:
            case TRY:
            case TYPEOF:
            case USE:
            case VAR:
            case VOID:
            case WHILE:
            case WITH:
            case EACH:
            case GET:
            case SET:
            case NAMESPACE:
            case INCLUDE:
            case DYNAMIC:
            case FINAL:
            case OVERRIDE:
            case STATIC:
            case STAR:
            case XML_AT:
            case IDENTIFIER:
                {
                alt52=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 52, 0, input);

                throw nvae;
            }

            switch (alt52) {
                case 1 :
                    // AS3_ex.g3:1699:3: stringLiteral
                    {
                    pushFollow(FOLLOW_stringLiteral_in_bindingDeclArg6716);
                    stringLiteral88=stringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringLiteral88.getTree());

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:1699:19: (P= PLUS | S= SUB )? numericLiteral
                    {
                    // AS3_ex.g3:1699:19: (P= PLUS | S= SUB )?
                    int alt50=3;
                    int LA50_0 = input.LA(1);

                    if ( (LA50_0==PLUS) ) {
                        alt50=1;
                    }
                    else if ( (LA50_0==SUB) ) {
                        alt50=2;
                    }
                    switch (alt50) {
                        case 1 :
                            // AS3_ex.g3:1699:20: P= PLUS
                            {
                            P=(Token)match(input,PLUS,FOLLOW_PLUS_in_bindingDeclArg6723); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            P_tree = (Object)adaptor.create(P);
                            adaptor.addChild(root_0, P_tree);
                            }
                            if ( state.backtracking==0 ) {
                              emit(P);
                            }

                            }
                            break;
                        case 2 :
                            // AS3_ex.g3:1699:41: S= SUB
                            {
                            S=(Token)match(input,SUB,FOLLOW_SUB_in_bindingDeclArg6731); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            S_tree = (Object)adaptor.create(S);
                            adaptor.addChild(root_0, S_tree);
                            }
                            if ( state.backtracking==0 ) {
                              emit(S);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_numericLiteral_in_bindingDeclArg6738);
                    numericLiteral89=numericLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericLiteral89.getTree());

                    }
                    break;
                case 3 :
                    // AS3_ex.g3:1699:79: ( eitherIdentifier (D= DOT eitherIdentifier )* )
                    {
                    // AS3_ex.g3:1699:79: ( eitherIdentifier (D= DOT eitherIdentifier )* )
                    // AS3_ex.g3:1699:80: eitherIdentifier (D= DOT eitherIdentifier )*
                    {
                    pushFollow(FOLLOW_eitherIdentifier_in_bindingDeclArg6743);
                    eitherIdentifier90=eitherIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eitherIdentifier90.getTree());
                    // AS3_ex.g3:1699:97: (D= DOT eitherIdentifier )*
                    loop51:
                    do {
                        int alt51=2;
                        int LA51_0 = input.LA(1);

                        if ( (LA51_0==DOT) ) {
                            alt51=1;
                        }


                        switch (alt51) {
                    	case 1 :
                    	    // AS3_ex.g3:1699:98: D= DOT eitherIdentifier
                    	    {
                    	    D=(Token)match(input,DOT,FOLLOW_DOT_in_bindingDeclArg6748); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    D_tree = (Object)adaptor.create(D);
                    	    adaptor.addChild(root_0, D_tree);
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      emit(D);
                    	    }
                    	    pushFollow(FOLLOW_eitherIdentifier_in_bindingDeclArg6752);
                    	    eitherIdentifier91=eitherIdentifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, eitherIdentifier91.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop51;
                        }
                    } while (true);


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, bindingDeclArg_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bindingDeclArg"

    public static class interfaceDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceDeclaration"
    // AS3_ex.g3:1706:1: interfaceDeclaration : i= INTERFACE type (e= EXTENDS typeList )? interfaceBody ;
    public final AS3_exParser.interfaceDeclaration_return interfaceDeclaration() throws RecognitionException {
        AS3_exParser.interfaceDeclaration_return retval = new AS3_exParser.interfaceDeclaration_return();
        retval.start = input.LT(1);
        int interfaceDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token i=null;
        Token e=null;
        AS3_exParser.type_return type92 = null;

        AS3_exParser.typeList_return typeList93 = null;

        AS3_exParser.interfaceBody_return interfaceBody94 = null;


        Object i_tree=null;
        Object e_tree=null;


            WrapOptions options=mPrinter.getExpressionWrapOptions();
            boolean pushedWrapInfo=false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // AS3_ex.g3:1711:2: (i= INTERFACE type (e= EXTENDS typeList )? interfaceBody )
            // AS3_ex.g3:1712:6: i= INTERFACE type (e= EXTENDS typeList )? interfaceBody
            {
            root_0 = (Object)adaptor.nil();

            i=(Token)match(input,INTERFACE,FOLLOW_INTERFACE_in_interfaceDeclaration6789); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            i_tree = (Object)adaptor.create(i);
            adaptor.addChild(root_0, i_tree);
            }
            if ( state.backtracking==0 ) {
              emit(i);
            }
            pushFollow(FOLLOW_type_in_interfaceDeclaration6793);
            type92=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type92.getTree());
            // AS3_ex.g3:1713:3: (e= EXTENDS typeList )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==EXTENDS) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // AS3_ex.g3:1713:4: e= EXTENDS typeList
                    {
                    e=(Token)match(input,EXTENDS,FOLLOW_EXTENDS_in_interfaceDeclaration6801); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    e_tree = (Object)adaptor.create(e);
                    adaptor.addChild(root_0, e_tree);
                    }
                    if ( state.backtracking==0 ) {
                      pushedWrapInfo=pushWrapInfo(options, true);
                    }
                    if ( state.backtracking==0 ) {
                      wrapEmit(e, ASPrettyPrinter.Break_Keyword_code);
                    }
                    pushFollow(FOLLOW_typeList_in_interfaceDeclaration6815);
                    typeList93=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeList93.getTree());
                    if ( state.backtracking==0 ) {
                      if (pushedWrapInfo) mPrinter.popWrapContext();
                    }
                    if ( state.backtracking==0 ) {
                      popIndent();
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              popIndent();
            }
            pushFollow(FOLLOW_interfaceBody_in_interfaceDeclaration6842);
            interfaceBody94=interfaceBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceBody94.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, interfaceDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceDeclaration"

    public static class interfaceBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceBody"
    // AS3_ex.g3:1722:1: interfaceBody : l= LCURLY ( interfaceElement )* r= RCURLY ;
    public final AS3_exParser.interfaceBody_return interfaceBody() throws RecognitionException {
        AS3_exParser.interfaceBody_return retval = new AS3_exParser.interfaceBody_return();
        retval.start = input.LT(1);
        int interfaceBody_StartIndex = input.index();
        Object root_0 = null;

        Token l=null;
        Token r=null;
        AS3_exParser.interfaceElement_return interfaceElement95 = null;


        Object l_tree=null;
        Object r_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // AS3_ex.g3:1723:2: (l= LCURLY ( interfaceElement )* r= RCURLY )
            // AS3_ex.g3:1723:6: l= LCURLY ( interfaceElement )* r= RCURLY
            {
            root_0 = (Object)adaptor.nil();

            l=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_interfaceBody6858); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            l_tree = (Object)adaptor.create(l);
            adaptor.addChild(root_0, l_tree);
            }
            if ( state.backtracking==0 ) {

              	    	mCodeBlockStack.add(ASPrettyPrinter.BraceContext_interface_code);
              	    	leftCurlyNewlineHandler(false);
              	    	emit(l);pushIndent(true);
              	    	{mPrinter.addDeclEqualsBlock();}
              	    	mCodeBlockStack.add(ASPrettyPrinter.BraceContext_block_code);
              	    
            }
            // AS3_ex.g3:1731:6: ( interfaceElement )*
            loop54:
            do {
                int alt54=2;
                int LA54_0 = input.LA(1);

                if ( ((LA54_0>=AS && LA54_0<=LCURLY)||LA54_0==LPAREN||LA54_0==LBRACK||LA54_0==LT||(LA54_0>=PLUS && LA54_0<=STAR)||(LA54_0>=INC && LA54_0<=DEC)||(LA54_0>=NOT && LA54_0<=INV)||(LA54_0>=XML_AT && LA54_0<=XML_LS_STD)||(LA54_0>=SINGLE_QUOTE_LITERAL && LA54_0<=DOUBLE_QUOTE_LITERAL)||LA54_0==REGULAR_EXPR_LITERAL||LA54_0==HEX_NUMBER_LITERAL||LA54_0==DEC_NUMBER_LITERAL||LA54_0==IDENTIFIER||(LA54_0>=XML_COMMENT && LA54_0<=XML_PI)) ) {
                    alt54=1;
                }


                switch (alt54) {
            	case 1 :
            	    // AS3_ex.g3:0:0: interfaceElement
            	    {
            	    pushFollow(FOLLOW_interfaceElement_in_interfaceBody6874);
            	    interfaceElement95=interfaceElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceElement95.getTree());

            	    }
            	    break;

            	default :
            	    break loop54;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              popIndent();
            }
            if ( state.backtracking==0 ) {
              mPrinter.popDeclEqualsBlock();
            }
            r=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_interfaceBody6900); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            r_tree = (Object)adaptor.create(r);
            adaptor.addChild(root_0, r_tree);
            }
            if ( state.backtracking==0 ) {
              insertCR(false);emit(r);popBlockStack();popBlockStack();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, interfaceBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceBody"

    public static class classDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classDeclaration"
    // AS3_ex.g3:1737:1: classDeclaration : c= CLASS type (E= EXTENDS type )? (I= IMPLEMENTS typeList )? classBody ;
    public final AS3_exParser.classDeclaration_return classDeclaration() throws RecognitionException {
        AS3_exParser.classDeclaration_return retval = new AS3_exParser.classDeclaration_return();
        retval.start = input.LT(1);
        int classDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token c=null;
        Token E=null;
        Token I=null;
        AS3_exParser.type_return type96 = null;

        AS3_exParser.type_return type97 = null;

        AS3_exParser.typeList_return typeList98 = null;

        AS3_exParser.classBody_return classBody99 = null;


        Object c_tree=null;
        Object E_tree=null;
        Object I_tree=null;


            WrapOptions options=mPrinter.getExpressionWrapOptions();
            boolean pushedWrapInfo=false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // AS3_ex.g3:1742:2: (c= CLASS type (E= EXTENDS type )? (I= IMPLEMENTS typeList )? classBody )
            // AS3_ex.g3:1743:6: c= CLASS type (E= EXTENDS type )? (I= IMPLEMENTS typeList )? classBody
            {
            root_0 = (Object)adaptor.nil();

            c=(Token)match(input,CLASS,FOLLOW_CLASS_in_classDeclaration6927); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            c_tree = (Object)adaptor.create(c);
            adaptor.addChild(root_0, c_tree);
            }
            if ( state.backtracking==0 ) {
              emit(c);
            }
            pushFollow(FOLLOW_type_in_classDeclaration6931);
            type96=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type96.getTree());
            // AS3_ex.g3:1744:3: (E= EXTENDS type )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==EXTENDS) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // AS3_ex.g3:1744:5: E= EXTENDS type
                    {
                    E=(Token)match(input,EXTENDS,FOLLOW_EXTENDS_in_classDeclaration6940); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    E_tree = (Object)adaptor.create(E);
                    adaptor.addChild(root_0, E_tree);
                    }
                    if ( state.backtracking==0 ) {
                      pushedWrapInfo=pushWrapInfo(options, true);
                    }
                    if ( state.backtracking==0 ) {
                      wrapEmit(E, ASPrettyPrinter.Break_Keyword_code);
                    }
                    pushFollow(FOLLOW_type_in_classDeclaration6952);
                    type97=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type97.getTree());
                    if ( state.backtracking==0 ) {
                      if (pushedWrapInfo) mPrinter.popWrapContext();
                    }
                    if ( state.backtracking==0 ) {
                      popIndent();
                    }

                    }
                    break;

            }

            // AS3_ex.g3:1749:3: (I= IMPLEMENTS typeList )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==IMPLEMENTS) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // AS3_ex.g3:1749:5: I= IMPLEMENTS typeList
                    {
                    I=(Token)match(input,IMPLEMENTS,FOLLOW_IMPLEMENTS_in_classDeclaration6972); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    I_tree = (Object)adaptor.create(I);
                    adaptor.addChild(root_0, I_tree);
                    }
                    if ( state.backtracking==0 ) {
                      pushedWrapInfo=pushWrapInfo(options, true);
                    }
                    if ( state.backtracking==0 ) {
                      wrapEmit(I, ASPrettyPrinter.Break_Keyword_code);
                    }
                    pushFollow(FOLLOW_typeList_in_classDeclaration6986);
                    typeList98=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeList98.getTree());
                    if ( state.backtracking==0 ) {
                      if (pushedWrapInfo) mPrinter.popWrapContext();
                    }
                    if ( state.backtracking==0 ) {
                      popIndent();
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              popIndent();
            }
            pushFollow(FOLLOW_classBody_in_classDeclaration7012);
            classBody99=classBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classBody99.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, classDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classDeclaration"

    public static class classBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classBody"
    // AS3_ex.g3:1760:1: classBody : L= LCURLY ( classBodyElement )* R= RCURLY ;
    public final AS3_exParser.classBody_return classBody() throws RecognitionException {
        AS3_exParser.classBody_return retval = new AS3_exParser.classBody_return();
        retval.start = input.LT(1);
        int classBody_StartIndex = input.index();
        Object root_0 = null;

        Token L=null;
        Token R=null;
        AS3_exParser.classBodyElement_return classBodyElement100 = null;


        Object L_tree=null;
        Object R_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // AS3_ex.g3:1761:2: (L= LCURLY ( classBodyElement )* R= RCURLY )
            // AS3_ex.g3:1761:6: L= LCURLY ( classBodyElement )* R= RCURLY
            {
            root_0 = (Object)adaptor.nil();

            L=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_classBody7041); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            L_tree = (Object)adaptor.create(L);
            adaptor.addChild(root_0, L_tree);
            }
            if ( state.backtracking==0 ) {

              			mCodeBlockStack.add(ASPrettyPrinter.BraceContext_class_code);
              			leftCurlyNewlineHandler(false);
              			emit(L);pushIndent(true);
              			{mPrinter.addDeclEqualsBlock();}
              			mCodeBlockStack.add(ASPrettyPrinter.BraceContext_block_code);
              		
            }
            // AS3_ex.g3:1769:3: ( classBodyElement )*
            loop57:
            do {
                int alt57=2;
                int LA57_0 = input.LA(1);

                if ( ((LA57_0>=AS && LA57_0<=LCURLY)||LA57_0==LPAREN||LA57_0==LBRACK||LA57_0==LT||(LA57_0>=PLUS && LA57_0<=STAR)||(LA57_0>=INC && LA57_0<=DEC)||(LA57_0>=NOT && LA57_0<=INV)||(LA57_0>=XML_AT && LA57_0<=XML_LS_STD)||(LA57_0>=SINGLE_QUOTE_LITERAL && LA57_0<=DOUBLE_QUOTE_LITERAL)||LA57_0==REGULAR_EXPR_LITERAL||LA57_0==HEX_NUMBER_LITERAL||LA57_0==DEC_NUMBER_LITERAL||LA57_0==IDENTIFIER||(LA57_0>=XML_COMMENT && LA57_0<=XML_PI)) ) {
                    alt57=1;
                }


                switch (alt57) {
            	case 1 :
            	    // AS3_ex.g3:0:0: classBodyElement
            	    {
            	    pushFollow(FOLLOW_classBodyElement_in_classBody7051);
            	    classBodyElement100=classBodyElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classBodyElement100.getTree());

            	    }
            	    break;

            	default :
            	    break loop57;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              popIndent();
            }
            if ( state.backtracking==0 ) {
              mPrinter.popDeclEqualsBlock();
            }
            R=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_classBody7068); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            R_tree = (Object)adaptor.create(R);
            adaptor.addChild(root_0, R_tree);
            }
            if ( state.backtracking==0 ) {
              insertCR(false);emit(R);popBlockStack();popBlockStack();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, classBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classBody"

    public static class classBodyElement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classBodyElement"
    // AS3_ex.g3:1779:1: classBodyElement : ( ( conditionalCompilerOption LCURLY )=> conditionalCompilerOption l= LCURLY ( classBodyElement )* r= RCURLY | propertyDeclaration | functionDeclaration | statement | directive );
    public final AS3_exParser.classBodyElement_return classBodyElement() throws RecognitionException {
        AS3_exParser.classBodyElement_return retval = new AS3_exParser.classBodyElement_return();
        retval.start = input.LT(1);
        int classBodyElement_StartIndex = input.index();
        Object root_0 = null;

        Token l=null;
        Token r=null;
        AS3_exParser.conditionalCompilerOption_return conditionalCompilerOption101 = null;

        AS3_exParser.classBodyElement_return classBodyElement102 = null;

        AS3_exParser.propertyDeclaration_return propertyDeclaration103 = null;

        AS3_exParser.functionDeclaration_return functionDeclaration104 = null;

        AS3_exParser.statement_return statement105 = null;

        AS3_exParser.directive_return directive106 = null;


        Object l_tree=null;
        Object r_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // AS3_ex.g3:1780:5: ( ( conditionalCompilerOption LCURLY )=> conditionalCompilerOption l= LCURLY ( classBodyElement )* r= RCURLY | propertyDeclaration | functionDeclaration | statement | directive )
            int alt59=5;
            alt59 = dfa59.predict(input);
            switch (alt59) {
                case 1 :
                    // AS3_ex.g3:1780:7: ( conditionalCompilerOption LCURLY )=> conditionalCompilerOption l= LCURLY ( classBodyElement )* r= RCURLY
                    {
                    root_0 = (Object)adaptor.nil();

                    if ( state.backtracking==0 ) {
                      insertCR(false);
                    }
                    pushFollow(FOLLOW_conditionalCompilerOption_in_classBodyElement7107);
                    conditionalCompilerOption101=conditionalCompilerOption();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalCompilerOption101.getTree());
                    l=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_classBodyElement7115); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    l_tree = (Object)adaptor.create(l);
                    adaptor.addChild(root_0, l_tree);
                    }
                    if ( state.backtracking==0 ) {
                       
                      				mCodeBlockStack.add(ASPrettyPrinter.BraceContext_Conditional_code);
                      				leftCurlyNewlineHandler(false);
                      	    		emit(l);pushIndent(true);
                      	    		{mPrinter.addDeclEqualsBlock();}
                      	    		mCodeBlockStack.add(ASPrettyPrinter.BraceContext_block_code);
                      	    	
                    }
                    // AS3_ex.g3:1790:4: ( classBodyElement )*
                    loop58:
                    do {
                        int alt58=2;
                        int LA58_0 = input.LA(1);

                        if ( ((LA58_0>=AS && LA58_0<=LCURLY)||LA58_0==LPAREN||LA58_0==LBRACK||LA58_0==LT||(LA58_0>=PLUS && LA58_0<=STAR)||(LA58_0>=INC && LA58_0<=DEC)||(LA58_0>=NOT && LA58_0<=INV)||(LA58_0>=XML_AT && LA58_0<=XML_LS_STD)||(LA58_0>=SINGLE_QUOTE_LITERAL && LA58_0<=DOUBLE_QUOTE_LITERAL)||LA58_0==REGULAR_EXPR_LITERAL||LA58_0==HEX_NUMBER_LITERAL||LA58_0==DEC_NUMBER_LITERAL||LA58_0==IDENTIFIER||(LA58_0>=XML_COMMENT && LA58_0<=XML_PI)) ) {
                            alt58=1;
                        }


                        switch (alt58) {
                    	case 1 :
                    	    // AS3_ex.g3:0:0: classBodyElement
                    	    {
                    	    pushFollow(FOLLOW_classBodyElement_in_classBodyElement7125);
                    	    classBodyElement102=classBodyElement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classBodyElement102.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop58;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {
                      popIndent();
                    }
                    if ( state.backtracking==0 ) {
                      mPrinter.popDeclEqualsBlock();
                    }
                    r=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_classBodyElement7144); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    r_tree = (Object)adaptor.create(r);
                    adaptor.addChild(root_0, r_tree);
                    }
                    if ( state.backtracking==0 ) {
                      insertCR(false);emit(r);popBlockStack();popBlockStack();
                    }

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:1794:7: propertyDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_propertyDeclaration_in_classBodyElement7158);
                    propertyDeclaration103=propertyDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyDeclaration103.getTree());

                    }
                    break;
                case 3 :
                    // AS3_ex.g3:1794:29: functionDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_functionDeclaration_in_classBodyElement7162);
                    functionDeclaration104=functionDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, functionDeclaration104.getTree());

                    }
                    break;
                case 4 :
                    // AS3_ex.g3:1794:51: statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_statement_in_classBodyElement7166);
                    statement105=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement105.getTree());

                    }
                    break;
                case 5 :
                    // AS3_ex.g3:1794:63: directive
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_directive_in_classBodyElement7170);
                    directive106=directive();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, directive106.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, classBodyElement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classBodyElement"

    public static class interfaceElement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceElement"
    // AS3_ex.g3:1797:1: interfaceElement : ( ( conditionalCompilerOption LCURLY )=> conditionalCompilerOption l= LCURLY ( interfaceElement )* r= RCURLY | propertyDeclaration | interfaceFunctionDeclaration | statement | directive );
    public final AS3_exParser.interfaceElement_return interfaceElement() throws RecognitionException {
        AS3_exParser.interfaceElement_return retval = new AS3_exParser.interfaceElement_return();
        retval.start = input.LT(1);
        int interfaceElement_StartIndex = input.index();
        Object root_0 = null;

        Token l=null;
        Token r=null;
        AS3_exParser.conditionalCompilerOption_return conditionalCompilerOption107 = null;

        AS3_exParser.interfaceElement_return interfaceElement108 = null;

        AS3_exParser.propertyDeclaration_return propertyDeclaration109 = null;

        AS3_exParser.interfaceFunctionDeclaration_return interfaceFunctionDeclaration110 = null;

        AS3_exParser.statement_return statement111 = null;

        AS3_exParser.directive_return directive112 = null;


        Object l_tree=null;
        Object r_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // AS3_ex.g3:1798:5: ( ( conditionalCompilerOption LCURLY )=> conditionalCompilerOption l= LCURLY ( interfaceElement )* r= RCURLY | propertyDeclaration | interfaceFunctionDeclaration | statement | directive )
            int alt61=5;
            alt61 = dfa61.predict(input);
            switch (alt61) {
                case 1 :
                    // AS3_ex.g3:1798:7: ( conditionalCompilerOption LCURLY )=> conditionalCompilerOption l= LCURLY ( interfaceElement )* r= RCURLY
                    {
                    root_0 = (Object)adaptor.nil();

                    if ( state.backtracking==0 ) {
                      insertCR(false);
                    }
                    pushFollow(FOLLOW_conditionalCompilerOption_in_interfaceElement7202);
                    conditionalCompilerOption107=conditionalCompilerOption();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalCompilerOption107.getTree());
                    l=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_interfaceElement7210); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    l_tree = (Object)adaptor.create(l);
                    adaptor.addChild(root_0, l_tree);
                    }
                    if ( state.backtracking==0 ) {
                       
                      				mCodeBlockStack.add(ASPrettyPrinter.BraceContext_Conditional_code);
                      				leftCurlyNewlineHandler(false);
                      	    		emit(l);pushIndent(true);
                      	    		{mPrinter.addDeclEqualsBlock();}
                      	    		mCodeBlockStack.add(ASPrettyPrinter.BraceContext_block_code);
                      	    	
                    }
                    // AS3_ex.g3:1808:4: ( interfaceElement )*
                    loop60:
                    do {
                        int alt60=2;
                        int LA60_0 = input.LA(1);

                        if ( ((LA60_0>=AS && LA60_0<=LCURLY)||LA60_0==LPAREN||LA60_0==LBRACK||LA60_0==LT||(LA60_0>=PLUS && LA60_0<=STAR)||(LA60_0>=INC && LA60_0<=DEC)||(LA60_0>=NOT && LA60_0<=INV)||(LA60_0>=XML_AT && LA60_0<=XML_LS_STD)||(LA60_0>=SINGLE_QUOTE_LITERAL && LA60_0<=DOUBLE_QUOTE_LITERAL)||LA60_0==REGULAR_EXPR_LITERAL||LA60_0==HEX_NUMBER_LITERAL||LA60_0==DEC_NUMBER_LITERAL||LA60_0==IDENTIFIER||(LA60_0>=XML_COMMENT && LA60_0<=XML_PI)) ) {
                            alt60=1;
                        }


                        switch (alt60) {
                    	case 1 :
                    	    // AS3_ex.g3:0:0: interfaceElement
                    	    {
                    	    pushFollow(FOLLOW_interfaceElement_in_interfaceElement7220);
                    	    interfaceElement108=interfaceElement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceElement108.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop60;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {
                      popIndent();
                    }
                    if ( state.backtracking==0 ) {
                      mPrinter.popDeclEqualsBlock();
                    }
                    r=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_interfaceElement7239); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    r_tree = (Object)adaptor.create(r);
                    adaptor.addChild(root_0, r_tree);
                    }
                    if ( state.backtracking==0 ) {
                      insertCR(false);emit(r);popBlockStack();popBlockStack();
                    }

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:1812:7: propertyDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_propertyDeclaration_in_interfaceElement7253);
                    propertyDeclaration109=propertyDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyDeclaration109.getTree());

                    }
                    break;
                case 3 :
                    // AS3_ex.g3:1812:29: interfaceFunctionDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceFunctionDeclaration_in_interfaceElement7257);
                    interfaceFunctionDeclaration110=interfaceFunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceFunctionDeclaration110.getTree());

                    }
                    break;
                case 4 :
                    // AS3_ex.g3:1812:60: statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_statement_in_interfaceElement7261);
                    statement111=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement111.getTree());

                    }
                    break;
                case 5 :
                    // AS3_ex.g3:1812:71: directive
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_directive_in_interfaceElement7264);
                    directive112=directive();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, directive112.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, interfaceElement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceElement"

    public static class interfaceFunctionDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceFunctionDeclaration"
    // AS3_ex.g3:1821:1: interfaceFunctionDeclaration : ( conditionalDirAndBindingDecls )? ( memberModifiers )? F= FUNCTION (S= SET | G= GET )? (I= IDENTIFIER | notQuiteReservedWord ) formalParameterList (C= COLON type )? semic ;
    public final AS3_exParser.interfaceFunctionDeclaration_return interfaceFunctionDeclaration() throws RecognitionException {
        AS3_exParser.interfaceFunctionDeclaration_return retval = new AS3_exParser.interfaceFunctionDeclaration_return();
        retval.start = input.LT(1);
        int interfaceFunctionDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token F=null;
        Token S=null;
        Token G=null;
        Token I=null;
        Token C=null;
        AS3_exParser.conditionalDirAndBindingDecls_return conditionalDirAndBindingDecls113 = null;

        AS3_exParser.memberModifiers_return memberModifiers114 = null;

        AS3_exParser.notQuiteReservedWord_return notQuiteReservedWord115 = null;

        AS3_exParser.formalParameterList_return formalParameterList116 = null;

        AS3_exParser.type_return type117 = null;

        AS3_exParser.semic_return semic118 = null;


        Object F_tree=null;
        Object S_tree=null;
        Object G_tree=null;
        Object I_tree=null;
        Object C_tree=null;


        	WrapOptions options=mPrinter.getExpressionWrapOptions();
        	boolean pushedWrapInfo=false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // AS3_ex.g3:1826:5: ( ( conditionalDirAndBindingDecls )? ( memberModifiers )? F= FUNCTION (S= SET | G= GET )? (I= IDENTIFIER | notQuiteReservedWord ) formalParameterList (C= COLON type )? semic )
            // AS3_ex.g3:1826:10: ( conditionalDirAndBindingDecls )? ( memberModifiers )? F= FUNCTION (S= SET | G= GET )? (I= IDENTIFIER | notQuiteReservedWord ) formalParameterList (C= COLON type )? semic
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              mPrinter.setBindingContext(ASPrettyPrinter.BindingContext_Function);
            }
            // AS3_ex.g3:1826:81: ( conditionalDirAndBindingDecls )?
            int alt62=2;
            switch ( input.LA(1) ) {
                case IDENTIFIER:
                    {
                    int LA62_1 = input.LA(2);

                    if ( (LA62_1==XML_NS_OP) ) {
                        alt62=1;
                    }
                    }
                    break;
                case NATIVE:
                case DYNAMIC:
                case FINAL:
                case OVERRIDE:
                case STATIC:
                    {
                    int LA62_2 = input.LA(2);

                    if ( (LA62_2==XML_NS_OP) ) {
                        alt62=1;
                    }
                    }
                    break;
                case TO:
                case EACH:
                case GET:
                case SET:
                case NAMESPACE:
                    {
                    alt62=1;
                    }
                    break;
            }

            switch (alt62) {
                case 1 :
                    // AS3_ex.g3:1826:82: conditionalDirAndBindingDecls
                    {
                    pushFollow(FOLLOW_conditionalDirAndBindingDecls_in_interfaceFunctionDeclaration7299);
                    conditionalDirAndBindingDecls113=conditionalDirAndBindingDecls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalDirAndBindingDecls113.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              insertCR(false);
            }
            // AS3_ex.g3:1826:133: ( memberModifiers )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==INTERNAL||LA63_0==NATIVE||(LA63_0>=PRIVATE && LA63_0<=PUBLIC)||(LA63_0>=DYNAMIC && LA63_0<=STATIC)||LA63_0==IDENTIFIER) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // AS3_ex.g3:0:0: memberModifiers
                    {
                    pushFollow(FOLLOW_memberModifiers_in_interfaceFunctionDeclaration7305);
                    memberModifiers114=memberModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, memberModifiers114.getTree());

                    }
                    break;

            }

            F=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_interfaceFunctionDeclaration7310); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            F_tree = (Object)adaptor.create(F);
            adaptor.addChild(root_0, F_tree);
            }
            if ( state.backtracking==0 ) {
              emit(F);
            }
            // AS3_ex.g3:1828:5: (S= SET | G= GET )?
            int alt64=3;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==SET) ) {
                int LA64_1 = input.LA(2);

                if ( (LA64_1==NATIVE||LA64_1==TO||(LA64_1>=EACH && LA64_1<=NAMESPACE)||(LA64_1>=DYNAMIC && LA64_1<=STATIC)||LA64_1==IDENTIFIER) ) {
                    alt64=1;
                }
            }
            else if ( (LA64_0==GET) ) {
                int LA64_2 = input.LA(2);

                if ( (LA64_2==NATIVE||LA64_2==TO||(LA64_2>=EACH && LA64_2<=NAMESPACE)||(LA64_2>=DYNAMIC && LA64_2<=STATIC)||LA64_2==IDENTIFIER) ) {
                    alt64=2;
                }
            }
            switch (alt64) {
                case 1 :
                    // AS3_ex.g3:1828:6: S= SET
                    {
                    S=(Token)match(input,SET,FOLLOW_SET_in_interfaceFunctionDeclaration7329); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    S_tree = (Object)adaptor.create(S);
                    adaptor.addChild(root_0, S_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(S);
                    }

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:1828:25: G= GET
                    {
                    G=(Token)match(input,GET,FOLLOW_GET_in_interfaceFunctionDeclaration7336); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    G_tree = (Object)adaptor.create(G);
                    adaptor.addChild(root_0, G_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(G);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              pushedWrapInfo=pushWrapInfo(options, true);
            }
            // AS3_ex.g3:1830:2: (I= IDENTIFIER | notQuiteReservedWord )
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==IDENTIFIER) ) {
                alt65=1;
            }
            else if ( (LA65_0==NATIVE||LA65_0==TO||(LA65_0>=EACH && LA65_0<=NAMESPACE)||(LA65_0>=DYNAMIC && LA65_0<=STATIC)) ) {
                alt65=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                throw nvae;
            }
            switch (alt65) {
                case 1 :
                    // AS3_ex.g3:1830:3: I= IDENTIFIER
                    {
                    I=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_interfaceFunctionDeclaration7353); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    I_tree = (Object)adaptor.create(I);
                    adaptor.addChild(root_0, I_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(I);
                    }

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:1830:30: notQuiteReservedWord
                    {
                    pushFollow(FOLLOW_notQuiteReservedWord_in_interfaceFunctionDeclaration7359);
                    notQuiteReservedWord115=notQuiteReservedWord();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, notQuiteReservedWord115.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_formalParameterList_in_interfaceFunctionDeclaration7362);
            formalParameterList116=formalParameterList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterList116.getTree());
            // AS3_ex.g3:1830:72: (C= COLON type )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==COLON) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // AS3_ex.g3:1830:73: C= COLON type
                    {
                    C=(Token)match(input,COLON,FOLLOW_COLON_in_interfaceFunctionDeclaration7367); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    C_tree = (Object)adaptor.create(C);
                    adaptor.addChild(root_0, C_tree);
                    }
                    if ( state.backtracking==0 ) {
                      insertWS(mPrinter.getAdvancedSpacesBeforeColonsInFunctionTypes()); emit(C);insertWS(mPrinter.getAdvancedSpacesAfterColonsInFunctionTypes());
                    }
                    pushFollow(FOLLOW_type_in_interfaceFunctionDeclaration7371);
                    type117=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type117.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_semic_in_interfaceFunctionDeclaration7375);
            semic118=semic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, semic118.getTree());
            if ( state.backtracking==0 ) {
              if (pushedWrapInfo) mPrinter.popWrapContext();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, interfaceFunctionDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceFunctionDeclaration"

    public static class propertyDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyDeclaration"
    // AS3_ex.g3:1838:1: propertyDeclaration : ( conditionalDirAndBindingDecls )? ( memberModifiers )? ( variableStatement | constantVarStatement | namespaceDirective ) ;
    public final AS3_exParser.propertyDeclaration_return propertyDeclaration() throws RecognitionException {
        AS3_exParser.propertyDeclaration_return retval = new AS3_exParser.propertyDeclaration_return();
        retval.start = input.LT(1);
        int propertyDeclaration_StartIndex = input.index();
        Object root_0 = null;

        AS3_exParser.conditionalDirAndBindingDecls_return conditionalDirAndBindingDecls119 = null;

        AS3_exParser.memberModifiers_return memberModifiers120 = null;

        AS3_exParser.variableStatement_return variableStatement121 = null;

        AS3_exParser.constantVarStatement_return constantVarStatement122 = null;

        AS3_exParser.namespaceDirective_return namespaceDirective123 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // AS3_ex.g3:1839:2: ( ( conditionalDirAndBindingDecls )? ( memberModifiers )? ( variableStatement | constantVarStatement | namespaceDirective ) )
            // AS3_ex.g3:1839:7: ( conditionalDirAndBindingDecls )? ( memberModifiers )? ( variableStatement | constantVarStatement | namespaceDirective )
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              insertLines(mPrinter.getBlankLinesBeforeProperties());mPrinter.setBindingContext(ASPrettyPrinter.BindingContext_Property);
            }
            // AS3_ex.g3:1839:132: ( conditionalDirAndBindingDecls )?
            int alt67=2;
            switch ( input.LA(1) ) {
                case IDENTIFIER:
                    {
                    int LA67_1 = input.LA(2);

                    if ( (LA67_1==XML_NS_OP) ) {
                        alt67=1;
                    }
                    }
                    break;
                case NATIVE:
                case DYNAMIC:
                case FINAL:
                case OVERRIDE:
                case STATIC:
                    {
                    int LA67_2 = input.LA(2);

                    if ( (LA67_2==XML_NS_OP) ) {
                        alt67=1;
                    }
                    }
                    break;
                case NAMESPACE:
                    {
                    int LA67_3 = input.LA(2);

                    if ( (LA67_3==XML_NS_OP) ) {
                        alt67=1;
                    }
                    }
                    break;
                case TO:
                case EACH:
                case GET:
                case SET:
                    {
                    alt67=1;
                    }
                    break;
            }

            switch (alt67) {
                case 1 :
                    // AS3_ex.g3:1839:133: conditionalDirAndBindingDecls
                    {
                    pushFollow(FOLLOW_conditionalDirAndBindingDecls_in_propertyDeclaration7405);
                    conditionalDirAndBindingDecls119=conditionalDirAndBindingDecls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalDirAndBindingDecls119.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              insertCR(false);
            }
            if ( state.backtracking==0 ) {
              pushLazyIndent();
            }
            // AS3_ex.g3:1839:203: ( memberModifiers )?
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==IDENTIFIER) ) {
                int LA68_1 = input.LA(2);

                if ( (synpred152_AS3_ex()) ) {
                    alt68=1;
                }
            }
            else if ( (LA68_0==INTERNAL||LA68_0==NATIVE||(LA68_0>=PRIVATE && LA68_0<=PUBLIC)||(LA68_0>=DYNAMIC && LA68_0<=STATIC)) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    // AS3_ex.g3:0:0: memberModifiers
                    {
                    pushFollow(FOLLOW_memberModifiers_in_propertyDeclaration7412);
                    memberModifiers120=memberModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, memberModifiers120.getTree());

                    }
                    break;

            }

            // AS3_ex.g3:1839:220: ( variableStatement | constantVarStatement | namespaceDirective )
            int alt69=3;
            switch ( input.LA(1) ) {
            case VAR:
            case IDENTIFIER:
                {
                alt69=1;
                }
                break;
            case CONST:
                {
                alt69=2;
                }
                break;
            case NAMESPACE:
                {
                alt69=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                throw nvae;
            }

            switch (alt69) {
                case 1 :
                    // AS3_ex.g3:1839:221: variableStatement
                    {
                    pushFollow(FOLLOW_variableStatement_in_propertyDeclaration7416);
                    variableStatement121=variableStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableStatement121.getTree());

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:1839:241: constantVarStatement
                    {
                    pushFollow(FOLLOW_constantVarStatement_in_propertyDeclaration7420);
                    constantVarStatement122=constantVarStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constantVarStatement122.getTree());

                    }
                    break;
                case 3 :
                    // AS3_ex.g3:1839:264: namespaceDirective
                    {
                    pushFollow(FOLLOW_namespaceDirective_in_propertyDeclaration7424);
                    namespaceDirective123=namespaceDirective();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, namespaceDirective123.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              popIndent();
            }
            if ( state.backtracking==0 ) {
              mPrinter.adjustLastLineIndent();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, propertyDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "propertyDeclaration"

    public static class functionDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "functionDeclaration"
    // AS3_ex.g3:1846:1: functionDeclaration : ( conditionalDirAndBindingDecls )? ( memberModifiers )? F= FUNCTION (funcType= ( SET | GET ) )? (I= IDENTIFIER | notQuiteReservedWord ) formalParameterList (C= COLON type )? functionBody ;
    public final AS3_exParser.functionDeclaration_return functionDeclaration() throws RecognitionException {
        AS3_exParser.functionDeclaration_return retval = new AS3_exParser.functionDeclaration_return();
        retval.start = input.LT(1);
        int functionDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token F=null;
        Token funcType=null;
        Token I=null;
        Token C=null;
        AS3_exParser.conditionalDirAndBindingDecls_return conditionalDirAndBindingDecls124 = null;

        AS3_exParser.memberModifiers_return memberModifiers125 = null;

        AS3_exParser.notQuiteReservedWord_return notQuiteReservedWord126 = null;

        AS3_exParser.formalParameterList_return formalParameterList127 = null;

        AS3_exParser.type_return type128 = null;

        AS3_exParser.functionBody_return functionBody129 = null;


        Object F_tree=null;
        Object funcType_tree=null;
        Object I_tree=null;
        Object C_tree=null;


        	WrapOptions options=mPrinter.getExpressionWrapOptions();
        	boolean pushedWrapInfo=false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // AS3_ex.g3:1851:5: ( ( conditionalDirAndBindingDecls )? ( memberModifiers )? F= FUNCTION (funcType= ( SET | GET ) )? (I= IDENTIFIER | notQuiteReservedWord ) formalParameterList (C= COLON type )? functionBody )
            // AS3_ex.g3:1852:5: ( conditionalDirAndBindingDecls )? ( memberModifiers )? F= FUNCTION (funcType= ( SET | GET ) )? (I= IDENTIFIER | notQuiteReservedWord ) formalParameterList (C= COLON type )? functionBody
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              mPrinter.setBindingContext(ASPrettyPrinter.BindingContext_Function);
            }
            // AS3_ex.g3:1852:76: ( conditionalDirAndBindingDecls )?
            int alt70=2;
            switch ( input.LA(1) ) {
                case IDENTIFIER:
                    {
                    int LA70_1 = input.LA(2);

                    if ( (LA70_1==XML_NS_OP) ) {
                        alt70=1;
                    }
                    }
                    break;
                case NATIVE:
                case DYNAMIC:
                case FINAL:
                case OVERRIDE:
                case STATIC:
                    {
                    int LA70_2 = input.LA(2);

                    if ( (LA70_2==XML_NS_OP) ) {
                        alt70=1;
                    }
                    }
                    break;
                case TO:
                case EACH:
                case GET:
                case SET:
                case NAMESPACE:
                    {
                    alt70=1;
                    }
                    break;
            }

            switch (alt70) {
                case 1 :
                    // AS3_ex.g3:1852:77: conditionalDirAndBindingDecls
                    {
                    pushFollow(FOLLOW_conditionalDirAndBindingDecls_in_functionDeclaration7458);
                    conditionalDirAndBindingDecls124=conditionalDirAndBindingDecls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalDirAndBindingDecls124.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              pushLazyIndent();
            }
            if ( state.backtracking==0 ) {
              insertCR(false);insertLines(mPrinter.getBlankLinesBeforeFunction());
            }
            // AS3_ex.g3:1852:199: ( memberModifiers )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==INTERNAL||LA71_0==NATIVE||(LA71_0>=PRIVATE && LA71_0<=PUBLIC)||(LA71_0>=DYNAMIC && LA71_0<=STATIC)||LA71_0==IDENTIFIER) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    // AS3_ex.g3:0:0: memberModifiers
                    {
                    pushFollow(FOLLOW_memberModifiers_in_functionDeclaration7465);
                    memberModifiers125=memberModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, memberModifiers125.getTree());

                    }
                    break;

            }

            F=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_functionDeclaration7470); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            F_tree = (Object)adaptor.create(F);
            adaptor.addChild(root_0, F_tree);
            }
            if ( state.backtracking==0 ) {
              emit(F);
            }
            if ( state.backtracking==0 ) {
              mPrinter.checkForSingleLineFunctionMode(F);
            }
            // AS3_ex.g3:1854:5: (funcType= ( SET | GET ) )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( ((LA72_0>=GET && LA72_0<=SET)) ) {
                int LA72_1 = input.LA(2);

                if ( (LA72_1==NATIVE||LA72_1==TO||(LA72_1>=EACH && LA72_1<=NAMESPACE)||(LA72_1>=DYNAMIC && LA72_1<=STATIC)||LA72_1==IDENTIFIER) ) {
                    alt72=1;
                }
            }
            switch (alt72) {
                case 1 :
                    // AS3_ex.g3:1854:6: funcType= ( SET | GET )
                    {
                    funcType=(Token)input.LT(1);
                    if ( (input.LA(1)>=GET && input.LA(1)<=SET) ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(funcType));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }

                    if ( state.backtracking==0 ) {
                      emit(funcType);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              pushedWrapInfo=pushWrapInfo(options, true);
            }
            // AS3_ex.g3:1856:2: (I= IDENTIFIER | notQuiteReservedWord )
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==IDENTIFIER) ) {
                alt73=1;
            }
            else if ( (LA73_0==NATIVE||LA73_0==TO||(LA73_0>=EACH && LA73_0<=NAMESPACE)||(LA73_0>=DYNAMIC && LA73_0<=STATIC)) ) {
                alt73=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);

                throw nvae;
            }
            switch (alt73) {
                case 1 :
                    // AS3_ex.g3:1856:3: I= IDENTIFIER
                    {
                    I=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_functionDeclaration7512); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    I_tree = (Object)adaptor.create(I);
                    adaptor.addChild(root_0, I_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(I);
                    }

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:1856:30: notQuiteReservedWord
                    {
                    pushFollow(FOLLOW_notQuiteReservedWord_in_functionDeclaration7518);
                    notQuiteReservedWord126=notQuiteReservedWord();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, notQuiteReservedWord126.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_formalParameterList_in_functionDeclaration7521);
            formalParameterList127=formalParameterList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterList127.getTree());
            // AS3_ex.g3:1856:72: (C= COLON type )?
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==COLON) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    // AS3_ex.g3:1856:73: C= COLON type
                    {
                    C=(Token)match(input,COLON,FOLLOW_COLON_in_functionDeclaration7526); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    C_tree = (Object)adaptor.create(C);
                    adaptor.addChild(root_0, C_tree);
                    }
                    if ( state.backtracking==0 ) {
                      insertWS(mPrinter.getAdvancedSpacesBeforeColonsInFunctionTypes());emit(C);insertWS(mPrinter.getAdvancedSpacesAfterColonsInFunctionTypes());
                    }
                    pushFollow(FOLLOW_type_in_functionDeclaration7530);
                    type128=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type128.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              popIndent();mIsFunctionDecl=true;
            }
            if ( state.backtracking==0 ) {
              if (pushedWrapInfo) mPrinter.popWrapContext();
            }
            pushFollow(FOLLOW_functionBody_in_functionDeclaration7546);
            functionBody129=functionBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, functionBody129.getTree());
            if ( state.backtracking==0 ) {
              mPrinter.endSingleLineFunctionMode();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, functionDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "functionDeclaration"

    public static class functionExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "functionExpression"
    // AS3_ex.g3:1862:1: functionExpression : F= FUNCTION (I= IDENTIFIER )? formalParameterList (C= COLON type )? functionBody ;
    public final AS3_exParser.functionExpression_return functionExpression() throws RecognitionException {
        AS3_exParser.functionExpression_return retval = new AS3_exParser.functionExpression_return();
        retval.start = input.LT(1);
        int functionExpression_StartIndex = input.index();
        Object root_0 = null;

        Token F=null;
        Token I=null;
        Token C=null;
        AS3_exParser.formalParameterList_return formalParameterList130 = null;

        AS3_exParser.type_return type131 = null;

        AS3_exParser.functionBody_return functionBody132 = null;


        Object F_tree=null;
        Object I_tree=null;
        Object C_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // AS3_ex.g3:1865:2: (F= FUNCTION (I= IDENTIFIER )? formalParameterList (C= COLON type )? functionBody )
            // AS3_ex.g3:1865:6: F= FUNCTION (I= IDENTIFIER )? formalParameterList (C= COLON type )? functionBody
            {
            root_0 = (Object)adaptor.nil();

            F=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_functionExpression7581); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            F_tree = (Object)adaptor.create(F);
            adaptor.addChild(root_0, F_tree);
            }
            if ( state.backtracking==0 ) {
              emit(F);pushIndent(false);
            }
            // AS3_ex.g3:1865:47: (I= IDENTIFIER )?
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==IDENTIFIER) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    // AS3_ex.g3:1865:48: I= IDENTIFIER
                    {
                    I=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_functionExpression7588); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    I_tree = (Object)adaptor.create(I);
                    adaptor.addChild(root_0, I_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(I);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_formalParameterList_in_functionExpression7593);
            formalParameterList130=formalParameterList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterList130.getTree());
            // AS3_ex.g3:1865:94: (C= COLON type )?
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==COLON) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    // AS3_ex.g3:1865:95: C= COLON type
                    {
                    C=(Token)match(input,COLON,FOLLOW_COLON_in_functionExpression7598); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    C_tree = (Object)adaptor.create(C);
                    adaptor.addChild(root_0, C_tree);
                    }
                    if ( state.backtracking==0 ) {
                      insertWS(mPrinter.getAdvancedSpacesBeforeColonsInFunctionTypes());emit(C);insertWS(mPrinter.getAdvancedSpacesAfterColonsInFunctionTypes());
                    }
                    pushFollow(FOLLOW_type_in_functionExpression7602);
                    type131=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type131.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              mIsFunctionDecl=false;
            }
            if ( state.backtracking==0 ) {
              popIndent();
            }
            if ( state.backtracking==0 ) {
              mPrinter.pushFunctionExpressionStatementIndent();
            }
            pushFollow(FOLLOW_functionBody_in_functionExpression7616);
            functionBody132=functionBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, functionBody132.getTree());
            if ( state.backtracking==0 ) {
              popIndent();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, functionExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "functionExpression"

    public static class formalParameterList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameterList"
    // AS3_ex.g3:1869:1: formalParameterList : L= LPAREN ( ( variableDeclaration (C= COMMA variableDeclaration )* (C= COMMA formalEllipsisParameter )? ) | formalEllipsisParameter )? R= RPAREN ;
    public final AS3_exParser.formalParameterList_return formalParameterList() throws RecognitionException {
        AS3_exParser.formalParameterList_return retval = new AS3_exParser.formalParameterList_return();
        retval.start = input.LT(1);
        int formalParameterList_StartIndex = input.index();
        Object root_0 = null;

        Token L=null;
        Token C=null;
        Token R=null;
        AS3_exParser.variableDeclaration_return variableDeclaration133 = null;

        AS3_exParser.variableDeclaration_return variableDeclaration134 = null;

        AS3_exParser.formalEllipsisParameter_return formalEllipsisParameter135 = null;

        AS3_exParser.formalEllipsisParameter_return formalEllipsisParameter136 = null;


        Object L_tree=null;
        Object C_tree=null;
        Object R_tree=null;


        	WrapOptions options=mPrinter.getMethodDeclWrapOptions();
        	boolean pushedFormat=false;
        	boolean pushedIndent=false;
        	boolean pushedWrapInfo=false;
        	int firstParm=0;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // AS3_ex.g3:1878:5: (L= LPAREN ( ( variableDeclaration (C= COMMA variableDeclaration )* (C= COMMA formalEllipsisParameter )? ) | formalEllipsisParameter )? R= RPAREN )
            // AS3_ex.g3:1879:3: L= LPAREN ( ( variableDeclaration (C= COMMA variableDeclaration )* (C= COMMA formalEllipsisParameter )? ) | formalEllipsisParameter )? R= RPAREN
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {

              			mInFunctionParameterDecl=true;
              			pushedFormat=pushFormatType(options, true);
              			mPrinter.setInParameterDecl(true);
              			pushedWrapInfo=pushWrapInfo(options, true);
              		
            }
            L=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_formalParameterList7652); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            L_tree = (Object)adaptor.create(L);
            adaptor.addChild(root_0, L_tree);
            }
            if ( state.backtracking==0 ) {
              insertWS(mPrinter.getSpacesBeforeFormalParameters());
            }
            if ( state.backtracking==0 ) {
              emit(L);insertWS(mPrinter.getAdvancedSpacesInsideParensInParameterLists());
            }
            // AS3_ex.g3:1886:9: ( ( variableDeclaration (C= COMMA variableDeclaration )* (C= COMMA formalEllipsisParameter )? ) | formalEllipsisParameter )?
            int alt79=3;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==NATIVE||LA79_0==TO||(LA79_0>=EACH && LA79_0<=NAMESPACE)||(LA79_0>=DYNAMIC && LA79_0<=STATIC)||LA79_0==IDENTIFIER) ) {
                alt79=1;
            }
            else if ( (LA79_0==ELLIPSIS) ) {
                alt79=2;
            }
            switch (alt79) {
                case 1 :
                    // AS3_ex.g3:1886:11: ( variableDeclaration (C= COMMA variableDeclaration )* (C= COMMA formalEllipsisParameter )? )
                    {
                    // AS3_ex.g3:1886:11: ( variableDeclaration (C= COMMA variableDeclaration )* (C= COMMA formalEllipsisParameter )? )
                    // AS3_ex.g3:1886:13: variableDeclaration (C= COMMA variableDeclaration )* (C= COMMA formalEllipsisParameter )?
                    {
                    if ( state.backtracking==0 ) {
                      pushedIndent=pushLazyParmIndent(pushedIndent, options.getIndentStyle());
                    }
                    if ( state.backtracking==0 ) {
                      mPrinter.captureNextTextPosition();
                    }
                    pushFollow(FOLLOW_variableDeclaration_in_formalParameterList7673);
                    variableDeclaration133=variableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclaration133.getTree());
                    if ( state.backtracking==0 ) {
                      firstParm=mPrinter.getLastCapturePosition();
                    }
                    // AS3_ex.g3:1887:13: (C= COMMA variableDeclaration )*
                    loop77:
                    do {
                        int alt77=2;
                        int LA77_0 = input.LA(1);

                        if ( (LA77_0==COMMA) ) {
                            int LA77_1 = input.LA(2);

                            if ( (LA77_1==NATIVE||LA77_1==TO||(LA77_1>=EACH && LA77_1<=NAMESPACE)||(LA77_1>=DYNAMIC && LA77_1<=STATIC)||LA77_1==IDENTIFIER) ) {
                                alt77=1;
                            }


                        }


                        switch (alt77) {
                    	case 1 :
                    	    // AS3_ex.g3:1888:16: C= COMMA variableDeclaration
                    	    {
                    	    C=(Token)match(input,COMMA,FOLLOW_COMMA_in_formalParameterList7710); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    C_tree = (Object)adaptor.create(C);
                    	    adaptor.addChild(root_0, C_tree);
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      pushedIndent=emitCommaWithSpacingAndCRs(options, C, pushedIndent, firstParm, ASPrettyPrinter.Break_SubType_Parameters);
                    	    }
                    	    pushFollow(FOLLOW_variableDeclaration_in_formalParameterList7745);
                    	    variableDeclaration134=variableDeclaration();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclaration134.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop77;
                        }
                    } while (true);

                    // AS3_ex.g3:1892:13: (C= COMMA formalEllipsisParameter )?
                    int alt78=2;
                    int LA78_0 = input.LA(1);

                    if ( (LA78_0==COMMA) ) {
                        alt78=1;
                    }
                    switch (alt78) {
                        case 1 :
                            // AS3_ex.g3:1892:15: C= COMMA formalEllipsisParameter
                            {
                            C=(Token)match(input,COMMA,FOLLOW_COMMA_in_formalParameterList7780); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            C_tree = (Object)adaptor.create(C);
                            adaptor.addChild(root_0, C_tree);
                            }
                            if ( state.backtracking==0 ) {
                              pushedIndent=emitCommaWithSpacingAndCRs(options, C, pushedIndent, firstParm, ASPrettyPrinter.Break_SubType_Parameters);
                            }
                            pushFollow(FOLLOW_formalEllipsisParameter_in_formalParameterList7785);
                            formalEllipsisParameter135=formalEllipsisParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, formalEllipsisParameter135.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // AS3_ex.g3:1894:14: formalEllipsisParameter
                    {
                    if ( state.backtracking==0 ) {
                      pushedIndent=pushLazyParmIndent(pushedIndent, options.getIndentStyle());
                    }
                    pushFollow(FOLLOW_formalEllipsisParameter_in_formalParameterList7817);
                    formalEllipsisParameter136=formalEllipsisParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, formalEllipsisParameter136.getTree());

                    }
                    break;

            }

            R=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_formalParameterList7835); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            R_tree = (Object)adaptor.create(R);
            adaptor.addChild(root_0, R_tree);
            }
            if ( state.backtracking==0 ) {
              insertWS(mPrinter.getAdvancedSpacesInsideParensInParameterLists());emit(R);
            }
            if ( state.backtracking==0 ) {

                      	 mPrinter.setInParameterDecl(false);
                      	if (pushedWrapInfo)
                      		mPrinter.popWrapContext();
              	        if (pushedIndent)
                  	    	popIndent();
                  	    if (pushedFormat)
                  	    {
                  	    	mPrinter.popFormatMode();
                  	    }
                  	    mInFunctionParameterDecl=false;
                      
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, formalParameterList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameterList"

    public static class formalEllipsisParameter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalEllipsisParameter"
    // AS3_ex.g3:1912:1: formalEllipsisParameter : E= ELLIPSIS variableIdentifierDecl ;
    public final AS3_exParser.formalEllipsisParameter_return formalEllipsisParameter() throws RecognitionException {
        AS3_exParser.formalEllipsisParameter_return retval = new AS3_exParser.formalEllipsisParameter_return();
        retval.start = input.LT(1);
        int formalEllipsisParameter_StartIndex = input.index();
        Object root_0 = null;

        Token E=null;
        AS3_exParser.variableIdentifierDecl_return variableIdentifierDecl137 = null;


        Object E_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // AS3_ex.g3:1913:5: (E= ELLIPSIS variableIdentifierDecl )
            // AS3_ex.g3:1913:9: E= ELLIPSIS variableIdentifierDecl
            {
            root_0 = (Object)adaptor.nil();

            E=(Token)match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_formalEllipsisParameter7882); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            E_tree = (Object)adaptor.create(E);
            adaptor.addChild(root_0, E_tree);
            }
            if ( state.backtracking==0 ) {
              emit(E);insertWS(1);
            }
            pushFollow(FOLLOW_variableIdentifierDecl_in_formalEllipsisParameter7887);
            variableIdentifierDecl137=variableIdentifierDecl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variableIdentifierDecl137.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, formalEllipsisParameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalEllipsisParameter"

    public static class functionBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "functionBody"
    // AS3_ex.g3:1916:1: functionBody : L= LCURLY ( ( statement | functionDeclaration ) )* R= RCURLY ;
    public final AS3_exParser.functionBody_return functionBody() throws RecognitionException {
        AS3_exParser.functionBody_return retval = new AS3_exParser.functionBody_return();
        retval.start = input.LT(1);
        int functionBody_StartIndex = input.index();
        Object root_0 = null;

        Token L=null;
        Token R=null;
        AS3_exParser.statement_return statement138 = null;

        AS3_exParser.functionDeclaration_return functionDeclaration139 = null;


        Object L_tree=null;
        Object R_tree=null;


        	boolean containsStatements=false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // AS3_ex.g3:1921:5: (L= LCURLY ( ( statement | functionDeclaration ) )* R= RCURLY )
            // AS3_ex.g3:1921:9: L= LCURLY ( ( statement | functionDeclaration ) )* R= RCURLY
            {
            root_0 = (Object)adaptor.nil();

            L=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_functionBody7916); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            L_tree = (Object)adaptor.create(L);
            adaptor.addChild(root_0, L_tree);
            }
            if ( state.backtracking==0 ) {

                  		mCodeBlockStack.add(mIsFunctionDecl ? ASPrettyPrinter.BraceContext_functionDecl_code : ASPrettyPrinter.BraceContext_functionExpression_code);
                  		leftCurlyNewlineHandler(false);
                  		emit(L);pushIndent(true);
                  		{mPrinter.addDeclEqualsBlock();}
                  		mCodeBlockStack.add(ASPrettyPrinter.BraceContext_block_code);
                  		insertLines(mPrinter.getBlankLinesToStartFunctions(), false);
                  	
            }
            // AS3_ex.g3:1930:7: ( ( statement | functionDeclaration ) )*
            loop81:
            do {
                int alt81=2;
                int LA81_0 = input.LA(1);

                if ( ((LA81_0>=AS && LA81_0<=LCURLY)||LA81_0==LPAREN||LA81_0==LBRACK||LA81_0==LT||(LA81_0>=PLUS && LA81_0<=STAR)||(LA81_0>=INC && LA81_0<=DEC)||(LA81_0>=NOT && LA81_0<=INV)||(LA81_0>=XML_AT && LA81_0<=XML_LS_STD)||(LA81_0>=SINGLE_QUOTE_LITERAL && LA81_0<=DOUBLE_QUOTE_LITERAL)||LA81_0==REGULAR_EXPR_LITERAL||LA81_0==HEX_NUMBER_LITERAL||LA81_0==DEC_NUMBER_LITERAL||LA81_0==IDENTIFIER||(LA81_0>=XML_COMMENT && LA81_0<=XML_PI)) ) {
                    alt81=1;
                }


                switch (alt81) {
            	case 1 :
            	    // AS3_ex.g3:1930:8: ( statement | functionDeclaration )
            	    {
            	    // AS3_ex.g3:1930:8: ( statement | functionDeclaration )
            	    int alt80=2;
            	    alt80 = dfa80.predict(input);
            	    switch (alt80) {
            	        case 1 :
            	            // AS3_ex.g3:1930:9: statement
            	            {
            	            pushFollow(FOLLOW_statement_in_functionBody7935);
            	            statement138=statement();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, statement138.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // AS3_ex.g3:1930:21: functionDeclaration
            	            {
            	            pushFollow(FOLLOW_functionDeclaration_in_functionBody7939);
            	            functionDeclaration139=functionDeclaration();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, functionDeclaration139.getTree());

            	            }
            	            break;

            	    }

            	    if ( state.backtracking==0 ) {
            	      containsStatements=true;
            	    }

            	    }
            	    break;

            	default :
            	    break loop81;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              popIndent();
            }
            if ( state.backtracking==0 ) {
              if (containsStatements)
                  			insertLines(mPrinter.getBlankLinesToEndFunctions(), false);
                  		 else
              				mPrinter.clearAddedWhitespace();    		 	
                  		
            }
            if ( state.backtracking==0 ) {
              mPrinter.popDeclEqualsBlock();
            }
            R=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_functionBody7972); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            R_tree = (Object)adaptor.create(R);
            adaptor.addChild(root_0, R_tree);
            }
            if ( state.backtracking==0 ) {
              insertCR(false);emit(R);popBlockStack();popBlockStack();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, functionBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "functionBody"

    public static class memberModifiers_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "memberModifiers"
    // AS3_ex.g3:1944:1: memberModifiers : ( memberModifier )+ ;
    public final AS3_exParser.memberModifiers_return memberModifiers() throws RecognitionException {
        AS3_exParser.memberModifiers_return retval = new AS3_exParser.memberModifiers_return();
        retval.start = input.LT(1);
        int memberModifiers_StartIndex = input.index();
        Object root_0 = null;

        AS3_exParser.memberModifier_return memberModifier140 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // AS3_ex.g3:1945:5: ( ( memberModifier )+ )
            // AS3_ex.g3:1945:9: ( memberModifier )+
            {
            root_0 = (Object)adaptor.nil();

            // AS3_ex.g3:1945:9: ( memberModifier )+
            int cnt82=0;
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( (LA82_0==IDENTIFIER) ) {
                    int LA82_2 = input.LA(2);

                    if ( (synpred169_AS3_ex()) ) {
                        alt82=1;
                    }


                }
                else if ( (LA82_0==INTERNAL||LA82_0==NATIVE||(LA82_0>=PRIVATE && LA82_0<=PUBLIC)||(LA82_0>=DYNAMIC && LA82_0<=STATIC)) ) {
                    alt82=1;
                }


                switch (alt82) {
            	case 1 :
            	    // AS3_ex.g3:0:0: memberModifier
            	    {
            	    pushFollow(FOLLOW_memberModifier_in_memberModifiers8000);
            	    memberModifier140=memberModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, memberModifier140.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt82 >= 1 ) break loop82;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(82, input);
                        throw eee;
                }
                cnt82++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, memberModifiers_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "memberModifiers"

    public static class memberModifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "memberModifier"
    // AS3_ex.g3:1952:1: memberModifier : x= ( DYNAMIC | FINAL | INTERNAL | NATIVE | OVERRIDE | PRIVATE | PROTECTED | PUBLIC | STATIC | IDENTIFIER ) ;
    public final AS3_exParser.memberModifier_return memberModifier() throws RecognitionException {
        AS3_exParser.memberModifier_return retval = new AS3_exParser.memberModifier_return();
        retval.start = input.LT(1);
        int memberModifier_StartIndex = input.index();
        Object root_0 = null;

        Token x=null;

        Object x_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // AS3_ex.g3:1953:5: (x= ( DYNAMIC | FINAL | INTERNAL | NATIVE | OVERRIDE | PRIVATE | PROTECTED | PUBLIC | STATIC | IDENTIFIER ) )
            // AS3_ex.g3:1953:9: x= ( DYNAMIC | FINAL | INTERNAL | NATIVE | OVERRIDE | PRIVATE | PROTECTED | PUBLIC | STATIC | IDENTIFIER )
            {
            root_0 = (Object)adaptor.nil();

            x=(Token)input.LT(1);
            if ( input.LA(1)==INTERNAL||input.LA(1)==NATIVE||(input.LA(1)>=PRIVATE && input.LA(1)<=PUBLIC)||(input.LA(1)>=DYNAMIC && input.LA(1)<=STATIC)||input.LA(1)==IDENTIFIER ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(x));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            if ( state.backtracking==0 ) {
              emit(x);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, memberModifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "memberModifier"

    public static class statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement"
    // AS3_ex.g3:1974:1: statement : ( blockStatement | directive | namespaceDirective | constantVarStatement | tryStatement | switchStatement | withStatement | returnStatement | breakStatement | continueStatement | forStatement | forInStatement | forEachInStatement | doWhileStatement | whileStatement | ifStatement | variableStatement | throwStatement | labelledStatement | expression semic | emptyStatement ) ;
    public final AS3_exParser.statement_return statement() throws RecognitionException {
        AS3_exParser.statement_return retval = new AS3_exParser.statement_return();
        retval.start = input.LT(1);
        int statement_StartIndex = input.index();
        Object root_0 = null;

        AS3_exParser.blockStatement_return blockStatement141 = null;

        AS3_exParser.directive_return directive142 = null;

        AS3_exParser.namespaceDirective_return namespaceDirective143 = null;

        AS3_exParser.constantVarStatement_return constantVarStatement144 = null;

        AS3_exParser.tryStatement_return tryStatement145 = null;

        AS3_exParser.switchStatement_return switchStatement146 = null;

        AS3_exParser.withStatement_return withStatement147 = null;

        AS3_exParser.returnStatement_return returnStatement148 = null;

        AS3_exParser.breakStatement_return breakStatement149 = null;

        AS3_exParser.continueStatement_return continueStatement150 = null;

        AS3_exParser.forStatement_return forStatement151 = null;

        AS3_exParser.forInStatement_return forInStatement152 = null;

        AS3_exParser.forEachInStatement_return forEachInStatement153 = null;

        AS3_exParser.doWhileStatement_return doWhileStatement154 = null;

        AS3_exParser.whileStatement_return whileStatement155 = null;

        AS3_exParser.ifStatement_return ifStatement156 = null;

        AS3_exParser.variableStatement_return variableStatement157 = null;

        AS3_exParser.throwStatement_return throwStatement158 = null;

        AS3_exParser.labelledStatement_return labelledStatement159 = null;

        AS3_exParser.expression_return expression160 = null;

        AS3_exParser.semic_return semic161 = null;

        AS3_exParser.emptyStatement_return emptyStatement162 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // AS3_ex.g3:1975:5: ( ( blockStatement | directive | namespaceDirective | constantVarStatement | tryStatement | switchStatement | withStatement | returnStatement | breakStatement | continueStatement | forStatement | forInStatement | forEachInStatement | doWhileStatement | whileStatement | ifStatement | variableStatement | throwStatement | labelledStatement | expression semic | emptyStatement ) )
            // AS3_ex.g3:1976:6: ( blockStatement | directive | namespaceDirective | constantVarStatement | tryStatement | switchStatement | withStatement | returnStatement | breakStatement | continueStatement | forStatement | forInStatement | forEachInStatement | doWhileStatement | whileStatement | ifStatement | variableStatement | throwStatement | labelledStatement | expression semic | emptyStatement )
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              mStatementCount++;
            }
            // AS3_ex.g3:1977:5: ( blockStatement | directive | namespaceDirective | constantVarStatement | tryStatement | switchStatement | withStatement | returnStatement | breakStatement | continueStatement | forStatement | forInStatement | forEachInStatement | doWhileStatement | whileStatement | ifStatement | variableStatement | throwStatement | labelledStatement | expression semic | emptyStatement )
            int alt83=21;
            alt83 = dfa83.predict(input);
            switch (alt83) {
                case 1 :
                    // AS3_ex.g3:1977:7: blockStatement
                    {
                    if ( state.backtracking==0 ) {
                      mPrinter.inOther();
                    }
                    if ( state.backtracking==0 ) {
                      setBlockFlag(true);
                    }
                    pushFollow(FOLLOW_blockStatement_in_statement8176);
                    blockStatement141=blockStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, blockStatement141.getTree());

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:1978:9: directive
                    {
                    if ( state.backtracking==0 ) {
                      insertStatementCR();
                    }
                    pushFollow(FOLLOW_directive_in_statement8187);
                    directive142=directive();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, directive142.getTree());

                    }
                    break;
                case 3 :
                    // AS3_ex.g3:1979:9: namespaceDirective
                    {
                    if ( state.backtracking==0 ) {
                      insertStatementCR();
                    }
                    pushFollow(FOLLOW_namespaceDirective_in_statement8198);
                    namespaceDirective143=namespaceDirective();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, namespaceDirective143.getTree());

                    }
                    break;
                case 4 :
                    // AS3_ex.g3:1980:9: constantVarStatement
                    {
                    if ( state.backtracking==0 ) {
                      insertStatementCR();
                    }
                    if ( state.backtracking==0 ) {
                      pushLazyIndent();
                    }
                    pushFollow(FOLLOW_constantVarStatement_in_statement8211);
                    constantVarStatement144=constantVarStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constantVarStatement144.getTree());
                    if ( state.backtracking==0 ) {
                      popIndent();
                    }

                    }
                    break;
                case 5 :
                    // AS3_ex.g3:1981:9: tryStatement
                    {
                    if ( state.backtracking==0 ) {
                      markBlockFlag();insertLines(mPrinter.getBlankLinesBeforeControlStatement());
                    }
                    pushFollow(FOLLOW_tryStatement_in_statement8224);
                    tryStatement145=tryStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tryStatement145.getTree());

                    }
                    break;
                case 6 :
                    // AS3_ex.g3:1982:9: switchStatement
                    {
                    if ( state.backtracking==0 ) {
                      markBlockFlag();
                    }
                    pushFollow(FOLLOW_switchStatement_in_statement8236);
                    switchStatement146=switchStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, switchStatement146.getTree());

                    }
                    break;
                case 7 :
                    // AS3_ex.g3:1983:9: withStatement
                    {
                    if ( state.backtracking==0 ) {
                      markBlockFlag();insertLines(mPrinter.getBlankLinesBeforeControlStatement());
                    }
                    if ( state.backtracking==0 ) {
                      insertStatementCR();
                    }
                    if ( state.backtracking==0 ) {
                      mCodeBlockStack.add(ASPrettyPrinter.BraceContext_controlStatement_code);
                    }
                    pushFollow(FOLLOW_withStatement_in_statement8250);
                    withStatement147=withStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, withStatement147.getTree());
                    if ( state.backtracking==0 ) {
                      popBlockStack();
                    }

                    }
                    break;
                case 8 :
                    // AS3_ex.g3:1984:9: returnStatement
                    {
                    if ( state.backtracking==0 ) {
                      pushLazyIndent();
                    }
                    pushFollow(FOLLOW_returnStatement_in_statement8264);
                    returnStatement148=returnStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, returnStatement148.getTree());
                    if ( state.backtracking==0 ) {
                      popIndent();
                    }

                    }
                    break;
                case 9 :
                    // AS3_ex.g3:1985:9: breakStatement
                    {
                    if ( state.backtracking==0 ) {
                      pushLazyIndent();
                    }
                    pushFollow(FOLLOW_breakStatement_in_statement8278);
                    breakStatement149=breakStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, breakStatement149.getTree());
                    if ( state.backtracking==0 ) {
                      popIndent();
                    }

                    }
                    break;
                case 10 :
                    // AS3_ex.g3:1986:9: continueStatement
                    {
                    if ( state.backtracking==0 ) {
                      pushLazyIndent();
                    }
                    pushFollow(FOLLOW_continueStatement_in_statement8292);
                    continueStatement150=continueStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, continueStatement150.getTree());
                    if ( state.backtracking==0 ) {
                      popIndent();
                    }

                    }
                    break;
                case 11 :
                    // AS3_ex.g3:1987:9: forStatement
                    {
                    if ( state.backtracking==0 ) {
                      mPrinter.inLoop();
                    }
                    if ( state.backtracking==0 ) {
                      markBlockFlag();insertLines(mPrinter.getBlankLinesBeforeControlStatement());
                    }
                    if ( state.backtracking==0 ) {
                      insertStatementCR();
                    }
                    if ( state.backtracking==0 ) {
                      mCodeBlockStack.add(ASPrettyPrinter.BraceContext_controlStatement_code);
                    }
                    pushFollow(FOLLOW_forStatement_in_statement8309);
                    forStatement151=forStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forStatement151.getTree());
                    if ( state.backtracking==0 ) {
                      popBlockStack();
                    }

                    }
                    break;
                case 12 :
                    // AS3_ex.g3:1988:9: forInStatement
                    {
                    if ( state.backtracking==0 ) {
                      mPrinter.inLoop();
                    }
                    if ( state.backtracking==0 ) {
                      markBlockFlag();insertLines(mPrinter.getBlankLinesBeforeControlStatement());
                    }
                    if ( state.backtracking==0 ) {
                      insertStatementCR();
                    }
                    if ( state.backtracking==0 ) {
                      mCodeBlockStack.add(ASPrettyPrinter.BraceContext_controlStatement_code);
                    }
                    pushFollow(FOLLOW_forInStatement_in_statement8326);
                    forInStatement152=forInStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forInStatement152.getTree());
                    if ( state.backtracking==0 ) {
                      popBlockStack();
                    }

                    }
                    break;
                case 13 :
                    // AS3_ex.g3:1989:9: forEachInStatement
                    {
                    if ( state.backtracking==0 ) {
                      mPrinter.inLoop();
                    }
                    if ( state.backtracking==0 ) {
                      markBlockFlag();insertLines(mPrinter.getBlankLinesBeforeControlStatement());
                    }
                    if ( state.backtracking==0 ) {
                      insertStatementCR();
                    }
                    if ( state.backtracking==0 ) {
                      mCodeBlockStack.add(ASPrettyPrinter.BraceContext_controlStatement_code);
                    }
                    pushFollow(FOLLOW_forEachInStatement_in_statement8343);
                    forEachInStatement153=forEachInStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forEachInStatement153.getTree());
                    if ( state.backtracking==0 ) {
                      popBlockStack();
                    }

                    }
                    break;
                case 14 :
                    // AS3_ex.g3:1990:9: doWhileStatement
                    {
                    if ( state.backtracking==0 ) {
                      mPrinter.inLoop();
                    }
                    if ( state.backtracking==0 ) {
                      markBlockFlag();insertLines(mPrinter.getBlankLinesBeforeControlStatement());
                    }
                    if ( state.backtracking==0 ) {
                      insertStatementCR();
                    }
                    if ( state.backtracking==0 ) {
                      mCodeBlockStack.add(ASPrettyPrinter.BraceContext_controlStatement_code);
                    }
                    pushFollow(FOLLOW_doWhileStatement_in_statement8360);
                    doWhileStatement154=doWhileStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, doWhileStatement154.getTree());
                    if ( state.backtracking==0 ) {
                      popBlockStack();
                    }

                    }
                    break;
                case 15 :
                    // AS3_ex.g3:1991:9: whileStatement
                    {
                    if ( state.backtracking==0 ) {
                      mPrinter.inLoop();
                    }
                    if ( state.backtracking==0 ) {
                      markBlockFlag();insertLines(mPrinter.getBlankLinesBeforeControlStatement());
                    }
                    if ( state.backtracking==0 ) {
                      insertStatementCR();
                    }
                    if ( state.backtracking==0 ) {
                      mCodeBlockStack.add(ASPrettyPrinter.BraceContext_controlStatement_code);
                    }
                    pushFollow(FOLLOW_whileStatement_in_statement8377);
                    whileStatement155=whileStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whileStatement155.getTree());
                    if ( state.backtracking==0 ) {
                      popBlockStack();
                    }

                    }
                    break;
                case 16 :
                    // AS3_ex.g3:1992:9: ifStatement
                    {
                    if ( state.backtracking==0 ) {
                      mPrinter.inCondition();
                    }
                    if ( state.backtracking==0 ) {
                      insertLines(mPrinter.getBlankLinesBeforeControlStatement());
                    }
                    pushFollow(FOLLOW_ifStatement_in_statement8392);
                    ifStatement156=ifStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ifStatement156.getTree());

                    }
                    break;
                case 17 :
                    // AS3_ex.g3:1993:9: variableStatement
                    {
                    if ( state.backtracking==0 ) {
                      insertStatementCR();
                    }
                    if ( state.backtracking==0 ) {
                      pushLazyIndent();
                    }
                    pushFollow(FOLLOW_variableStatement_in_statement8406);
                    variableStatement157=variableStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableStatement157.getTree());
                    if ( state.backtracking==0 ) {
                      popIndent();
                    }
                    if ( state.backtracking==0 ) {
                      mPrinter.adjustLastLineIndent();
                    }

                    }
                    break;
                case 18 :
                    // AS3_ex.g3:1994:9: throwStatement
                    {
                    if ( state.backtracking==0 ) {
                      pushLazyIndent();
                    }
                    pushFollow(FOLLOW_throwStatement_in_statement8421);
                    throwStatement158=throwStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, throwStatement158.getTree());
                    if ( state.backtracking==0 ) {
                      popIndent();
                    }

                    }
                    break;
                case 19 :
                    // AS3_ex.g3:1995:9: labelledStatement
                    {
                    if ( state.backtracking==0 ) {
                      insertLines(mPrinter.getBlankLinesBeforeControlStatement());
                    }
                    if ( state.backtracking==0 ) {
                      insertStatementCR();
                    }
                    if ( state.backtracking==0 ) {
                      mCodeBlockStack.add(ASPrettyPrinter.BraceContext_controlStatement_code);
                    }
                    pushFollow(FOLLOW_labelledStatement_in_statement8437);
                    labelledStatement159=labelledStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, labelledStatement159.getTree());
                    if ( state.backtracking==0 ) {
                      popBlockStack();
                    }

                    }
                    break;
                case 20 :
                    // AS3_ex.g3:1996:9: expression semic
                    {
                    if ( state.backtracking==0 ) {
                      pushLazyIndent();
                    }
                    if ( state.backtracking==0 ) {
                      mPrinter.markDeclEqualsContextChange();
                    }
                    if ( state.backtracking==0 ) {

                      	    		if (mPrinter.statementNeedsCR(input.LT(1)))
                      	    			insertStatementCR();
                      		    	else
                      		    		insertWS(1);
                      	    	
                    }
                    pushFollow(FOLLOW_expression_in_statement8469);
                    expression160=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression160.getTree());
                    pushFollow(FOLLOW_semic_in_statement8471);
                    semic161=semic();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, semic161.getTree());
                    if ( state.backtracking==0 ) {
                      popIndent();
                    }
                    if ( state.backtracking==0 ) {
                      mPrinter.adjustLastLineIndent();
                    }

                    }
                    break;
                case 21 :
                    // AS3_ex.g3:2004:9: emptyStatement
                    {
                    if ( state.backtracking==0 ) {
                      if (mPrinter.isEmptyStatementsOnNewLine())insertStatementCR();
                    }
                    pushFollow(FOLLOW_emptyStatement_in_statement8486);
                    emptyStatement162=emptyStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, emptyStatement162.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              mPrinter.inOther();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class blockStatement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "blockStatement"
    // AS3_ex.g3:2014:1: blockStatement : (conditionalToken= conditionalCompilerOption )? L= LCURLY ( statement )* R= RCURLY ;
    public final AS3_exParser.blockStatement_return blockStatement() throws RecognitionException {
        AS3_exParser.blockStatement_return retval = new AS3_exParser.blockStatement_return();
        retval.start = input.LT(1);
        int blockStatement_StartIndex = input.index();
        Object root_0 = null;

        Token L=null;
        Token R=null;
        AS3_exParser.conditionalCompilerOption_return conditionalToken = null;

        AS3_exParser.statement_return statement163 = null;


        Object L_tree=null;
        Object R_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // AS3_ex.g3:2015:5: ( (conditionalToken= conditionalCompilerOption )? L= LCURLY ( statement )* R= RCURLY )
            // AS3_ex.g3:2015:9: (conditionalToken= conditionalCompilerOption )? L= LCURLY ( statement )* R= RCURLY
            {
            root_0 = (Object)adaptor.nil();

            // AS3_ex.g3:2015:9: (conditionalToken= conditionalCompilerOption )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==NATIVE||LA84_0==TO||(LA84_0>=EACH && LA84_0<=NAMESPACE)||(LA84_0>=DYNAMIC && LA84_0<=STATIC)||LA84_0==IDENTIFIER) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // AS3_ex.g3:2015:10: conditionalToken= conditionalCompilerOption
                    {
                    if ( state.backtracking==0 ) {
                      insertCR(false);
                    }
                    pushFollow(FOLLOW_conditionalCompilerOption_in_blockStatement8528);
                    conditionalToken=conditionalCompilerOption();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalToken.getTree());

                    }
                    break;

            }

            L=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_blockStatement8534); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            L_tree = (Object)adaptor.create(L);
            adaptor.addChild(root_0, L_tree);
            }
            if ( state.backtracking==0 ) {

                  		if (conditionalToken!=null)
                  			mCodeBlockStack.add(ASPrettyPrinter.BraceContext_Conditional_code);
                  		leftCurlyNewlineHandler(conditionalToken==null); //if we have a conditional setting, then we want to have the option of keeping the brace on the same line
                  		emit(L);
            }
            if ( state.backtracking==0 ) {
              pushIndent(true);
                  		{mPrinter.addDeclEqualsBlock();}
                  		mCodeBlockStack.add(ASPrettyPrinter.BraceContext_block_code);
                  	
            }
            // AS3_ex.g3:2024:6: ( statement )*
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);

                if ( ((LA85_0>=AS && LA85_0<=LCURLY)||LA85_0==LPAREN||LA85_0==LBRACK||LA85_0==LT||(LA85_0>=PLUS && LA85_0<=STAR)||(LA85_0>=INC && LA85_0<=DEC)||(LA85_0>=NOT && LA85_0<=INV)||(LA85_0>=XML_AT && LA85_0<=XML_LS_STD)||(LA85_0>=SINGLE_QUOTE_LITERAL && LA85_0<=DOUBLE_QUOTE_LITERAL)||LA85_0==REGULAR_EXPR_LITERAL||LA85_0==HEX_NUMBER_LITERAL||LA85_0==DEC_NUMBER_LITERAL||LA85_0==IDENTIFIER||(LA85_0>=XML_COMMENT && LA85_0<=XML_PI)) ) {
                    alt85=1;
                }


                switch (alt85) {
            	case 1 :
            	    // AS3_ex.g3:0:0: statement
            	    {
            	    pushFollow(FOLLOW_statement_in_blockStatement8551);
            	    statement163=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement163.getTree());

            	    }
            	    break;

            	default :
            	    break loop85;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              popIndent();
            }
            if ( state.backtracking==0 ) {
              mPrinter.popDeclEqualsBlock();
            }
            R=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_blockStatement8571); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            R_tree = (Object)adaptor.create(R);
            adaptor.addChild(root_0, R_tree);
            }
            if ( state.backtracking==0 ) {
              insertCR(false);emit(R);popBlockStack();if (conditionalToken!=null) popBlockStack();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, blockStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "blockStatement"

    public static class throwStatement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "throwStatement"
    // AS3_ex.g3:2031:1: throwStatement : T= THROW expression semic ;
    public final AS3_exParser.throwStatement_return throwStatement() throws RecognitionException {
        AS3_exParser.throwStatement_return retval = new AS3_exParser.throwStatement_return();
        retval.start = input.LT(1);
        int throwStatement_StartIndex = input.index();
        Object root_0 = null;

        Token T=null;
        AS3_exParser.expression_return expression164 = null;

        AS3_exParser.semic_return semic165 = null;


        Object T_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // AS3_ex.g3:2032:2: (T= THROW expression semic )
            // AS3_ex.g3:2032:5: T= THROW expression semic
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              mPrinter.markDeclEqualsContextChange();
            }
            T=(Token)match(input,THROW,FOLLOW_THROW_in_throwStatement8596); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            T_tree = (Object)adaptor.create(T);
            adaptor.addChild(root_0, T_tree);
            }
            if ( state.backtracking==0 ) {

              			if (mPrinter.statementNeedsCR(T))
              	    		insertStatementCR();
              	    	else
              	    		insertWS(1);
              		
            }
            if ( state.backtracking==0 ) {
              emit(T);
            }
            pushFollow(FOLLOW_expression_in_throwStatement8607);
            expression164=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression164.getTree());
            pushFollow(FOLLOW_semic_in_throwStatement8609);
            semic165=semic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, semic165.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, throwStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "throwStatement"

    public static class constantVarStatement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantVarStatement"
    // AS3_ex.g3:2045:1: constantVarStatement : C= CONST variableDeclarationList (S= SEMI )? ;
    public final AS3_exParser.constantVarStatement_return constantVarStatement() throws RecognitionException {
        AS3_exParser.constantVarStatement_return retval = new AS3_exParser.constantVarStatement_return();
        retval.start = input.LT(1);
        int constantVarStatement_StartIndex = input.index();
        Object root_0 = null;

        Token C=null;
        Token S=null;
        AS3_exParser.variableDeclarationList_return variableDeclarationList166 = null;


        Object C_tree=null;
        Object S_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // AS3_ex.g3:2046:5: (C= CONST variableDeclarationList (S= SEMI )? )
            // AS3_ex.g3:2047:5: C= CONST variableDeclarationList (S= SEMI )?
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              mInEqualAlignDecl=true;
            }
            C=(Token)match(input,CONST,FOLLOW_CONST_in_constantVarStatement8640); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            C_tree = (Object)adaptor.create(C);
            adaptor.addChild(root_0, C_tree);
            }
            if ( state.backtracking==0 ) {
              emit(C);
            }
            pushFollow(FOLLOW_variableDeclarationList_in_constantVarStatement8645);
            variableDeclarationList166=variableDeclarationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclarationList166.getTree());
            // AS3_ex.g3:2048:50: (S= SEMI )?
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==SEMI) ) {
                int LA86_1 = input.LA(2);

                if ( (synpred201_AS3_ex()) ) {
                    alt86=1;
                }
            }
            switch (alt86) {
                case 1 :
                    // AS3_ex.g3:2048:51: S= SEMI
                    {
                    S=(Token)match(input,SEMI,FOLLOW_SEMI_in_constantVarStatement8650); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    S_tree = (Object)adaptor.create(S);
                    adaptor.addChild(root_0, S_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(S);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              mInEqualAlignDecl=false;
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, constantVarStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantVarStatement"

    public static class useNamespaceDirective_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "useNamespaceDirective"
    // AS3_ex.g3:2054:1: useNamespaceDirective : U= USE N= NAMESPACE qualifiedIdentifier (C= COMMA qualifiedIdentifier )* semic ;
    public final AS3_exParser.useNamespaceDirective_return useNamespaceDirective() throws RecognitionException {
        AS3_exParser.useNamespaceDirective_return retval = new AS3_exParser.useNamespaceDirective_return();
        retval.start = input.LT(1);
        int useNamespaceDirective_StartIndex = input.index();
        Object root_0 = null;

        Token U=null;
        Token N=null;
        Token C=null;
        AS3_exParser.qualifiedIdentifier_return qualifiedIdentifier167 = null;

        AS3_exParser.qualifiedIdentifier_return qualifiedIdentifier168 = null;

        AS3_exParser.semic_return semic169 = null;


        Object U_tree=null;
        Object N_tree=null;
        Object C_tree=null;


        	boolean pushedIndent=false;
        	boolean pushedFormat=false;
        	boolean pushedWrapInfo=false;
         WrapOptions options=mPrinter.getExpressionWrapOptions();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // AS3_ex.g3:2061:2: (U= USE N= NAMESPACE qualifiedIdentifier (C= COMMA qualifiedIdentifier )* semic )
            // AS3_ex.g3:2062:6: U= USE N= NAMESPACE qualifiedIdentifier (C= COMMA qualifiedIdentifier )* semic
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              pushedFormat=pushFormatType(options, true);
                  	 pushedWrapInfo=pushWrapInfo(options, true);
                  	
            }
            if ( state.backtracking==0 ) {
              mPrinter.markDeclEqualsContextChange();
            }
            U=(Token)match(input,USE,FOLLOW_USE_in_useNamespaceDirective8698); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            U_tree = (Object)adaptor.create(U);
            adaptor.addChild(root_0, U_tree);
            }
            if ( state.backtracking==0 ) {
              emit(U);
            }
            N=(Token)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_useNamespaceDirective8707); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            N_tree = (Object)adaptor.create(N);
            adaptor.addChild(root_0, N_tree);
            }
            if ( state.backtracking==0 ) {
              emit(N);
            }
            pushFollow(FOLLOW_qualifiedIdentifier_in_useNamespaceDirective8714);
            qualifiedIdentifier167=qualifiedIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentifier167.getTree());
            // AS3_ex.g3:2068:22: (C= COMMA qualifiedIdentifier )*
            loop87:
            do {
                int alt87=2;
                int LA87_0 = input.LA(1);

                if ( (LA87_0==COMMA) ) {
                    alt87=1;
                }


                switch (alt87) {
            	case 1 :
            	    // AS3_ex.g3:2068:23: C= COMMA qualifiedIdentifier
            	    {
            	    C=(Token)match(input,COMMA,FOLLOW_COMMA_in_useNamespaceDirective8719); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    C_tree = (Object)adaptor.create(C);
            	    adaptor.addChild(root_0, C_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      pushedIndent=emitCommaWithSpacingAndCRs(options, C, pushedIndent, -1, ASPrettyPrinter.Break_SubType_Other);
            	    }
            	    pushFollow(FOLLOW_qualifiedIdentifier_in_useNamespaceDirective8723);
            	    qualifiedIdentifier168=qualifiedIdentifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentifier168.getTree());

            	    }
            	    break;

            	default :
            	    break loop87;
                }
            } while (true);

            pushFollow(FOLLOW_semic_in_useNamespaceDirective8727);
            semic169=semic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, semic169.getTree());
            if ( state.backtracking==0 ) {

                  	if (pushedWrapInfo)
                  		mPrinter.popWrapContext();
                      if (pushedIndent)
              	    	popIndent();
              	    if (pushedFormat)
              	    {
              	    	mPrinter.popFormatMode();
              	    }
              	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, useNamespaceDirective_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "useNamespaceDirective"

    public static class namespaceDirective_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "namespaceDirective"
    // AS3_ex.g3:2084:1: namespaceDirective : N= NAMESPACE qualifiedIdentifier (A= ASSIGN stringLiteral )? semic ;
    public final AS3_exParser.namespaceDirective_return namespaceDirective() throws RecognitionException {
        AS3_exParser.namespaceDirective_return retval = new AS3_exParser.namespaceDirective_return();
        retval.start = input.LT(1);
        int namespaceDirective_StartIndex = input.index();
        Object root_0 = null;

        Token N=null;
        Token A=null;
        AS3_exParser.qualifiedIdentifier_return qualifiedIdentifier170 = null;

        AS3_exParser.stringLiteral_return stringLiteral171 = null;

        AS3_exParser.semic_return semic172 = null;


        Object N_tree=null;
        Object A_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // AS3_ex.g3:2085:5: (N= NAMESPACE qualifiedIdentifier (A= ASSIGN stringLiteral )? semic )
            // AS3_ex.g3:2086:5: N= NAMESPACE qualifiedIdentifier (A= ASSIGN stringLiteral )? semic
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              mPrinter.markDeclEqualsContextChange();
            }
            N=(Token)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_namespaceDirective8766); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            N_tree = (Object)adaptor.create(N);
            adaptor.addChild(root_0, N_tree);
            }
            if ( state.backtracking==0 ) {
              emit(N);
            }
            if ( state.backtracking==0 ) {
              pushExpressionIndent();
            }
            pushFollow(FOLLOW_qualifiedIdentifier_in_namespaceDirective8777);
            qualifiedIdentifier170=qualifiedIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentifier170.getTree());
            // AS3_ex.g3:2088:25: (A= ASSIGN stringLiteral )?
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==ASSIGN) ) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    // AS3_ex.g3:2088:27: A= ASSIGN stringLiteral
                    {
                    A=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_namespaceDirective8783); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    A_tree = (Object)adaptor.create(A);
                    adaptor.addChild(root_0, A_tree);
                    }
                    if ( state.backtracking==0 ) {
                      insertWS(mPrinter.getSpacesAroundAssignment());emit(A);insertWS(mPrinter.getSpacesAroundAssignment());
                    }
                    pushFollow(FOLLOW_stringLiteral_in_namespaceDirective8788);
                    stringLiteral171=stringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringLiteral171.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_semic_in_namespaceDirective8793);
            semic172=semic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, semic172.getTree());
            if ( state.backtracking==0 ) {
              popIndent();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, namespaceDirective_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "namespaceDirective"

    public static class tryStatement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "tryStatement"
    // AS3_ex.g3:2096:1: tryStatement : T= TRY blockStatement ( ( catchClause )+ finallyClause | ( catchClause )+ | finallyClause ) ;
    public final AS3_exParser.tryStatement_return tryStatement() throws RecognitionException {
        AS3_exParser.tryStatement_return retval = new AS3_exParser.tryStatement_return();
        retval.start = input.LT(1);
        int tryStatement_StartIndex = input.index();
        Object root_0 = null;

        Token T=null;
        AS3_exParser.blockStatement_return blockStatement173 = null;

        AS3_exParser.catchClause_return catchClause174 = null;

        AS3_exParser.finallyClause_return finallyClause175 = null;

        AS3_exParser.catchClause_return catchClause176 = null;

        AS3_exParser.finallyClause_return finallyClause177 = null;


        Object T_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // AS3_ex.g3:2097:5: (T= TRY blockStatement ( ( catchClause )+ finallyClause | ( catchClause )+ | finallyClause ) )
            // AS3_ex.g3:2098:5: T= TRY blockStatement ( ( catchClause )+ finallyClause | ( catchClause )+ | finallyClause )
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              mPrinter.markDeclEqualsContextChange();
            }
            if ( state.backtracking==0 ) {
              insertStatementCR();
            }
            T=(Token)match(input,TRY,FOLLOW_TRY_in_tryStatement8832); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            T_tree = (Object)adaptor.create(T);
            adaptor.addChild(root_0, T_tree);
            }
            if ( state.backtracking==0 ) {
              emit(T);
            }
            if ( state.backtracking==0 ) {
              pushIndent(false);mCodeBlockStack.add(ASPrettyPrinter.BraceContext_try_code);
            }
            pushFollow(FOLLOW_blockStatement_in_tryStatement8838);
            blockStatement173=blockStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, blockStatement173.getTree());
            if ( state.backtracking==0 ) {
              popIndent();popBlockStack();
            }
            // AS3_ex.g3:2100:9: ( ( catchClause )+ finallyClause | ( catchClause )+ | finallyClause )
            int alt91=3;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==CATCH) ) {
                int LA91_1 = input.LA(2);

                if ( (synpred205_AS3_ex()) ) {
                    alt91=1;
                }
                else if ( (synpred207_AS3_ex()) ) {
                    alt91=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 91, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA91_0==FINALLY) ) {
                alt91=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 91, 0, input);

                throw nvae;
            }
            switch (alt91) {
                case 1 :
                    // AS3_ex.g3:2100:11: ( catchClause )+ finallyClause
                    {
                    // AS3_ex.g3:2100:11: ( catchClause )+
                    int cnt89=0;
                    loop89:
                    do {
                        int alt89=2;
                        int LA89_0 = input.LA(1);

                        if ( (LA89_0==CATCH) ) {
                            alt89=1;
                        }


                        switch (alt89) {
                    	case 1 :
                    	    // AS3_ex.g3:0:0: catchClause
                    	    {
                    	    pushFollow(FOLLOW_catchClause_in_tryStatement8852);
                    	    catchClause174=catchClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, catchClause174.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt89 >= 1 ) break loop89;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(89, input);
                                throw eee;
                        }
                        cnt89++;
                    } while (true);

                    pushFollow(FOLLOW_finallyClause_in_tryStatement8855);
                    finallyClause175=finallyClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, finallyClause175.getTree());

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:2101:11: ( catchClause )+
                    {
                    // AS3_ex.g3:2101:11: ( catchClause )+
                    int cnt90=0;
                    loop90:
                    do {
                        int alt90=2;
                        int LA90_0 = input.LA(1);

                        if ( (LA90_0==CATCH) ) {
                            int LA90_2 = input.LA(2);

                            if ( (LA90_2==LPAREN) ) {
                                alt90=1;
                            }


                        }


                        switch (alt90) {
                    	case 1 :
                    	    // AS3_ex.g3:0:0: catchClause
                    	    {
                    	    pushFollow(FOLLOW_catchClause_in_tryStatement8867);
                    	    catchClause176=catchClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, catchClause176.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt90 >= 1 ) break loop90;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(90, input);
                                throw eee;
                        }
                        cnt90++;
                    } while (true);


                    }
                    break;
                case 3 :
                    // AS3_ex.g3:2102:11: finallyClause
                    {
                    pushFollow(FOLLOW_finallyClause_in_tryStatement8880);
                    finallyClause177=finallyClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, finallyClause177.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, tryStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "tryStatement"

    public static class catchClause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catchClause"
    // AS3_ex.g3:2106:1: catchClause : C= CATCH L= LPAREN variableIdentifierDecl R= RPAREN blockStatement ;
    public final AS3_exParser.catchClause_return catchClause() throws RecognitionException {
        AS3_exParser.catchClause_return retval = new AS3_exParser.catchClause_return();
        retval.start = input.LT(1);
        int catchClause_StartIndex = input.index();
        Object root_0 = null;

        Token C=null;
        Token L=null;
        Token R=null;
        AS3_exParser.variableIdentifierDecl_return variableIdentifierDecl178 = null;

        AS3_exParser.blockStatement_return blockStatement179 = null;


        Object C_tree=null;
        Object L_tree=null;
        Object R_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // AS3_ex.g3:2107:2: (C= CATCH L= LPAREN variableIdentifierDecl R= RPAREN blockStatement )
            // AS3_ex.g3:2107:4: C= CATCH L= LPAREN variableIdentifierDecl R= RPAREN blockStatement
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              if (mPrinter.isCRBeforeCatch()) insertCR(false);
            }
            if ( state.backtracking==0 ) {
              insertWS(1);
            }
            C=(Token)match(input,CATCH,FOLLOW_CATCH_in_catchClause8909); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            C_tree = (Object)adaptor.create(C);
            adaptor.addChild(root_0, C_tree);
            }
            if ( state.backtracking==0 ) {
              emit(C);insertWS(mPrinter.getSpacesBetweenControlKeywordsAndParens());
            }
            if ( state.backtracking==0 ) {
              pushIndent(false);
            }
            L=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_catchClause8916); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            L_tree = (Object)adaptor.create(L);
            adaptor.addChild(root_0, L_tree);
            }
            if ( state.backtracking==0 ) {
              emit(L);insertWS(mPrinter.getAdvancedSpacesInsideParensInParameterLists());
            }
            pushFollow(FOLLOW_variableIdentifierDecl_in_catchClause8920);
            variableIdentifierDecl178=variableIdentifierDecl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variableIdentifierDecl178.getTree());
            R=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_catchClause8924); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            R_tree = (Object)adaptor.create(R);
            adaptor.addChild(root_0, R_tree);
            }
            if ( state.backtracking==0 ) {
              insertWS(mPrinter.getAdvancedSpacesInsideParensInParameterLists());emit(R);mCodeBlockStack.add(ASPrettyPrinter.BraceContext_catch_code);
            }
            pushFollow(FOLLOW_blockStatement_in_catchClause8928);
            blockStatement179=blockStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, blockStatement179.getTree());
            if ( state.backtracking==0 ) {
              popIndent();popBlockStack();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, catchClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "catchClause"

    public static class finallyClause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "finallyClause"
    // AS3_ex.g3:2110:1: finallyClause : F= FINALLY blockStatement ;
    public final AS3_exParser.finallyClause_return finallyClause() throws RecognitionException {
        AS3_exParser.finallyClause_return retval = new AS3_exParser.finallyClause_return();
        retval.start = input.LT(1);
        int finallyClause_StartIndex = input.index();
        Object root_0 = null;

        Token F=null;
        AS3_exParser.blockStatement_return blockStatement180 = null;


        Object F_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // AS3_ex.g3:2111:5: (F= FINALLY blockStatement )
            // AS3_ex.g3:2111:7: F= FINALLY blockStatement
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              if (mPrinter.isCRBeforeCatch()) insertCR(false);
            }
            if ( state.backtracking==0 ) {
              insertWS(1);
            }
            F=(Token)match(input,FINALLY,FOLLOW_FINALLY_in_finallyClause8952); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            F_tree = (Object)adaptor.create(F);
            adaptor.addChild(root_0, F_tree);
            }
            if ( state.backtracking==0 ) {
              emit(F);
            }
            if ( state.backtracking==0 ) {
              pushIndent(false);mCodeBlockStack.add(ASPrettyPrinter.BraceContext_finally_code);
            }
            pushFollow(FOLLOW_blockStatement_in_finallyClause8957);
            blockStatement180=blockStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, blockStatement180.getTree());
            if ( state.backtracking==0 ) {
              popIndent();popBlockStack();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, finallyClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "finallyClause"

    public static class labelledStatement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "labelledStatement"
    // AS3_ex.g3:2118:1: labelledStatement : I= IDENTIFIER C= COLON statement ;
    public final AS3_exParser.labelledStatement_return labelledStatement() throws RecognitionException {
        AS3_exParser.labelledStatement_return retval = new AS3_exParser.labelledStatement_return();
        retval.start = input.LT(1);
        int labelledStatement_StartIndex = input.index();
        Object root_0 = null;

        Token I=null;
        Token C=null;
        AS3_exParser.statement_return statement181 = null;


        Object I_tree=null;
        Object C_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // AS3_ex.g3:2119:5: (I= IDENTIFIER C= COLON statement )
            // AS3_ex.g3:2119:8: I= IDENTIFIER C= COLON statement
            {
            root_0 = (Object)adaptor.nil();

            I=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_labelledStatement8983); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            I_tree = (Object)adaptor.create(I);
            adaptor.addChild(root_0, I_tree);
            }
            if ( state.backtracking==0 ) {
              emit(I);
            }
            if ( state.backtracking==0 ) {
              pushLabeledIndent();
            }
            C=(Token)match(input,COLON,FOLLOW_COLON_in_labelledStatement8996); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            C_tree = (Object)adaptor.create(C);
            adaptor.addChild(root_0, C_tree);
            }
            if ( state.backtracking==0 ) {

                  		emit(C);
                  		insertWS(mPrinter.getSpacesAfterLabel());
                  	
            }
            pushFollow(FOLLOW_statement_in_labelledStatement9012);
            statement181=statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statement181.getTree());
            if ( state.backtracking==0 ) {
              popIndent();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, labelledStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "labelledStatement"

    public static class switchStatement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchStatement"
    // AS3_ex.g3:2133:1: switchStatement : S= SWITCH parExpression L= LCURLY ( switchBlockStatementGroup )* R= RCURLY ;
    public final AS3_exParser.switchStatement_return switchStatement() throws RecognitionException {
        AS3_exParser.switchStatement_return retval = new AS3_exParser.switchStatement_return();
        retval.start = input.LT(1);
        int switchStatement_StartIndex = input.index();
        Object root_0 = null;

        Token S=null;
        Token L=null;
        Token R=null;
        AS3_exParser.parExpression_return parExpression182 = null;

        AS3_exParser.switchBlockStatementGroup_return switchBlockStatementGroup183 = null;


        Object S_tree=null;
        Object L_tree=null;
        Object R_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // AS3_ex.g3:2134:5: (S= SWITCH parExpression L= LCURLY ( switchBlockStatementGroup )* R= RCURLY )
            // AS3_ex.g3:2135:5: S= SWITCH parExpression L= LCURLY ( switchBlockStatementGroup )* R= RCURLY
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              mPrinter.markDeclEqualsContextChange();
            }
            if ( state.backtracking==0 ) {
              insertLines(mPrinter.getBlankLinesBeforeControlStatement());
            }
            if ( state.backtracking==0 ) {
              insertStatementCR();
            }
            S=(Token)match(input,SWITCH,FOLLOW_SWITCH_in_switchStatement9064); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            S_tree = (Object)adaptor.create(S);
            adaptor.addChild(root_0, S_tree);
            }
            if ( state.backtracking==0 ) {
              emit(S);
                   pushIndent(false);
                   insertWS(mPrinter.getSpacesBetweenControlKeywordsAndParens());
            }
            if ( state.backtracking==0 ) {
              pushExpressionIndent();
            }
            pushFollow(FOLLOW_parExpression_in_switchStatement9075);
            parExpression182=parExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, parExpression182.getTree());
            if ( state.backtracking==0 ) {
              popIndent();
            }
            L=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_switchStatement9087); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            L_tree = (Object)adaptor.create(L);
            adaptor.addChild(root_0, L_tree);
            }
            if ( state.backtracking==0 ) {

                  		mCodeBlockStack.add(ASPrettyPrinter.BraceContext_controlStatement_code);
                  		leftCurlyNewlineHandler(false);
                  		emit(L);
                  		if (mPrinter.isIndentSwitchCases())
                  			pushIndent(true);
                  		else
                  			mPrinter.pushRelativeIndent(ASPrettyPrinter.BRACE_INDENT, -1);
                  		{mPrinter.addDeclEqualsBlock();}
                  		mCodeBlockStack.add(ASPrettyPrinter.BraceContext_block_code);
                  	
            }
            // AS3_ex.g3:2153:6: ( switchBlockStatementGroup )*
            loop92:
            do {
                int alt92=2;
                int LA92_0 = input.LA(1);

                if ( (LA92_0==CASE||LA92_0==DEFAULT) ) {
                    alt92=1;
                }


                switch (alt92) {
            	case 1 :
            	    // AS3_ex.g3:0:0: switchBlockStatementGroup
            	    {
            	    pushFollow(FOLLOW_switchBlockStatementGroup_in_switchStatement9103);
            	    switchBlockStatementGroup183=switchBlockStatementGroup();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, switchBlockStatementGroup183.getTree());

            	    }
            	    break;

            	default :
            	    break loop92;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              popIndent();
            }
            if ( state.backtracking==0 ) {
              mPrinter.popDeclEqualsBlock();
            }
            R=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_switchStatement9123); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            R_tree = (Object)adaptor.create(R);
            adaptor.addChild(root_0, R_tree);
            }
            if ( state.backtracking==0 ) {
              insertCR(false);emit(R);popIndent();popBlockStack();popBlockStack();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, switchStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchStatement"

    public static class switchBlockStatementGroup_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchBlockStatementGroup"
    // AS3_ex.g3:2162:1: switchBlockStatementGroup : switchLabel ( statement )* ( breakStatement )? ;
    public final AS3_exParser.switchBlockStatementGroup_return switchBlockStatementGroup() throws RecognitionException {
        AS3_exParser.switchBlockStatementGroup_return retval = new AS3_exParser.switchBlockStatementGroup_return();
        retval.start = input.LT(1);
        int switchBlockStatementGroup_StartIndex = input.index();
        Object root_0 = null;

        AS3_exParser.switchLabel_return switchLabel184 = null;

        AS3_exParser.statement_return statement185 = null;

        AS3_exParser.breakStatement_return breakStatement186 = null;




            int statementCount=0;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // AS3_ex.g3:2167:5: ( switchLabel ( statement )* ( breakStatement )? )
            // AS3_ex.g3:2167:9: switchLabel ( statement )* ( breakStatement )?
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              insertCR(false);
            }
            pushFollow(FOLLOW_switchLabel_in_switchBlockStatementGroup9161);
            switchLabel184=switchLabel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, switchLabel184.getTree());
            if ( state.backtracking==0 ) {
              pushIndent(false);
            }
            if ( state.backtracking==0 ) {
              mPrinter.addOpenBrace(input, ASPrettyPrinter.BraceAdd_Switch);statementCount=mStatementCount;
            }
            // AS3_ex.g3:2169:6: ( statement )*
            loop93:
            do {
                int alt93=2;
                alt93 = dfa93.predict(input);
                switch (alt93) {
            	case 1 :
            	    // AS3_ex.g3:0:0: statement
            	    {
            	    pushFollow(FOLLOW_statement_in_switchBlockStatementGroup9178);
            	    statement185=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement185.getTree());

            	    }
            	    break;

            	default :
            	    break loop93;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              mPrinter.addCloseBrace(input.LT(1), ASPrettyPrinter.BraceAdd_Switch, mStatementCount-statementCount);
            }
            if ( state.backtracking==0 ) {
              popIndent();
            }
            if ( state.backtracking==0 ) {
              insertCR(false);
            }
            // AS3_ex.g3:2171:39: ( breakStatement )?
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==BREAK) ) {
                alt94=1;
            }
            switch (alt94) {
                case 1 :
                    // AS3_ex.g3:0:0: breakStatement
                    {
                    pushFollow(FOLLOW_breakStatement_in_switchBlockStatementGroup9201);
                    breakStatement186=breakStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, breakStatement186.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, switchBlockStatementGroup_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchBlockStatementGroup"

    public static class switchLabel_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchLabel"
    // AS3_ex.g3:2174:1: switchLabel : (C= CASE expression O= COLON | D= DEFAULT C= COLON );
    public final AS3_exParser.switchLabel_return switchLabel() throws RecognitionException {
        AS3_exParser.switchLabel_return retval = new AS3_exParser.switchLabel_return();
        retval.start = input.LT(1);
        int switchLabel_StartIndex = input.index();
        Object root_0 = null;

        Token C=null;
        Token O=null;
        Token D=null;
        AS3_exParser.expression_return expression187 = null;


        Object C_tree=null;
        Object O_tree=null;
        Object D_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // AS3_ex.g3:2175:5: (C= CASE expression O= COLON | D= DEFAULT C= COLON )
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==CASE) ) {
                alt95=1;
            }
            else if ( (LA95_0==DEFAULT) ) {
                alt95=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 95, 0, input);

                throw nvae;
            }
            switch (alt95) {
                case 1 :
                    // AS3_ex.g3:2175:9: C= CASE expression O= COLON
                    {
                    root_0 = (Object)adaptor.nil();

                    C=(Token)match(input,CASE,FOLLOW_CASE_in_switchLabel9227); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    C_tree = (Object)adaptor.create(C);
                    adaptor.addChild(root_0, C_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(C);
                    }
                    if ( state.backtracking==0 ) {
                      insertWS(1);
                    }
                    pushFollow(FOLLOW_expression_in_switchLabel9233);
                    expression187=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression187.getTree());
                    O=(Token)match(input,COLON,FOLLOW_COLON_in_switchLabel9237); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    O_tree = (Object)adaptor.create(O);
                    adaptor.addChild(root_0, O_tree);
                    }
                    if ( state.backtracking==0 ) {

                          	emit(O);
                          	insertWS(mPrinter.getSpacesAfterLabel());
                          	
                    }

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:2180:9: D= DEFAULT C= COLON
                    {
                    root_0 = (Object)adaptor.nil();

                    D=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_switchLabel9258); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    D_tree = (Object)adaptor.create(D);
                    adaptor.addChild(root_0, D_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(D);
                    }
                    C=(Token)match(input,COLON,FOLLOW_COLON_in_switchLabel9264); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    C_tree = (Object)adaptor.create(C);
                    adaptor.addChild(root_0, C_tree);
                    }
                    if ( state.backtracking==0 ) {

                          			emit(C);
                          			insertWS(mPrinter.getSpacesAfterLabel());
                          		
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, switchLabel_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchLabel"

    public static class withStatement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "withStatement"
    // AS3_ex.g3:2191:1: withStatement : W= WITH L= LPAREN expression R= RPAREN statement ;
    public final AS3_exParser.withStatement_return withStatement() throws RecognitionException {
        AS3_exParser.withStatement_return retval = new AS3_exParser.withStatement_return();
        retval.start = input.LT(1);
        int withStatement_StartIndex = input.index();
        Object root_0 = null;

        Token W=null;
        Token L=null;
        Token R=null;
        AS3_exParser.expression_return expression188 = null;

        AS3_exParser.statement_return statement189 = null;


        Object W_tree=null;
        Object L_tree=null;
        Object R_tree=null;


        	int statementStartInOutput=(-1);
        	int statementEndInOutput=(-1);
            int statementCount=0;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // AS3_ex.g3:2198:5: (W= WITH L= LPAREN expression R= RPAREN statement )
            // AS3_ex.g3:2199:5: W= WITH L= LPAREN expression R= RPAREN statement
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              mPrinter.markDeclEqualsContextChange();
            }
            W=(Token)match(input,WITH,FOLLOW_WITH_in_withStatement9312); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            W_tree = (Object)adaptor.create(W);
            adaptor.addChild(root_0, W_tree);
            }
            if ( state.backtracking==0 ) {
              emit(W);statementStartInOutput=mPrinter.getCurrentOutputLength();insertWS(mPrinter.getSpacesBetweenControlKeywordsAndParens());
            }
            if ( state.backtracking==0 ) {
              pushExpressionIndent();
            }
            L=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_withStatement9320); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            L_tree = (Object)adaptor.create(L);
            adaptor.addChild(root_0, L_tree);
            }
            if ( state.backtracking==0 ) {
              emit(L);insertWS(mPrinter.getAdvancedSpacesInsideParensInOtherPlaces());
            }
            pushFollow(FOLLOW_expression_in_withStatement9325);
            expression188=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression188.getTree());
            R=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_withStatement9330); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            R_tree = (Object)adaptor.create(R);
            adaptor.addChild(root_0, R_tree);
            }
            if ( state.backtracking==0 ) {
              insertWS(mPrinter.getAdvancedSpacesInsideParensInOtherPlaces());emit(R);statementEndInOutput=mPrinter.getCurrentOutputLength();
            }
            if ( state.backtracking==0 ) {
              popIndent();
            }
            if ( state.backtracking==0 ) {
              pushIndent(false);
            }
            if ( state.backtracking==0 ) {
              mPrinter.addOpenBrace(input, ASPrettyPrinter.BraceAdd_Loop);
                    	 mPrinter.captureStatementStart(W, statementStartInOutput);
                  	 mPrinter.captureStatementEnd(R, statementEndInOutput);
                  	 statementCount=mStatementCount;
                  	
            }
            pushFollow(FOLLOW_statement_in_withStatement9351);
            statement189=statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statement189.getTree());
            if ( state.backtracking==0 ) {
              mPrinter.addCloseBrace(input.LT(1), ASPrettyPrinter.BraceAdd_Loop, mStatementCount-statementCount);
            }
            if ( state.backtracking==0 ) {
              popIndent();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, withStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "withStatement"

    public static class returnStatement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "returnStatement"
    // AS3_ex.g3:2215:1: returnStatement : R= RETURN ( expression )? semic ;
    public final AS3_exParser.returnStatement_return returnStatement() throws RecognitionException {
        AS3_exParser.returnStatement_return retval = new AS3_exParser.returnStatement_return();
        retval.start = input.LT(1);
        int returnStatement_StartIndex = input.index();
        Object root_0 = null;

        Token R=null;
        AS3_exParser.expression_return expression190 = null;

        AS3_exParser.semic_return semic191 = null;


        Object R_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // AS3_ex.g3:2216:5: (R= RETURN ( expression )? semic )
            // AS3_ex.g3:2216:9: R= RETURN ( expression )? semic
            {
            root_0 = (Object)adaptor.nil();

            R=(Token)match(input,RETURN,FOLLOW_RETURN_in_returnStatement9395); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            R_tree = (Object)adaptor.create(R);
            adaptor.addChild(root_0, R_tree);
            }
            if ( state.backtracking==0 ) {

                  		if (mPrinter.statementNeedsCR(R))
              	    		insertStatementCR();
              	    	else
              	    		insertWS(1);
                  	
            }
            if ( state.backtracking==0 ) {
              emit(R);
            }
            // AS3_ex.g3:2223:18: ( expression )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( ((LA96_0>=AS && LA96_0<=STATIC)||LA96_0==LCURLY||LA96_0==LPAREN||LA96_0==LBRACK||LA96_0==LT||(LA96_0>=PLUS && LA96_0<=STAR)||(LA96_0>=INC && LA96_0<=DEC)||(LA96_0>=NOT && LA96_0<=INV)||(LA96_0>=XML_AT && LA96_0<=XML_LS_STD)||(LA96_0>=SINGLE_QUOTE_LITERAL && LA96_0<=DOUBLE_QUOTE_LITERAL)||LA96_0==REGULAR_EXPR_LITERAL||LA96_0==HEX_NUMBER_LITERAL||LA96_0==DEC_NUMBER_LITERAL||LA96_0==IDENTIFIER||(LA96_0>=XML_COMMENT && LA96_0<=XML_PI)) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // AS3_ex.g3:2223:20: expression
                    {
                    if ( state.backtracking==0 ) {
                      insertWS(1);
                    }
                    pushFollow(FOLLOW_expression_in_returnStatement9416);
                    expression190=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression190.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_semic_in_returnStatement9420);
            semic191=semic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, semic191.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, returnStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "returnStatement"

    public static class breakStatement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "breakStatement"
    // AS3_ex.g3:2231:1: breakStatement : B= BREAK (I= IDENTIFIER )? semic ;
    public final AS3_exParser.breakStatement_return breakStatement() throws RecognitionException {
        AS3_exParser.breakStatement_return retval = new AS3_exParser.breakStatement_return();
        retval.start = input.LT(1);
        int breakStatement_StartIndex = input.index();
        Object root_0 = null;

        Token B=null;
        Token I=null;
        AS3_exParser.semic_return semic192 = null;


        Object B_tree=null;
        Object I_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // AS3_ex.g3:2232:5: (B= BREAK (I= IDENTIFIER )? semic )
            // AS3_ex.g3:2232:9: B= BREAK (I= IDENTIFIER )? semic
            {
            root_0 = (Object)adaptor.nil();

            B=(Token)match(input,BREAK,FOLLOW_BREAK_in_breakStatement9447); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            B_tree = (Object)adaptor.create(B);
            adaptor.addChild(root_0, B_tree);
            }
            if ( state.backtracking==0 ) {

                  		if (mPrinter.statementNeedsCR(B))
                  			insertStatementCR();
              	    	else
              	    		insertWS(1);
                  	
            }
            if ( state.backtracking==0 ) {
              emit(B);
            }
            // AS3_ex.g3:2239:18: (I= IDENTIFIER )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==IDENTIFIER) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // AS3_ex.g3:2239:19: I= IDENTIFIER
                    {
                    I=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_breakStatement9470); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    I_tree = (Object)adaptor.create(I);
                    adaptor.addChild(root_0, I_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(I);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_semic_in_breakStatement9475);
            semic192=semic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, semic192.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, breakStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "breakStatement"

    public static class continueStatement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "continueStatement"
    // AS3_ex.g3:2247:1: continueStatement : C= CONTINUE (I= IDENTIFIER )? semic ;
    public final AS3_exParser.continueStatement_return continueStatement() throws RecognitionException {
        AS3_exParser.continueStatement_return retval = new AS3_exParser.continueStatement_return();
        retval.start = input.LT(1);
        int continueStatement_StartIndex = input.index();
        Object root_0 = null;

        Token C=null;
        Token I=null;
        AS3_exParser.semic_return semic193 = null;


        Object C_tree=null;
        Object I_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // AS3_ex.g3:2248:5: (C= CONTINUE (I= IDENTIFIER )? semic )
            // AS3_ex.g3:2248:9: C= CONTINUE (I= IDENTIFIER )? semic
            {
            root_0 = (Object)adaptor.nil();

            C=(Token)match(input,CONTINUE,FOLLOW_CONTINUE_in_continueStatement9501); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            C_tree = (Object)adaptor.create(C);
            adaptor.addChild(root_0, C_tree);
            }
            if ( state.backtracking==0 ) {

                  		if (mPrinter.statementNeedsCR(C))
                  			insertStatementCR();
              	    	else
              	    		insertWS(1);
                  	
            }
            if ( state.backtracking==0 ) {
              emit(C);
            }
            // AS3_ex.g3:2255:18: (I= IDENTIFIER )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==IDENTIFIER) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // AS3_ex.g3:2255:19: I= IDENTIFIER
                    {
                    I=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_continueStatement9521); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    I_tree = (Object)adaptor.create(I);
                    adaptor.addChild(root_0, I_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(I);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_semic_in_continueStatement9526);
            semic193=semic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, semic193.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, continueStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "continueStatement"

    public static class forStatement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forStatement"
    // AS3_ex.g3:2263:1: forStatement : F= FOR L= LPAREN forControl R= RPAREN statement ;
    public final AS3_exParser.forStatement_return forStatement() throws RecognitionException {
        AS3_exParser.forStatement_return retval = new AS3_exParser.forStatement_return();
        retval.start = input.LT(1);
        int forStatement_StartIndex = input.index();
        Object root_0 = null;

        Token F=null;
        Token L=null;
        Token R=null;
        AS3_exParser.forControl_return forControl194 = null;

        AS3_exParser.statement_return statement195 = null;


        Object F_tree=null;
        Object L_tree=null;
        Object R_tree=null;


        	int statementStartInOutput=(-1);
        	int statementEndInOutput=(-1);
            int statementCount=0;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // AS3_ex.g3:2270:5: (F= FOR L= LPAREN forControl R= RPAREN statement )
            // AS3_ex.g3:2271:6: F= FOR L= LPAREN forControl R= RPAREN statement
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              mPrinter.markDeclEqualsContextChange();
            }
            F=(Token)match(input,FOR,FOLLOW_FOR_in_forStatement9564); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            F_tree = (Object)adaptor.create(F);
            adaptor.addChild(root_0, F_tree);
            }
            if ( state.backtracking==0 ) {
              emit(F);statementStartInOutput=mPrinter.getCurrentOutputLength();insertWS(mPrinter.getSpacesBetweenControlKeywordsAndParens());
            }
            if ( state.backtracking==0 ) {
              pushExpressionIndent();
            }
            L=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_forStatement9572); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            L_tree = (Object)adaptor.create(L);
            adaptor.addChild(root_0, L_tree);
            }
            if ( state.backtracking==0 ) {
              emit(L);insertWS(mPrinter.getAdvancedSpacesInsideParensInOtherPlaces());
            }
            pushFollow(FOLLOW_forControl_in_forStatement9576);
            forControl194=forControl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, forControl194.getTree());
            R=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_forStatement9580); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            R_tree = (Object)adaptor.create(R);
            adaptor.addChild(root_0, R_tree);
            }
            if ( state.backtracking==0 ) {
              insertWS(mPrinter.getAdvancedSpacesInsideParensInOtherPlaces());emit(R);
            }
            if ( state.backtracking==0 ) {
              popIndent();
            }
            if ( state.backtracking==0 ) {
              pushIndent(false);statementEndInOutput=mPrinter.getCurrentOutputLength();
            }
            if ( state.backtracking==0 ) {
              mPrinter.addOpenBrace(input, ASPrettyPrinter.BraceAdd_Loop);
                  	 mPrinter.captureStatementStart(F, statementStartInOutput);
                  	 mPrinter.captureStatementEnd(R, statementEndInOutput);
                  	 statementCount=mStatementCount;
                  	
            }
            pushFollow(FOLLOW_statement_in_forStatement9599);
            statement195=statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statement195.getTree());
            if ( state.backtracking==0 ) {
              mPrinter.addCloseBrace(input.LT(1), ASPrettyPrinter.BraceAdd_Loop, mStatementCount-statementCount);
            }
            if ( state.backtracking==0 ) {
              popIndent();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, forStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forStatement"

    public static class forInStatement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forInStatement"
    // AS3_ex.g3:2283:1: forInStatement : F= FOR L= LPAREN forInControl R= RPAREN statement ;
    public final AS3_exParser.forInStatement_return forInStatement() throws RecognitionException {
        AS3_exParser.forInStatement_return retval = new AS3_exParser.forInStatement_return();
        retval.start = input.LT(1);
        int forInStatement_StartIndex = input.index();
        Object root_0 = null;

        Token F=null;
        Token L=null;
        Token R=null;
        AS3_exParser.forInControl_return forInControl196 = null;

        AS3_exParser.statement_return statement197 = null;


        Object F_tree=null;
        Object L_tree=null;
        Object R_tree=null;


        	int statementStartInOutput=(-1);
        	int statementEndInOutput=(-1);
            int statementCount=0;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // AS3_ex.g3:2290:5: (F= FOR L= LPAREN forInControl R= RPAREN statement )
            // AS3_ex.g3:2291:6: F= FOR L= LPAREN forInControl R= RPAREN statement
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              mPrinter.markDeclEqualsContextChange();
            }
            F=(Token)match(input,FOR,FOLLOW_FOR_in_forInStatement9655); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            F_tree = (Object)adaptor.create(F);
            adaptor.addChild(root_0, F_tree);
            }
            if ( state.backtracking==0 ) {
              emit(F);statementStartInOutput=mPrinter.getCurrentOutputLength();insertWS(mPrinter.getSpacesBetweenControlKeywordsAndParens());
            }
            if ( state.backtracking==0 ) {
              pushExpressionIndent();
            }
            L=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_forInStatement9663); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            L_tree = (Object)adaptor.create(L);
            adaptor.addChild(root_0, L_tree);
            }
            if ( state.backtracking==0 ) {
              emit(L);insertWS(mPrinter.getAdvancedSpacesInsideParensInOtherPlaces());
            }
            pushFollow(FOLLOW_forInControl_in_forInStatement9667);
            forInControl196=forInControl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, forInControl196.getTree());
            R=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_forInStatement9671); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            R_tree = (Object)adaptor.create(R);
            adaptor.addChild(root_0, R_tree);
            }
            if ( state.backtracking==0 ) {
              insertWS(mPrinter.getAdvancedSpacesInsideParensInOtherPlaces());emit(R);
            }
            if ( state.backtracking==0 ) {
              popIndent();
            }
            if ( state.backtracking==0 ) {
              pushIndent(false);statementEndInOutput=mPrinter.getCurrentOutputLength();
            }
            if ( state.backtracking==0 ) {
              mPrinter.addOpenBrace(input, ASPrettyPrinter.BraceAdd_Loop);
                  	 mPrinter.captureStatementStart(F, statementStartInOutput);
                  	 mPrinter.captureStatementEnd(R, statementEndInOutput);
                  	 statementCount=mStatementCount;
                  	
            }
            pushFollow(FOLLOW_statement_in_forInStatement9692);
            statement197=statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statement197.getTree());
            if ( state.backtracking==0 ) {
              mPrinter.addCloseBrace(input.LT(1), ASPrettyPrinter.BraceAdd_Loop, mStatementCount-statementCount);
            }
            if ( state.backtracking==0 ) {
              popIndent();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, forInStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forInStatement"

    public static class forEachInStatement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forEachInStatement"
    // AS3_ex.g3:2303:1: forEachInStatement : F= FOR E= EACH L= LPAREN forInControl R= RPAREN statement ;
    public final AS3_exParser.forEachInStatement_return forEachInStatement() throws RecognitionException {
        AS3_exParser.forEachInStatement_return retval = new AS3_exParser.forEachInStatement_return();
        retval.start = input.LT(1);
        int forEachInStatement_StartIndex = input.index();
        Object root_0 = null;

        Token F=null;
        Token E=null;
        Token L=null;
        Token R=null;
        AS3_exParser.forInControl_return forInControl198 = null;

        AS3_exParser.statement_return statement199 = null;


        Object F_tree=null;
        Object E_tree=null;
        Object L_tree=null;
        Object R_tree=null;


        	int statementStartInOutput=(-1);
        	int statementEndInOutput=(-1);
            int statementCount=0;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // AS3_ex.g3:2310:5: (F= FOR E= EACH L= LPAREN forInControl R= RPAREN statement )
            // AS3_ex.g3:2311:5: F= FOR E= EACH L= LPAREN forInControl R= RPAREN statement
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              mPrinter.markDeclEqualsContextChange();
            }
            F=(Token)match(input,FOR,FOLLOW_FOR_in_forEachInStatement9754); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            F_tree = (Object)adaptor.create(F);
            adaptor.addChild(root_0, F_tree);
            }
            if ( state.backtracking==0 ) {
              emit(F);statementStartInOutput=mPrinter.getCurrentOutputLength();
            }
            if ( state.backtracking==0 ) {
              pushExpressionIndent();
            }
            E=(Token)match(input,EACH,FOLLOW_EACH_in_forEachInStatement9772); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            E_tree = (Object)adaptor.create(E);
            adaptor.addChild(root_0, E_tree);
            }
            if ( state.backtracking==0 ) {
              emit(E);insertWS(mPrinter.getSpacesBetweenControlKeywordsAndParens());
            }
            L=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_forEachInStatement9780); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            L_tree = (Object)adaptor.create(L);
            adaptor.addChild(root_0, L_tree);
            }
            if ( state.backtracking==0 ) {
              emit(L);insertWS(mPrinter.getAdvancedSpacesInsideParensInOtherPlaces());
            }
            pushFollow(FOLLOW_forInControl_in_forEachInStatement9784);
            forInControl198=forInControl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, forInControl198.getTree());
            R=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_forEachInStatement9788); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            R_tree = (Object)adaptor.create(R);
            adaptor.addChild(root_0, R_tree);
            }
            if ( state.backtracking==0 ) {
              insertWS(mPrinter.getAdvancedSpacesInsideParensInOtherPlaces());emit(R);statementEndInOutput=mPrinter.getCurrentOutputLength();
            }
            if ( state.backtracking==0 ) {
              popIndent();
            }
            if ( state.backtracking==0 ) {
              pushIndent(false);
            }
            if ( state.backtracking==0 ) {
              mPrinter.addOpenBrace(input, ASPrettyPrinter.BraceAdd_Loop);
                   mPrinter.captureStatementStart(F, statementStartInOutput);
                   mPrinter.captureStatementEnd(R, statementEndInOutput);
                   statementCount=mStatementCount;
                 	
            }
            pushFollow(FOLLOW_statement_in_forEachInStatement9805);
            statement199=statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statement199.getTree());
            if ( state.backtracking==0 ) {
              mPrinter.addCloseBrace(input.LT(1), ASPrettyPrinter.BraceAdd_Loop, mStatementCount-statementCount);
            }
            if ( state.backtracking==0 ) {
              popIndent();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, forEachInStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forEachInStatement"

    public static class forControl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forControl"
    // AS3_ex.g3:2325:1: forControl options {k=3; } : ( forInit )? semic ( expression )? semic ( forUpdate )? ;
    public final AS3_exParser.forControl_return forControl() throws RecognitionException {
        AS3_exParser.forControl_return retval = new AS3_exParser.forControl_return();
        retval.start = input.LT(1);
        int forControl_StartIndex = input.index();
        Object root_0 = null;

        AS3_exParser.forInit_return forInit200 = null;

        AS3_exParser.semic_return semic201 = null;

        AS3_exParser.expression_return expression202 = null;

        AS3_exParser.semic_return semic203 = null;

        AS3_exParser.forUpdate_return forUpdate204 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // AS3_ex.g3:2327:5: ( ( forInit )? semic ( expression )? semic ( forUpdate )? )
            // AS3_ex.g3:2327:9: ( forInit )? semic ( expression )? semic ( forUpdate )?
            {
            root_0 = (Object)adaptor.nil();

            // AS3_ex.g3:2327:9: ( forInit )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( ((LA99_0>=AS && LA99_0<=STATIC)||LA99_0==LCURLY||LA99_0==LPAREN||LA99_0==LBRACK||LA99_0==LT||(LA99_0>=PLUS && LA99_0<=STAR)||(LA99_0>=INC && LA99_0<=DEC)||(LA99_0>=NOT && LA99_0<=INV)||(LA99_0>=XML_AT && LA99_0<=XML_LS_STD)||(LA99_0>=SINGLE_QUOTE_LITERAL && LA99_0<=DOUBLE_QUOTE_LITERAL)||LA99_0==REGULAR_EXPR_LITERAL||LA99_0==HEX_NUMBER_LITERAL||LA99_0==DEC_NUMBER_LITERAL||LA99_0==IDENTIFIER||(LA99_0>=XML_COMMENT && LA99_0<=XML_PI)) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    // AS3_ex.g3:0:0: forInit
                    {
                    pushFollow(FOLLOW_forInit_in_forControl9847);
                    forInit200=forInit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forInit200.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              insertWS(mPrinter.getSpacesBeforeComma());
            }
            pushFollow(FOLLOW_semic_in_forControl9852);
            semic201=semic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, semic201.getTree());
            if ( state.backtracking==0 ) {
              insertWS(mPrinter.getSpacesAfterComma());
            }
            // AS3_ex.g3:2327:114: ( expression )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( ((LA100_0>=AS && LA100_0<=STATIC)||LA100_0==LCURLY||LA100_0==LPAREN||LA100_0==LBRACK||LA100_0==LT||(LA100_0>=PLUS && LA100_0<=STAR)||(LA100_0>=INC && LA100_0<=DEC)||(LA100_0>=NOT && LA100_0<=INV)||(LA100_0>=XML_AT && LA100_0<=XML_LS_STD)||(LA100_0>=SINGLE_QUOTE_LITERAL && LA100_0<=DOUBLE_QUOTE_LITERAL)||LA100_0==REGULAR_EXPR_LITERAL||LA100_0==HEX_NUMBER_LITERAL||LA100_0==DEC_NUMBER_LITERAL||LA100_0==IDENTIFIER||(LA100_0>=XML_COMMENT && LA100_0<=XML_PI)) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // AS3_ex.g3:0:0: expression
                    {
                    pushFollow(FOLLOW_expression_in_forControl9857);
                    expression202=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression202.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              insertWS(mPrinter.getSpacesBeforeComma());
            }
            pushFollow(FOLLOW_semic_in_forControl9861);
            semic203=semic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, semic203.getTree());
            if ( state.backtracking==0 ) {
              insertWS(mPrinter.getSpacesAfterComma());
            }
            // AS3_ex.g3:2327:220: ( forUpdate )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( ((LA101_0>=AS && LA101_0<=STATIC)||LA101_0==LCURLY||LA101_0==LPAREN||LA101_0==LBRACK||LA101_0==LT||(LA101_0>=PLUS && LA101_0<=STAR)||(LA101_0>=INC && LA101_0<=DEC)||(LA101_0>=NOT && LA101_0<=INV)||(LA101_0>=XML_AT && LA101_0<=XML_LS_STD)||(LA101_0>=SINGLE_QUOTE_LITERAL && LA101_0<=DOUBLE_QUOTE_LITERAL)||LA101_0==REGULAR_EXPR_LITERAL||LA101_0==HEX_NUMBER_LITERAL||LA101_0==DEC_NUMBER_LITERAL||LA101_0==IDENTIFIER||(LA101_0>=XML_COMMENT && LA101_0<=XML_PI)) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    // AS3_ex.g3:0:0: forUpdate
                    {
                    pushFollow(FOLLOW_forUpdate_in_forControl9865);
                    forUpdate204=forUpdate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forUpdate204.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, forControl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forControl"

    public static class forInControl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forInControl"
    // AS3_ex.g3:2330:1: forInControl options {k=3; } : forInDecl I= IN expression ;
    public final AS3_exParser.forInControl_return forInControl() throws RecognitionException {
        AS3_exParser.forInControl_return retval = new AS3_exParser.forInControl_return();
        retval.start = input.LT(1);
        int forInControl_StartIndex = input.index();
        Object root_0 = null;

        Token I=null;
        AS3_exParser.forInDecl_return forInDecl205 = null;

        AS3_exParser.expression_return expression206 = null;


        Object I_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // AS3_ex.g3:2332:5: ( forInDecl I= IN expression )
            // AS3_ex.g3:2332:9: forInDecl I= IN expression
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_forInDecl_in_forInControl9893);
            forInDecl205=forInDecl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, forInDecl205.getTree());
            I=(Token)match(input,IN,FOLLOW_IN_in_forInControl9897); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            I_tree = (Object)adaptor.create(I);
            adaptor.addChild(root_0, I_tree);
            }
            if ( state.backtracking==0 ) {
              insertWS(1);emit(I);
            }
            pushFollow(FOLLOW_expression_in_forInControl9901);
            expression206=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression206.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, forInControl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forInControl"

    public static class forInDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forInDecl"
    // AS3_ex.g3:2335:1: forInDecl : ( leftHandSideExpression | V= VAR variableDeclarationNoIn );
    public final AS3_exParser.forInDecl_return forInDecl() throws RecognitionException {
        AS3_exParser.forInDecl_return retval = new AS3_exParser.forInDecl_return();
        retval.start = input.LT(1);
        int forInDecl_StartIndex = input.index();
        Object root_0 = null;

        Token V=null;
        AS3_exParser.leftHandSideExpression_return leftHandSideExpression207 = null;

        AS3_exParser.variableDeclarationNoIn_return variableDeclarationNoIn208 = null;


        Object V_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // AS3_ex.g3:2336:5: ( leftHandSideExpression | V= VAR variableDeclarationNoIn )
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( ((LA102_0>=AS && LA102_0<=USE)||(LA102_0>=VOID && LA102_0<=STATIC)||LA102_0==LCURLY||LA102_0==LPAREN||LA102_0==LBRACK||LA102_0==LT||LA102_0==STAR||(LA102_0>=XML_AT && LA102_0<=XML_LS_STD)||(LA102_0>=SINGLE_QUOTE_LITERAL && LA102_0<=DOUBLE_QUOTE_LITERAL)||LA102_0==REGULAR_EXPR_LITERAL||LA102_0==HEX_NUMBER_LITERAL||LA102_0==DEC_NUMBER_LITERAL||LA102_0==IDENTIFIER||(LA102_0>=XML_COMMENT && LA102_0<=XML_PI)) ) {
                alt102=1;
            }
            else if ( (LA102_0==VAR) ) {
                int LA102_2 = input.LA(2);

                if ( (LA102_2==NATIVE||LA102_2==TO||(LA102_2>=EACH && LA102_2<=NAMESPACE)||(LA102_2>=DYNAMIC && LA102_2<=STATIC)||LA102_2==IDENTIFIER) ) {
                    alt102=2;
                }
                else if ( (LA102_2==DOT||LA102_2==SUB||LA102_2==COLON||LA102_2==XML_NS_OP) ) {
                    alt102=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 102, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 102, 0, input);

                throw nvae;
            }
            switch (alt102) {
                case 1 :
                    // AS3_ex.g3:2336:9: leftHandSideExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_leftHandSideExpression_in_forInDecl9920);
                    leftHandSideExpression207=leftHandSideExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, leftHandSideExpression207.getTree());

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:2337:9: V= VAR variableDeclarationNoIn
                    {
                    root_0 = (Object)adaptor.nil();

                    V=(Token)match(input,VAR,FOLLOW_VAR_in_forInDecl9932); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    V_tree = (Object)adaptor.create(V);
                    adaptor.addChild(root_0, V_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(V);
                    }
                    pushFollow(FOLLOW_variableDeclarationNoIn_in_forInDecl9936);
                    variableDeclarationNoIn208=variableDeclarationNoIn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclarationNoIn208.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, forInDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forInDecl"

    public static class forInit_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forInit"
    // AS3_ex.g3:2340:1: forInit : (V= VAR variableDeclarationNoInList | expressionNoIn );
    public final AS3_exParser.forInit_return forInit() throws RecognitionException {
        AS3_exParser.forInit_return retval = new AS3_exParser.forInit_return();
        retval.start = input.LT(1);
        int forInit_StartIndex = input.index();
        Object root_0 = null;

        Token V=null;
        AS3_exParser.variableDeclarationNoInList_return variableDeclarationNoInList209 = null;

        AS3_exParser.expressionNoIn_return expressionNoIn210 = null;


        Object V_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // AS3_ex.g3:2341:5: (V= VAR variableDeclarationNoInList | expressionNoIn )
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==VAR) ) {
                int LA103_1 = input.LA(2);

                if ( (LA103_1==NATIVE||LA103_1==TO||(LA103_1>=EACH && LA103_1<=NAMESPACE)||(LA103_1>=DYNAMIC && LA103_1<=STATIC)||LA103_1==IDENTIFIER) ) {
                    alt103=1;
                }
                else if ( (LA103_1==DOT||LA103_1==SUB||LA103_1==COLON||LA103_1==XML_NS_OP) ) {
                    alt103=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 103, 1, input);

                    throw nvae;
                }
            }
            else if ( ((LA103_0>=AS && LA103_0<=USE)||(LA103_0>=VOID && LA103_0<=STATIC)||LA103_0==LCURLY||LA103_0==LPAREN||LA103_0==LBRACK||LA103_0==LT||(LA103_0>=PLUS && LA103_0<=STAR)||(LA103_0>=INC && LA103_0<=DEC)||(LA103_0>=NOT && LA103_0<=INV)||(LA103_0>=XML_AT && LA103_0<=XML_LS_STD)||(LA103_0>=SINGLE_QUOTE_LITERAL && LA103_0<=DOUBLE_QUOTE_LITERAL)||LA103_0==REGULAR_EXPR_LITERAL||LA103_0==HEX_NUMBER_LITERAL||LA103_0==DEC_NUMBER_LITERAL||LA103_0==IDENTIFIER||(LA103_0>=XML_COMMENT && LA103_0<=XML_PI)) ) {
                alt103=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 103, 0, input);

                throw nvae;
            }
            switch (alt103) {
                case 1 :
                    // AS3_ex.g3:2341:9: V= VAR variableDeclarationNoInList
                    {
                    root_0 = (Object)adaptor.nil();

                    V=(Token)match(input,VAR,FOLLOW_VAR_in_forInit9957); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    V_tree = (Object)adaptor.create(V);
                    adaptor.addChild(root_0, V_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(V);
                    }
                    pushFollow(FOLLOW_variableDeclarationNoInList_in_forInit9960);
                    variableDeclarationNoInList209=variableDeclarationNoInList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclarationNoInList209.getTree());

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:2342:9: expressionNoIn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_expressionNoIn_in_forInit9970);
                    expressionNoIn210=expressionNoIn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionNoIn210.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, forInit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forInit"

    public static class forUpdate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forUpdate"
    // AS3_ex.g3:2345:1: forUpdate : expression ;
    public final AS3_exParser.forUpdate_return forUpdate() throws RecognitionException {
        AS3_exParser.forUpdate_return retval = new AS3_exParser.forUpdate_return();
        retval.start = input.LT(1);
        int forUpdate_StartIndex = input.index();
        Object root_0 = null;

        AS3_exParser.expression_return expression211 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // AS3_ex.g3:2346:5: ( expression )
            // AS3_ex.g3:2346:9: expression
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expression_in_forUpdate9989);
            expression211=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression211.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, forUpdate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forUpdate"

    public static class doWhileStatement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "doWhileStatement"
    // AS3_ex.g3:2354:1: doWhileStatement : D= DO statement W= WHILE parExpression semic (S= SEMI )? ;
    public final AS3_exParser.doWhileStatement_return doWhileStatement() throws RecognitionException {
        AS3_exParser.doWhileStatement_return retval = new AS3_exParser.doWhileStatement_return();
        retval.start = input.LT(1);
        int doWhileStatement_StartIndex = input.index();
        Object root_0 = null;

        Token D=null;
        Token W=null;
        Token S=null;
        AS3_exParser.statement_return statement212 = null;

        AS3_exParser.parExpression_return parExpression213 = null;

        AS3_exParser.semic_return semic214 = null;


        Object D_tree=null;
        Object W_tree=null;
        Object S_tree=null;


        	int statementCount=0;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // AS3_ex.g3:2359:5: (D= DO statement W= WHILE parExpression semic (S= SEMI )? )
            // AS3_ex.g3:2360:5: D= DO statement W= WHILE parExpression semic (S= SEMI )?
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              mPrinter.markDeclEqualsContextChange();
            }
            D=(Token)match(input,DO,FOLLOW_DO_in_doWhileStatement10031); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            D_tree = (Object)adaptor.create(D);
            adaptor.addChild(root_0, D_tree);
            }
            if ( state.backtracking==0 ) {
              emit(D);
            }
            if ( state.backtracking==0 ) {
              pushIndent(false);
            }
            if ( state.backtracking==0 ) {
              mPrinter.addOpenBrace(input, ASPrettyPrinter.BraceAdd_Loop);statementCount=mStatementCount;
            }
            pushFollow(FOLLOW_statement_in_doWhileStatement10051);
            statement212=statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statement212.getTree());
            if ( state.backtracking==0 ) {
              mPrinter.addCloseBrace(input.LT(1), ASPrettyPrinter.BraceAdd_Loop, mStatementCount-statementCount);
            }
            if ( state.backtracking==0 ) {
              popIndent();
            }
            if ( state.backtracking==0 ) {
              insertWS(1);
            }
            if ( state.backtracking==0 ) {

                        if (mPrinter.isCRBeforeWhile() || !mPrinter.didLastStatementHaveBraces()) //add CR if explictly asked for or if there were no statement braces   
                            insertCR(false);
                  	
            }
            W=(Token)match(input,WHILE,FOLLOW_WHILE_in_doWhileStatement10090); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            W_tree = (Object)adaptor.create(W);
            adaptor.addChild(root_0, W_tree);
            }
            if ( state.backtracking==0 ) {
              emit(W);{pushExpressionIndent();}insertWS(mPrinter.getSpacesBetweenControlKeywordsAndParens());
            }
            pushFollow(FOLLOW_parExpression_in_doWhileStatement10094);
            parExpression213=parExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, parExpression213.getTree());
            pushFollow(FOLLOW_semic_in_doWhileStatement10096);
            semic214=semic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, semic214.getTree());
            // AS3_ex.g3:2370:133: (S= SEMI )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==SEMI) ) {
                int LA104_1 = input.LA(2);

                if ( (synpred220_AS3_ex()) ) {
                    alt104=1;
                }
            }
            switch (alt104) {
                case 1 :
                    // AS3_ex.g3:2370:134: S= SEMI
                    {
                    S=(Token)match(input,SEMI,FOLLOW_SEMI_in_doWhileStatement10101); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    S_tree = (Object)adaptor.create(S);
                    adaptor.addChild(root_0, S_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(S);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              popIndent();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, doWhileStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "doWhileStatement"

    public static class whileStatement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "whileStatement"
    // AS3_ex.g3:2377:1: whileStatement : W= WHILE parExpression statement ;
    public final AS3_exParser.whileStatement_return whileStatement() throws RecognitionException {
        AS3_exParser.whileStatement_return retval = new AS3_exParser.whileStatement_return();
        retval.start = input.LT(1);
        int whileStatement_StartIndex = input.index();
        Object root_0 = null;

        Token W=null;
        AS3_exParser.parExpression_return parExpression215 = null;

        AS3_exParser.statement_return statement216 = null;


        Object W_tree=null;


        	int statementStartInOutput=(-1);
        	int statementEndInOutput=(-1);
        	int statementCount=0;
        	Token endToken=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // AS3_ex.g3:2385:5: (W= WHILE parExpression statement )
            // AS3_ex.g3:2386:8: W= WHILE parExpression statement
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              mPrinter.markDeclEqualsContextChange();
            }
            W=(Token)match(input,WHILE,FOLLOW_WHILE_in_whileStatement10150); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            W_tree = (Object)adaptor.create(W);
            adaptor.addChild(root_0, W_tree);
            }
            if ( state.backtracking==0 ) {
              emit(W);statementStartInOutput=mPrinter.getCurrentOutputLength();insertWS(mPrinter.getSpacesBetweenControlKeywordsAndParens());
            }
            if ( state.backtracking==0 ) {
              pushExpressionIndent();
            }
            pushFollow(FOLLOW_parExpression_in_whileStatement10155);
            parExpression215=parExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, parExpression215.getTree());
            if ( state.backtracking==0 ) {
              endToken=input.LT(-1);statementEndInOutput=mPrinter.getCurrentOutputLength();popIndent();
            }
            if ( state.backtracking==0 ) {
              pushIndent(false);
            }
            if ( state.backtracking==0 ) {
              mPrinter.addOpenBrace(input, ASPrettyPrinter.BraceAdd_Loop);
                  	 mPrinter.captureStatementStart(W, statementStartInOutput);
                  	 mPrinter.captureStatementEnd(endToken, statementEndInOutput);
                  	 statementCount=mStatementCount;
                  	
            }
            pushFollow(FOLLOW_statement_in_whileStatement10175);
            statement216=statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statement216.getTree());
            if ( state.backtracking==0 ) {
              mPrinter.addCloseBrace(input.LT(1), ASPrettyPrinter.BraceAdd_Loop, mStatementCount-statementCount);
            }
            if ( state.backtracking==0 ) {
              popIndent();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, whileStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "whileStatement"

    public static class ifStatement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ifStatement"
    // AS3_ex.g3:2404:1: ifStatement : I= IF parExpression statement ( options {k=1; } : E= ELSE statement )? ;
    public final AS3_exParser.ifStatement_return ifStatement() throws RecognitionException {
        AS3_exParser.ifStatement_return retval = new AS3_exParser.ifStatement_return();
        retval.start = input.LT(1);
        int ifStatement_StartIndex = input.index();
        Object root_0 = null;

        Token I=null;
        Token E=null;
        AS3_exParser.parExpression_return parExpression217 = null;

        AS3_exParser.statement_return statement218 = null;

        AS3_exParser.statement_return statement219 = null;


        Object I_tree=null;
        Object E_tree=null;


           Token tok=null;
           boolean ifOnSameLine=false;
           boolean wasBlock=false;
           boolean needCloseBrace=false;
           int statementStartInOutput=(-1);
           int statementEndInOutput=(-1);
           int statementCount=0;
           Token endToken=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // AS3_ex.g3:2416:5: (I= IF parExpression statement ( options {k=1; } : E= ELSE statement )? )
            // AS3_ex.g3:2417:6: I= IF parExpression statement ( options {k=1; } : E= ELSE statement )?
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              mPrinter.markDeclEqualsContextChange();
            }
            if ( state.backtracking==0 ) {

                         tok=mPrinter.getLastToken(); 
                         //if the previous token was not an else, then insert a CR.  Also if it is an 'else' but the setting says to put the 'if' on a new line
                         if (!mPrinter.isKeepElseIfOnSameLine() || (tok==null) || !tok.getText().equals("else"))
                         {
                         		insertStatementCR();
                         }

                         if (tok!=null && tok.getText().equals("else"))
                         {
                         		mPrinter.setElseIfState();
                         }
                      
            }
            I=(Token)match(input,IF,FOLLOW_IF_in_ifStatement10262); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            I_tree = (Object)adaptor.create(I);
            adaptor.addChild(root_0, I_tree);
            }
            if ( state.backtracking==0 ) {

                            emit(I);
                            statementStartInOutput=mPrinter.getCurrentOutputLength();
                            ifOnSameLine=mPrinter.getElseIfNeedToLoseIndent();
                            if (ifOnSameLine)
                                popIndent();
                            insertWS(mPrinter.getSpacesBetweenControlKeywordsAndParens());
                       
            }
            if ( state.backtracking==0 ) {
              pushExpressionIndent();
            }
            pushFollow(FOLLOW_parExpression_in_ifStatement10297);
            parExpression217=parExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, parExpression217.getTree());
            if ( state.backtracking==0 ) {
              endToken=input.LT(-1);statementEndInOutput=mPrinter.getCurrentOutputLength();
            }
            if ( state.backtracking==0 ) {
              popIndent();
            }
            if ( state.backtracking==0 ) {
              pushIndent(false);
            }
            if ( state.backtracking==0 ) {
              addIfElseBlockTracker();setBlockFlag(false);clearBlockFlag();
            }
            if ( state.backtracking==0 ) {
              mCodeBlockStack.add(ASPrettyPrinter.BraceContext_controlStatement_code);
            }
            if ( state.backtracking==0 ) {
              mPrinter.addOpenBrace(input, ASPrettyPrinter.BraceAdd_Conditional);
                  	  mPrinter.captureStatementStart(I, statementStartInOutput);
                  	  mPrinter.captureStatementEnd(endToken, statementEndInOutput);
                  	  statementCount=mStatementCount;
              		 
            }
            pushFollow(FOLLOW_statement_in_ifStatement10369);
            statement218=statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statement218.getTree());
            if ( state.backtracking==0 ) {
              mPrinter.addCloseBrace(input.LT(1), ASPrettyPrinter.BraceAdd_Conditional, mStatementCount-statementCount);
            }
            if ( state.backtracking==0 ) {
              popBlockStack();
            }
            if ( state.backtracking==0 ) {
              wasBlock=isBlockFlag();popIfElseBlockTracker();
            }
            if ( state.backtracking==0 ) {
              popIndent();
            }
            // AS3_ex.g3:2458:10: ( options {k=1; } : E= ELSE statement )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==ELSE) ) {
                int LA105_2 = input.LA(2);

                if ( (synpred221_AS3_ex()) ) {
                    alt105=1;
                }
            }
            switch (alt105) {
                case 1 :
                    // AS3_ex.g3:2458:26: E= ELSE statement
                    {
                    E=(Token)match(input,ELSE,FOLLOW_ELSE_in_ifStatement10446); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    E_tree = (Object)adaptor.create(E);
                    adaptor.addChild(root_0, E_tree);
                    }
                    if ( state.backtracking==0 ) {

                      	          Token tempTok=mPrinter.getLastToken();
                      	          if (mPrinter.isCRBeforeElse() || !wasBlock)//tempTok==null || !tempTok.getText().equals("}")) 
                      	              insertCR(false);
                      	         
                    }
                    if ( state.backtracking==0 ) {
                      insertWS(1);
                    }
                    if ( state.backtracking==0 ) {
                      emit(E);
                    }
                    if ( state.backtracking==0 ) {
                      pushIndent(false);
                    }
                    if ( state.backtracking==0 ) {
                      mCodeBlockStack.add(ASPrettyPrinter.BraceContext_controlStatement_code);
                    }
                    if ( state.backtracking==0 ) {
                      needCloseBrace=mPrinter.addOpenBraceForElse(input);statementCount=mStatementCount;
                    }
                    if ( state.backtracking==0 ) {
                      mPrinter.inCondition();
                    }
                    pushFollow(FOLLOW_statement_in_ifStatement10534);
                    statement219=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement219.getTree());
                    if ( state.backtracking==0 ) {
                      if (needCloseBrace)
                      	         	mPrinter.addCloseBrace(input.LT(1), ASPrettyPrinter.BraceAdd_Conditional, mStatementCount-statementCount);
                    }
                    if ( state.backtracking==0 ) {
                      popBlockStack();
                    }
                    if ( state.backtracking==0 ) {
                      popIndent();
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              if (ifOnSameLine)
                          	pushIndent(false);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, ifStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ifStatement"

    public static class emptyStatement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "emptyStatement"
    // AS3_ex.g3:2483:1: emptyStatement : S= SEMI ;
    public final AS3_exParser.emptyStatement_return emptyStatement() throws RecognitionException {
        AS3_exParser.emptyStatement_return retval = new AS3_exParser.emptyStatement_return();
        retval.start = input.LT(1);
        int emptyStatement_StartIndex = input.index();
        Object root_0 = null;

        Token S=null;

        Object S_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // AS3_ex.g3:2484:5: (S= SEMI )
            // AS3_ex.g3:2484:11: S= SEMI
            {
            root_0 = (Object)adaptor.nil();

            S=(Token)match(input,SEMI,FOLLOW_SEMI_in_emptyStatement10617); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            S_tree = (Object)adaptor.create(S);
            adaptor.addChild(root_0, S_tree);
            }
            if ( state.backtracking==0 ) {
              emit(S);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, emptyStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "emptyStatement"

    public static class variableStatement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableStatement"
    // AS3_ex.g3:2492:1: variableStatement : (I= IDENTIFIER )? V= VAR variableDeclaration (C= COMMA variableDeclaration )* semic ;
    public final AS3_exParser.variableStatement_return variableStatement() throws RecognitionException {
        AS3_exParser.variableStatement_return retval = new AS3_exParser.variableStatement_return();
        retval.start = input.LT(1);
        int variableStatement_StartIndex = input.index();
        Object root_0 = null;

        Token I=null;
        Token V=null;
        Token C=null;
        AS3_exParser.variableDeclaration_return variableDeclaration220 = null;

        AS3_exParser.variableDeclaration_return variableDeclaration221 = null;

        AS3_exParser.semic_return semic222 = null;


        Object I_tree=null;
        Object V_tree=null;
        Object C_tree=null;


        	WrapOptions options=mPrinter.getExpressionWrapOptions();
        	boolean pushedFormat=false;
        	boolean pushedWrapInfo=false;
        	boolean pushedIndent=false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // AS3_ex.g3:2499:5: ( (I= IDENTIFIER )? V= VAR variableDeclaration (C= COMMA variableDeclaration )* semic )
            // AS3_ex.g3:2500:6: (I= IDENTIFIER )? V= VAR variableDeclaration (C= COMMA variableDeclaration )* semic
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              pushedFormat=pushFormatType(options, true);
                  	 pushedWrapInfo=pushWrapInfo(options, true);
                  	
            }
            // AS3_ex.g3:2503:9: (I= IDENTIFIER )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==IDENTIFIER) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    // AS3_ex.g3:2503:10: I= IDENTIFIER
                    {
                    I=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_variableStatement10664); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    I_tree = (Object)adaptor.create(I);
                    adaptor.addChild(root_0, I_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(I);
                    }

                    }
                    break;

            }

            V=(Token)match(input,VAR,FOLLOW_VAR_in_variableStatement10672); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            V_tree = (Object)adaptor.create(V);
            adaptor.addChild(root_0, V_tree);
            }
            if ( state.backtracking==0 ) {
              emit(V);mInEqualAlignDecl=true;
            }
            pushFollow(FOLLOW_variableDeclaration_in_variableStatement10676);
            variableDeclaration220=variableDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclaration220.getTree());
            if ( state.backtracking==0 ) {
              mInEqualAlignDecl=false;
            }
            // AS3_ex.g3:2503:125: (C= COMMA variableDeclaration )*
            loop107:
            do {
                int alt107=2;
                int LA107_0 = input.LA(1);

                if ( (LA107_0==COMMA) ) {
                    alt107=1;
                }


                switch (alt107) {
            	case 1 :
            	    // AS3_ex.g3:2503:127: C= COMMA variableDeclaration
            	    {
            	    C=(Token)match(input,COMMA,FOLLOW_COMMA_in_variableStatement10684); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    C_tree = (Object)adaptor.create(C);
            	    adaptor.addChild(root_0, C_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      pushedIndent=emitCommaWithSpacingAndCRs(options, C, pushedIndent, -1, ASPrettyPrinter.Break_SubType_Other);
            	    }
            	    pushFollow(FOLLOW_variableDeclaration_in_variableStatement10688);
            	    variableDeclaration221=variableDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclaration221.getTree());

            	    }
            	    break;

            	default :
            	    break loop107;
                }
            } while (true);

            pushFollow(FOLLOW_semic_in_variableStatement10693);
            semic222=semic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, semic222.getTree());
            if ( state.backtracking==0 ) {

                  		if (pushedIndent)
                  			popIndent();
              	   	    if (pushedFormat)
              	   	    {
              	   	    	mPrinter.popFormatMode();
              	   	    }
              	   	    if (pushedWrapInfo)
              	   	    	mPrinter.popWrapContext();
                  	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, variableStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableStatement"

    public static class variableDeclarationList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclarationList"
    // AS3_ex.g3:2516:1: variableDeclarationList : variableDeclaration (C= COMMA variableDeclaration )* ;
    public final AS3_exParser.variableDeclarationList_return variableDeclarationList() throws RecognitionException {
        AS3_exParser.variableDeclarationList_return retval = new AS3_exParser.variableDeclarationList_return();
        retval.start = input.LT(1);
        int variableDeclarationList_StartIndex = input.index();
        Object root_0 = null;

        Token C=null;
        AS3_exParser.variableDeclaration_return variableDeclaration223 = null;

        AS3_exParser.variableDeclaration_return variableDeclaration224 = null;


        Object C_tree=null;


        	WrapOptions options=mPrinter.getExpressionWrapOptions();
        	boolean pushedFormat=false;
        	boolean pushedWrapInfo=false;
        	boolean pushedIndent=false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // AS3_ex.g3:2523:5: ( variableDeclaration (C= COMMA variableDeclaration )* )
            // AS3_ex.g3:2524:6: variableDeclaration (C= COMMA variableDeclaration )*
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              pushedFormat=pushFormatType(options, true);
                  	 pushedWrapInfo=pushWrapInfo(options, true);
                  	
            }
            pushFollow(FOLLOW_variableDeclaration_in_variableDeclarationList10742);
            variableDeclaration223=variableDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclaration223.getTree());
            // AS3_ex.g3:2527:30: (C= COMMA variableDeclaration )*
            loop108:
            do {
                int alt108=2;
                int LA108_0 = input.LA(1);

                if ( (LA108_0==COMMA) ) {
                    alt108=1;
                }


                switch (alt108) {
            	case 1 :
            	    // AS3_ex.g3:2527:33: C= COMMA variableDeclaration
            	    {
            	    C=(Token)match(input,COMMA,FOLLOW_COMMA_in_variableDeclarationList10749); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    C_tree = (Object)adaptor.create(C);
            	    adaptor.addChild(root_0, C_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      pushedIndent=emitCommaWithSpacingAndCRs(options, C, pushedIndent, -1, ASPrettyPrinter.Break_SubType_Other);
            	    }
            	    pushFollow(FOLLOW_variableDeclaration_in_variableDeclarationList10753);
            	    variableDeclaration224=variableDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclaration224.getTree());

            	    }
            	    break;

            	default :
            	    break loop108;
                }
            } while (true);

            if ( state.backtracking==0 ) {

                  		if (pushedIndent)
                  			popIndent();
              	   	    if (pushedFormat)
              	   	    {
              	   	    	mPrinter.popFormatMode();
              	   	    }
              	   	    if (pushedWrapInfo)
              	   	    	mPrinter.popWrapContext();
                  	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, variableDeclarationList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclarationList"

    public static class variableDeclarationNoInList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclarationNoInList"
    // AS3_ex.g3:2540:1: variableDeclarationNoInList : variableDeclarationNoIn (C= COMMA variableDeclarationNoIn )* ;
    public final AS3_exParser.variableDeclarationNoInList_return variableDeclarationNoInList() throws RecognitionException {
        AS3_exParser.variableDeclarationNoInList_return retval = new AS3_exParser.variableDeclarationNoInList_return();
        retval.start = input.LT(1);
        int variableDeclarationNoInList_StartIndex = input.index();
        Object root_0 = null;

        Token C=null;
        AS3_exParser.variableDeclarationNoIn_return variableDeclarationNoIn225 = null;

        AS3_exParser.variableDeclarationNoIn_return variableDeclarationNoIn226 = null;


        Object C_tree=null;


        	WrapOptions options=mPrinter.getExpressionWrapOptions();
        	boolean pushedFormat=false;
        	boolean pushedWrapInfo=false;
        	boolean pushedIndent=false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // AS3_ex.g3:2547:5: ( variableDeclarationNoIn (C= COMMA variableDeclarationNoIn )* )
            // AS3_ex.g3:2548:6: variableDeclarationNoIn (C= COMMA variableDeclarationNoIn )*
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              pushedFormat=pushFormatType(options, true);
                  	 pushedWrapInfo=pushWrapInfo(options, true);
                  	
            }
            pushFollow(FOLLOW_variableDeclarationNoIn_in_variableDeclarationNoInList10802);
            variableDeclarationNoIn225=variableDeclarationNoIn();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclarationNoIn225.getTree());
            // AS3_ex.g3:2551:33: (C= COMMA variableDeclarationNoIn )*
            loop109:
            do {
                int alt109=2;
                int LA109_0 = input.LA(1);

                if ( (LA109_0==COMMA) ) {
                    alt109=1;
                }


                switch (alt109) {
            	case 1 :
            	    // AS3_ex.g3:2551:35: C= COMMA variableDeclarationNoIn
            	    {
            	    C=(Token)match(input,COMMA,FOLLOW_COMMA_in_variableDeclarationNoInList10808); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    C_tree = (Object)adaptor.create(C);
            	    adaptor.addChild(root_0, C_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      pushedIndent=emitCommaWithSpacingAndCRs(options, C, pushedIndent, -1, ASPrettyPrinter.Break_SubType_Other);
            	    }
            	    pushFollow(FOLLOW_variableDeclarationNoIn_in_variableDeclarationNoInList10812);
            	    variableDeclarationNoIn226=variableDeclarationNoIn();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclarationNoIn226.getTree());

            	    }
            	    break;

            	default :
            	    break loop109;
                }
            } while (true);

            if ( state.backtracking==0 ) {

                  		if (pushedIndent)
                  			popIndent();
              	   	    if (pushedFormat)
              	   	    {
              	   	    	mPrinter.popFormatMode();
              	   	    }
              	   	    if (pushedWrapInfo)
              	   	    	mPrinter.popWrapContext();
                  	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, variableDeclarationNoInList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclarationNoInList"

    public static class variableDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclaration"
    // AS3_ex.g3:2564:1: variableDeclaration : variableIdentifierDecl (A= ASSIGN assignmentExpression )? ;
    public final AS3_exParser.variableDeclaration_return variableDeclaration() throws RecognitionException {
        AS3_exParser.variableDeclaration_return retval = new AS3_exParser.variableDeclaration_return();
        retval.start = input.LT(1);
        int variableDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token A=null;
        AS3_exParser.variableIdentifierDecl_return variableIdentifierDecl227 = null;

        AS3_exParser.assignmentExpression_return assignmentExpression228 = null;


        Object A_tree=null;


        	WrapOptions options=mPrinter.getExpressionWrapOptions();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // AS3_ex.g3:2568:5: ( variableIdentifierDecl (A= ASSIGN assignmentExpression )? )
            // AS3_ex.g3:2568:9: variableIdentifierDecl (A= ASSIGN assignmentExpression )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_variableIdentifierDecl_in_variableDeclaration10849);
            variableIdentifierDecl227=variableIdentifierDecl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variableIdentifierDecl227.getTree());
            // AS3_ex.g3:2568:32: (A= ASSIGN assignmentExpression )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==ASSIGN) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // AS3_ex.g3:2568:34: A= ASSIGN assignmentExpression
                    {
                    A=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_variableDeclaration10855); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    A_tree = (Object)adaptor.create(A);
                    adaptor.addChild(root_0, A_tree);
                    }
                    if ( state.backtracking==0 ) {

                          		insertVariableDeclAssignmentWhitespace(A, true);
                          		{if (mInEqualAlignDecl) mPrinter.augmentDeclEqualPosition();}
                          		wrapEmit(A, mInFunctionParameterDecl ? ASPrettyPrinter.Break_Parameter_Assignment_code : ASPrettyPrinter.Break_Assignment_code);
                          		{if (mInEqualAlignDecl) mPrinter.captureDeclEqualPosition();}
                          		insertVariableDeclAssignmentWhitespace(A, false);
                          	
                    }
                    pushFollow(FOLLOW_assignmentExpression_in_variableDeclaration10871);
                    assignmentExpression228=assignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentExpression228.getTree());
                    if ( state.backtracking==0 ) {
                      popIndent();
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, variableDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclaration"

    public static class variableDeclarationNoIn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclarationNoIn"
    // AS3_ex.g3:2579:1: variableDeclarationNoIn : variableIdentifierDecl (A= ASSIGN assignmentExpressionNoIn )? ;
    public final AS3_exParser.variableDeclarationNoIn_return variableDeclarationNoIn() throws RecognitionException {
        AS3_exParser.variableDeclarationNoIn_return retval = new AS3_exParser.variableDeclarationNoIn_return();
        retval.start = input.LT(1);
        int variableDeclarationNoIn_StartIndex = input.index();
        Object root_0 = null;

        Token A=null;
        AS3_exParser.variableIdentifierDecl_return variableIdentifierDecl229 = null;

        AS3_exParser.assignmentExpressionNoIn_return assignmentExpressionNoIn230 = null;


        Object A_tree=null;


        	WrapOptions options=mPrinter.getExpressionWrapOptions();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // AS3_ex.g3:2583:5: ( variableIdentifierDecl (A= ASSIGN assignmentExpressionNoIn )? )
            // AS3_ex.g3:2583:10: variableIdentifierDecl (A= ASSIGN assignmentExpressionNoIn )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_variableIdentifierDecl_in_variableDeclarationNoIn10900);
            variableIdentifierDecl229=variableIdentifierDecl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variableIdentifierDecl229.getTree());
            // AS3_ex.g3:2583:33: (A= ASSIGN assignmentExpressionNoIn )?
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==ASSIGN) ) {
                alt111=1;
            }
            switch (alt111) {
                case 1 :
                    // AS3_ex.g3:2583:35: A= ASSIGN assignmentExpressionNoIn
                    {
                    A=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_variableDeclarationNoIn10906); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    A_tree = (Object)adaptor.create(A);
                    adaptor.addChild(root_0, A_tree);
                    }
                    if ( state.backtracking==0 ) {

                                insertVariableDeclAssignmentWhitespace(A, true);
                                wrapEmit(A, ASPrettyPrinter.Break_Assignment_code);
                                insertVariableDeclAssignmentWhitespace(A, false);
                               
                    }
                    pushFollow(FOLLOW_assignmentExpressionNoIn_in_variableDeclarationNoIn10930);
                    assignmentExpressionNoIn230=assignmentExpressionNoIn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentExpressionNoIn230.getTree());
                    if ( state.backtracking==0 ) {
                      popIndent();
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, variableDeclarationNoIn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclarationNoIn"

    public static class variableIdentifierDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableIdentifierDecl"
    // AS3_ex.g3:2592:1: variableIdentifierDecl : identifierLiteral (C= COLON type )? ;
    public final AS3_exParser.variableIdentifierDecl_return variableIdentifierDecl() throws RecognitionException {
        AS3_exParser.variableIdentifierDecl_return retval = new AS3_exParser.variableIdentifierDecl_return();
        retval.start = input.LT(1);
        int variableIdentifierDecl_StartIndex = input.index();
        Object root_0 = null;

        Token C=null;
        AS3_exParser.identifierLiteral_return identifierLiteral231 = null;

        AS3_exParser.type_return type232 = null;


        Object C_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // AS3_ex.g3:2593:2: ( identifierLiteral (C= COLON type )? )
            // AS3_ex.g3:2593:7: identifierLiteral (C= COLON type )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifierLiteral_in_variableIdentifierDecl10955);
            identifierLiteral231=identifierLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierLiteral231.getTree());
            // AS3_ex.g3:2593:25: (C= COLON type )?
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==COLON) ) {
                alt112=1;
            }
            switch (alt112) {
                case 1 :
                    // AS3_ex.g3:2593:27: C= COLON type
                    {
                    C=(Token)match(input,COLON,FOLLOW_COLON_in_variableIdentifierDecl10961); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    C_tree = (Object)adaptor.create(C);
                    adaptor.addChild(root_0, C_tree);
                    }
                    if ( state.backtracking==0 ) {
                      insertWS(mPrinter.getAdvancedSpacesBeforeColonsInDeclarations());emit(C);insertWS(mPrinter.getAdvancedSpacesAfterColonsInDeclarations());
                    }
                    pushFollow(FOLLOW_type_in_variableIdentifierDecl10965);
                    type232=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type232.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, variableIdentifierDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableIdentifierDecl"

    public static class type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type"
    // AS3_ex.g3:2599:1: type : ( qualifiedName | S= STAR | V= VOID );
    public final AS3_exParser.type_return type() throws RecognitionException {
        AS3_exParser.type_return retval = new AS3_exParser.type_return();
        retval.start = input.LT(1);
        int type_StartIndex = input.index();
        Object root_0 = null;

        Token S=null;
        Token V=null;
        AS3_exParser.qualifiedName_return qualifiedName233 = null;


        Object S_tree=null;
        Object V_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // AS3_ex.g3:2599:5: ( qualifiedName | S= STAR | V= VOID )
            int alt113=3;
            switch ( input.LA(1) ) {
            case DEFAULT:
            case INTERNAL:
            case NATIVE:
            case TO:
            case EACH:
            case GET:
            case SET:
            case NAMESPACE:
            case DYNAMIC:
            case FINAL:
            case OVERRIDE:
            case STATIC:
            case IDENTIFIER:
                {
                alt113=1;
                }
                break;
            case STAR:
                {
                alt113=2;
                }
                break;
            case VOID:
                {
                alt113=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 113, 0, input);

                throw nvae;
            }

            switch (alt113) {
                case 1 :
                    // AS3_ex.g3:2599:9: qualifiedName
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_qualifiedName_in_type10989);
                    qualifiedName233=qualifiedName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedName233.getTree());

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:2599:25: S= STAR
                    {
                    root_0 = (Object)adaptor.nil();

                    S=(Token)match(input,STAR,FOLLOW_STAR_in_type10995); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    S_tree = (Object)adaptor.create(S);
                    adaptor.addChild(root_0, S_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(S);
                    }

                    }
                    break;
                case 3 :
                    // AS3_ex.g3:2599:46: V= VOID
                    {
                    root_0 = (Object)adaptor.nil();

                    V=(Token)match(input,VOID,FOLLOW_VOID_in_type11003); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    V_tree = (Object)adaptor.create(V);
                    adaptor.addChild(root_0, V_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(V);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type"

    public static class typeList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeList"
    // AS3_ex.g3:2601:1: typeList : type (C= COMMA type )* ;
    public final AS3_exParser.typeList_return typeList() throws RecognitionException {
        AS3_exParser.typeList_return retval = new AS3_exParser.typeList_return();
        retval.start = input.LT(1);
        int typeList_StartIndex = input.index();
        Object root_0 = null;

        Token C=null;
        AS3_exParser.type_return type234 = null;

        AS3_exParser.type_return type235 = null;


        Object C_tree=null;


        	WrapOptions options=mPrinter.getExpressionWrapOptions();
        	boolean pushedFormat=false;
        	boolean pushedWrapInfo=false;
        	boolean pushedIndent=false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // AS3_ex.g3:2608:5: ( type (C= COMMA type )* )
            // AS3_ex.g3:2609:6: type (C= COMMA type )*
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              pushedFormat=pushFormatType(options, true);
                  	 pushedWrapInfo=pushWrapInfo(options, true);
                  	
            }
            pushFollow(FOLLOW_type_in_typeList11036);
            type234=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type234.getTree());
            // AS3_ex.g3:2612:13: (C= COMMA type )*
            loop114:
            do {
                int alt114=2;
                int LA114_0 = input.LA(1);

                if ( (LA114_0==COMMA) ) {
                    alt114=1;
                }


                switch (alt114) {
            	case 1 :
            	    // AS3_ex.g3:2612:14: C= COMMA type
            	    {
            	    C=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeList11041); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    C_tree = (Object)adaptor.create(C);
            	    adaptor.addChild(root_0, C_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      pushedIndent=emitCommaWithSpacingAndCRs(options, C, pushedIndent, -1, ASPrettyPrinter.Break_SubType_Other);
            	    }
            	    pushFollow(FOLLOW_type_in_typeList11045);
            	    type235=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type235.getTree());

            	    }
            	    break;

            	default :
            	    break loop114;
                }
            } while (true);

            if ( state.backtracking==0 ) {

                  		if (pushedIndent)
                  			popIndent();
              	   	    if (pushedFormat)
              	   	    {
              	   	    	mPrinter.popFormatMode();
              	   	    }
              	   	    if (pushedWrapInfo)
              	   	    	mPrinter.popWrapContext();
                  	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, typeList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeList"

    public static class standardQualifiedName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "standardQualifiedName"
    // AS3_ex.g3:2626:1: standardQualifiedName : typeSpecifier (D= DOT typeSpecifier )* ;
    public final AS3_exParser.standardQualifiedName_return standardQualifiedName() throws RecognitionException {
        AS3_exParser.standardQualifiedName_return retval = new AS3_exParser.standardQualifiedName_return();
        retval.start = input.LT(1);
        int standardQualifiedName_StartIndex = input.index();
        Object root_0 = null;

        Token D=null;
        AS3_exParser.typeSpecifier_return typeSpecifier236 = null;

        AS3_exParser.typeSpecifier_return typeSpecifier237 = null;


        Object D_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // AS3_ex.g3:2627:2: ( typeSpecifier (D= DOT typeSpecifier )* )
            // AS3_ex.g3:2628:2: typeSpecifier (D= DOT typeSpecifier )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_typeSpecifier_in_standardQualifiedName11076);
            typeSpecifier236=typeSpecifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeSpecifier236.getTree());
            // AS3_ex.g3:2628:16: (D= DOT typeSpecifier )*
            loop115:
            do {
                int alt115=2;
                int LA115_0 = input.LA(1);

                if ( (LA115_0==DOT) ) {
                    int LA115_1 = input.LA(2);

                    if ( (LA115_1==DEFAULT||LA115_1==INTERNAL||LA115_1==NATIVE||LA115_1==TO||(LA115_1>=EACH && LA115_1<=NAMESPACE)||(LA115_1>=DYNAMIC && LA115_1<=STATIC)||LA115_1==IDENTIFIER) ) {
                        alt115=1;
                    }


                }


                switch (alt115) {
            	case 1 :
            	    // AS3_ex.g3:2628:17: D= DOT typeSpecifier
            	    {
            	    D=(Token)match(input,DOT,FOLLOW_DOT_in_standardQualifiedName11081); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    D_tree = (Object)adaptor.create(D);
            	    adaptor.addChild(root_0, D_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      wrapEmit(D, ASPrettyPrinter.Break_Other_Connectors_code);
            	    }
            	    pushFollow(FOLLOW_typeSpecifier_in_standardQualifiedName11085);
            	    typeSpecifier237=typeSpecifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeSpecifier237.getTree());
            	    if ( state.backtracking==0 ) {
            	      popIndent();
            	    }

            	    }
            	    break;

            	default :
            	    break loop115;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, standardQualifiedName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "standardQualifiedName"

    public static class qualifiedName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedName"
    // AS3_ex.g3:2632:1: qualifiedName : standardQualifiedName ( typePostfixSyntax )? ;
    public final AS3_exParser.qualifiedName_return qualifiedName() throws RecognitionException {
        AS3_exParser.qualifiedName_return retval = new AS3_exParser.qualifiedName_return();
        retval.start = input.LT(1);
        int qualifiedName_StartIndex = input.index();
        Object root_0 = null;

        AS3_exParser.standardQualifiedName_return standardQualifiedName238 = null;

        AS3_exParser.typePostfixSyntax_return typePostfixSyntax239 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // AS3_ex.g3:2633:5: ( standardQualifiedName ( typePostfixSyntax )? )
            // AS3_ex.g3:2634:6: standardQualifiedName ( typePostfixSyntax )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_standardQualifiedName_in_qualifiedName11114);
            standardQualifiedName238=standardQualifiedName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, standardQualifiedName238.getTree());
            // AS3_ex.g3:2634:28: ( typePostfixSyntax )?
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==DOT) ) {
                int LA116_1 = input.LA(2);

                if ( (LA116_1==LT) ) {
                    alt116=1;
                }
            }
            switch (alt116) {
                case 1 :
                    // AS3_ex.g3:2634:29: typePostfixSyntax
                    {
                    pushFollow(FOLLOW_typePostfixSyntax_in_qualifiedName11117);
                    typePostfixSyntax239=typePostfixSyntax();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typePostfixSyntax239.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, qualifiedName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedName"

    public static class typePostfixSyntax_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typePostfixSyntax"
    // AS3_ex.g3:2637:1: typePostfixSyntax : D= DOT L= LT ( standardQualifiedName | st= STAR ) ( typePostfixSyntax )? G= GT ;
    public final AS3_exParser.typePostfixSyntax_return typePostfixSyntax() throws RecognitionException {
        AS3_exParser.typePostfixSyntax_return retval = new AS3_exParser.typePostfixSyntax_return();
        retval.start = input.LT(1);
        int typePostfixSyntax_StartIndex = input.index();
        Object root_0 = null;

        Token D=null;
        Token L=null;
        Token st=null;
        Token G=null;
        AS3_exParser.standardQualifiedName_return standardQualifiedName240 = null;

        AS3_exParser.typePostfixSyntax_return typePostfixSyntax241 = null;


        Object D_tree=null;
        Object L_tree=null;
        Object st_tree=null;
        Object G_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // AS3_ex.g3:2637:18: (D= DOT L= LT ( standardQualifiedName | st= STAR ) ( typePostfixSyntax )? G= GT )
            // AS3_ex.g3:2638:2: D= DOT L= LT ( standardQualifiedName | st= STAR ) ( typePostfixSyntax )? G= GT
            {
            root_0 = (Object)adaptor.nil();

            D=(Token)match(input,DOT,FOLLOW_DOT_in_typePostfixSyntax11139); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            D_tree = (Object)adaptor.create(D);
            adaptor.addChild(root_0, D_tree);
            }
            if ( state.backtracking==0 ) {
              emit(D);
            }
            L=(Token)match(input,LT,FOLLOW_LT_in_typePostfixSyntax11149); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            L_tree = (Object)adaptor.create(L);
            adaptor.addChild(root_0, L_tree);
            }
            if ( state.backtracking==0 ) {
              emit(L);
            }
            // AS3_ex.g3:2641:19: ( standardQualifiedName | st= STAR )
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==DEFAULT||LA117_0==INTERNAL||LA117_0==NATIVE||LA117_0==TO||(LA117_0>=EACH && LA117_0<=NAMESPACE)||(LA117_0>=DYNAMIC && LA117_0<=STATIC)||LA117_0==IDENTIFIER) ) {
                alt117=1;
            }
            else if ( (LA117_0==STAR) ) {
                alt117=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);

                throw nvae;
            }
            switch (alt117) {
                case 1 :
                    // AS3_ex.g3:2641:20: standardQualifiedName
                    {
                    pushFollow(FOLLOW_standardQualifiedName_in_typePostfixSyntax11154);
                    standardQualifiedName240=standardQualifiedName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, standardQualifiedName240.getTree());

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:2641:44: st= STAR
                    {
                    st=(Token)match(input,STAR,FOLLOW_STAR_in_typePostfixSyntax11160); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    st_tree = (Object)adaptor.create(st);
                    adaptor.addChild(root_0, st_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(st);
                    }

                    }
                    break;

            }

            // AS3_ex.g3:2641:66: ( typePostfixSyntax )?
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==DOT) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    // AS3_ex.g3:2641:67: typePostfixSyntax
                    {
                    pushFollow(FOLLOW_typePostfixSyntax_in_typePostfixSyntax11166);
                    typePostfixSyntax241=typePostfixSyntax();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typePostfixSyntax241.getTree());

                    }
                    break;

            }

            G=(Token)match(input,GT,FOLLOW_GT_in_typePostfixSyntax11172); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            G_tree = (Object)adaptor.create(G);
            adaptor.addChild(root_0, G_tree);
            }
            if ( state.backtracking==0 ) {
              emit(G);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, typePostfixSyntax_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typePostfixSyntax"

    public static class qualifiedIdentifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedIdentifier"
    // AS3_ex.g3:2645:1: qualifiedIdentifier : I= IDENTIFIER ;
    public final AS3_exParser.qualifiedIdentifier_return qualifiedIdentifier() throws RecognitionException {
        AS3_exParser.qualifiedIdentifier_return retval = new AS3_exParser.qualifiedIdentifier_return();
        retval.start = input.LT(1);
        int qualifiedIdentifier_StartIndex = input.index();
        Object root_0 = null;

        Token I=null;

        Object I_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // AS3_ex.g3:2646:5: (I= IDENTIFIER )
            // AS3_ex.g3:2647:6: I= IDENTIFIER
            {
            root_0 = (Object)adaptor.nil();

            I=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_qualifiedIdentifier11205); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            I_tree = (Object)adaptor.create(I);
            adaptor.addChild(root_0, I_tree);
            }
            if ( state.backtracking==0 ) {
              emit(I);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, qualifiedIdentifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedIdentifier"

    public static class parExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parExpression"
    // AS3_ex.g3:2653:1: parExpression : L= LPAREN expression R= RPAREN ;
    public final AS3_exParser.parExpression_return parExpression() throws RecognitionException {
        AS3_exParser.parExpression_return retval = new AS3_exParser.parExpression_return();
        retval.start = input.LT(1);
        int parExpression_StartIndex = input.index();
        Object root_0 = null;

        Token L=null;
        Token R=null;
        AS3_exParser.expression_return expression242 = null;


        Object L_tree=null;
        Object R_tree=null;


        	boolean pushedWrap=false;
        	WrapOptions options=mPrinter.getExpressionWrapOptions();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // AS3_ex.g3:2659:5: (L= LPAREN expression R= RPAREN )
            // AS3_ex.g3:2660:5: L= LPAREN expression R= RPAREN
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              pushedWrap=pushWrapInfo(options, true);
            }
            L=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_parExpression11242); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            L_tree = (Object)adaptor.create(L);
            adaptor.addChild(root_0, L_tree);
            }
            if ( state.backtracking==0 ) {
              emit(L);insertWS(mPrinter.getAdvancedSpacesInsideParensInOtherPlaces());
            }
            if ( state.backtracking==0 ) {
              pushExpressionIndent();
            }
            pushFollow(FOLLOW_expression_in_parExpression11249);
            expression242=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression242.getTree());
            R=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_parExpression11254); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            R_tree = (Object)adaptor.create(R);
            adaptor.addChild(root_0, R_tree);
            }
            if ( state.backtracking==0 ) {
              insertWS(mPrinter.getAdvancedSpacesInsideParensInOtherPlaces());emit(R);
            }
            if ( state.backtracking==0 ) {
              popIndent();
            }
            if ( state.backtracking==0 ) {
              if (pushedWrap) mPrinter.popWrapContext();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, parExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parExpression"

    public static class expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // AS3_ex.g3:2665:1: expression : assignmentExpression (C= COMMA assignmentExpression )* ;
    public final AS3_exParser.expression_return expression() throws RecognitionException {
        AS3_exParser.expression_return retval = new AS3_exParser.expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.index();
        Object root_0 = null;

        Token C=null;
        AS3_exParser.assignmentExpression_return assignmentExpression243 = null;

        AS3_exParser.assignmentExpression_return assignmentExpression244 = null;


        Object C_tree=null;


        	WrapOptions options=mPrinter.getExpressionWrapOptions();
        	boolean pushedFormat=false;
        	boolean pushedWrapInfo=false;
        	boolean pushedIndent=false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // AS3_ex.g3:2672:5: ( assignmentExpression (C= COMMA assignmentExpression )* )
            // AS3_ex.g3:2673:6: assignmentExpression (C= COMMA assignmentExpression )*
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              pushedFormat=pushFormatType(options, true);
                  	 pushedWrapInfo=pushWrapInfo(options, true);
                  	
            }
            pushFollow(FOLLOW_assignmentExpression_in_expression11301);
            assignmentExpression243=assignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentExpression243.getTree());
            // AS3_ex.g3:2676:27: (C= COMMA assignmentExpression )*
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);

                if ( (LA119_0==COMMA) ) {
                    int LA119_2 = input.LA(2);

                    if ( (synpred236_AS3_ex()) ) {
                        alt119=1;
                    }


                }


                switch (alt119) {
            	case 1 :
            	    // AS3_ex.g3:2676:30: C= COMMA assignmentExpression
            	    {
            	    C=(Token)match(input,COMMA,FOLLOW_COMMA_in_expression11308); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    C_tree = (Object)adaptor.create(C);
            	    adaptor.addChild(root_0, C_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      pushedIndent=emitCommaWithSpacingAndCRs(options, C, pushedIndent, -1, ASPrettyPrinter.Break_SubType_Other);
            	    }
            	    pushFollow(FOLLOW_assignmentExpression_in_expression11313);
            	    assignmentExpression244=assignmentExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentExpression244.getTree());

            	    }
            	    break;

            	default :
            	    break loop119;
                }
            } while (true);

            if ( state.backtracking==0 ) {

                  		if (pushedIndent)
                  			popIndent();
              	   	    if (pushedFormat)
              	   	    {
              	   	    	mPrinter.popFormatMode();
              	   	    }
              	   	    if (pushedWrapInfo)
              	   	    	mPrinter.popWrapContext();
                  	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class expressionNoIn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionNoIn"
    // AS3_ex.g3:2689:1: expressionNoIn : assignmentExpressionNoIn (C= COMMA assignmentExpressionNoIn )* ;
    public final AS3_exParser.expressionNoIn_return expressionNoIn() throws RecognitionException {
        AS3_exParser.expressionNoIn_return retval = new AS3_exParser.expressionNoIn_return();
        retval.start = input.LT(1);
        int expressionNoIn_StartIndex = input.index();
        Object root_0 = null;

        Token C=null;
        AS3_exParser.assignmentExpressionNoIn_return assignmentExpressionNoIn245 = null;

        AS3_exParser.assignmentExpressionNoIn_return assignmentExpressionNoIn246 = null;


        Object C_tree=null;


        	WrapOptions options=mPrinter.getExpressionWrapOptions();
        	boolean pushedFormat=false;
        	boolean pushedWrapInfo=false;
        	boolean pushedIndent=false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // AS3_ex.g3:2696:5: ( assignmentExpressionNoIn (C= COMMA assignmentExpressionNoIn )* )
            // AS3_ex.g3:2697:6: assignmentExpressionNoIn (C= COMMA assignmentExpressionNoIn )*
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              pushedFormat=pushFormatType(options, true);
                  	 pushedWrapInfo=pushWrapInfo(options, true);
                  	
            }
            pushFollow(FOLLOW_assignmentExpressionNoIn_in_expressionNoIn11357);
            assignmentExpressionNoIn245=assignmentExpressionNoIn();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentExpressionNoIn245.getTree());
            // AS3_ex.g3:2700:33: (C= COMMA assignmentExpressionNoIn )*
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);

                if ( (LA120_0==COMMA) ) {
                    alt120=1;
                }


                switch (alt120) {
            	case 1 :
            	    // AS3_ex.g3:2700:36: C= COMMA assignmentExpressionNoIn
            	    {
            	    C=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionNoIn11364); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    C_tree = (Object)adaptor.create(C);
            	    adaptor.addChild(root_0, C_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      pushedIndent=emitCommaWithSpacingAndCRs(options, C, pushedIndent, -1, ASPrettyPrinter.Break_SubType_Other);
            	    }
            	    pushFollow(FOLLOW_assignmentExpressionNoIn_in_expressionNoIn11369);
            	    assignmentExpressionNoIn246=assignmentExpressionNoIn();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentExpressionNoIn246.getTree());

            	    }
            	    break;

            	default :
            	    break loop120;
                }
            } while (true);

            if ( state.backtracking==0 ) {

                  		if (pushedIndent)
                  			popIndent();
              	   	    if (pushedFormat)
              	   	    {
              	   	    	mPrinter.popFormatMode();
              	   	    }
              	   	    if (pushedWrapInfo)
              	   	    	mPrinter.popWrapContext();
                  	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, expressionNoIn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expressionNoIn"

    public static class assignmentExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assignmentExpression"
    // AS3_ex.g3:2714:1: assignmentExpression : ( ( leftHandSideExpression assignmentOperator )=> leftHandSideExpression assignmentOperator assignmentExpression | conditionalExpression ) ;
    public final AS3_exParser.assignmentExpression_return assignmentExpression() throws RecognitionException {
        AS3_exParser.assignmentExpression_return retval = new AS3_exParser.assignmentExpression_return();
        retval.start = input.LT(1);
        int assignmentExpression_StartIndex = input.index();
        Object root_0 = null;

        AS3_exParser.leftHandSideExpression_return leftHandSideExpression247 = null;

        AS3_exParser.assignmentOperator_return assignmentOperator248 = null;

        AS3_exParser.assignmentExpression_return assignmentExpression249 = null;

        AS3_exParser.conditionalExpression_return conditionalExpression250 = null;




            WrapOptions options=mPrinter.getExpressionWrapOptions();
            boolean pushedWrapInfo=false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // AS3_ex.g3:2719:5: ( ( ( leftHandSideExpression assignmentOperator )=> leftHandSideExpression assignmentOperator assignmentExpression | conditionalExpression ) )
            // AS3_ex.g3:2720:8: ( ( leftHandSideExpression assignmentOperator )=> leftHandSideExpression assignmentOperator assignmentExpression | conditionalExpression )
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              pushedWrapInfo=pushWrapInfo(options, true);
            }
            // AS3_ex.g3:2721:7: ( ( leftHandSideExpression assignmentOperator )=> leftHandSideExpression assignmentOperator assignmentExpression | conditionalExpression )
            int alt121=2;
            alt121 = dfa121.predict(input);
            switch (alt121) {
                case 1 :
                    // AS3_ex.g3:2722:9: ( leftHandSideExpression assignmentOperator )=> leftHandSideExpression assignmentOperator assignmentExpression
                    {
                    pushFollow(FOLLOW_leftHandSideExpression_in_assignmentExpression11437);
                    leftHandSideExpression247=leftHandSideExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, leftHandSideExpression247.getTree());
                    pushFollow(FOLLOW_assignmentOperator_in_assignmentExpression11440);
                    assignmentOperator248=assignmentOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentOperator248.getTree());
                    pushFollow(FOLLOW_assignmentExpression_in_assignmentExpression11443);
                    assignmentExpression249=assignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentExpression249.getTree());

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:2723:8: conditionalExpression
                    {
                    pushFollow(FOLLOW_conditionalExpression_in_assignmentExpression11452);
                    conditionalExpression250=conditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalExpression250.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              if (pushedWrapInfo)
              	   	    mPrinter.popWrapContext();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, assignmentExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "assignmentExpression"

    public static class assignmentExpressionNoIn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assignmentExpressionNoIn"
    // AS3_ex.g3:2730:1: assignmentExpressionNoIn : ( ( leftHandSideExpression assignmentOperator )=> leftHandSideExpression assignmentOperator assignmentExpressionNoIn | conditionalExpressionNoIn ) ;
    public final AS3_exParser.assignmentExpressionNoIn_return assignmentExpressionNoIn() throws RecognitionException {
        AS3_exParser.assignmentExpressionNoIn_return retval = new AS3_exParser.assignmentExpressionNoIn_return();
        retval.start = input.LT(1);
        int assignmentExpressionNoIn_StartIndex = input.index();
        Object root_0 = null;

        AS3_exParser.leftHandSideExpression_return leftHandSideExpression251 = null;

        AS3_exParser.assignmentOperator_return assignmentOperator252 = null;

        AS3_exParser.assignmentExpressionNoIn_return assignmentExpressionNoIn253 = null;

        AS3_exParser.conditionalExpressionNoIn_return conditionalExpressionNoIn254 = null;




            WrapOptions options=mPrinter.getExpressionWrapOptions();
            boolean pushedWrapInfo=false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // AS3_ex.g3:2735:5: ( ( ( leftHandSideExpression assignmentOperator )=> leftHandSideExpression assignmentOperator assignmentExpressionNoIn | conditionalExpressionNoIn ) )
            // AS3_ex.g3:2735:8: ( ( leftHandSideExpression assignmentOperator )=> leftHandSideExpression assignmentOperator assignmentExpressionNoIn | conditionalExpressionNoIn )
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              pushedWrapInfo=pushWrapInfo(options, true);
            }
            // AS3_ex.g3:2736:8: ( ( leftHandSideExpression assignmentOperator )=> leftHandSideExpression assignmentOperator assignmentExpressionNoIn | conditionalExpressionNoIn )
            int alt122=2;
            alt122 = dfa122.predict(input);
            switch (alt122) {
                case 1 :
                    // AS3_ex.g3:2737:9: ( leftHandSideExpression assignmentOperator )=> leftHandSideExpression assignmentOperator assignmentExpressionNoIn
                    {
                    pushFollow(FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn11522);
                    leftHandSideExpression251=leftHandSideExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, leftHandSideExpression251.getTree());
                    pushFollow(FOLLOW_assignmentOperator_in_assignmentExpressionNoIn11525);
                    assignmentOperator252=assignmentOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentOperator252.getTree());
                    pushFollow(FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn11528);
                    assignmentExpressionNoIn253=assignmentExpressionNoIn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentExpressionNoIn253.getTree());

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:2738:8: conditionalExpressionNoIn
                    {
                    pushFollow(FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn11537);
                    conditionalExpressionNoIn254=conditionalExpressionNoIn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalExpressionNoIn254.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              if (pushedWrapInfo)
              	   	    mPrinter.popWrapContext();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, assignmentExpressionNoIn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "assignmentExpressionNoIn"

    public static class assignmentOperator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assignmentOperator"
    // AS3_ex.g3:2744:1: assignmentOperator : op= assignmentOperator_int ;
    public final AS3_exParser.assignmentOperator_return assignmentOperator() throws RecognitionException {
        AS3_exParser.assignmentOperator_return retval = new AS3_exParser.assignmentOperator_return();
        retval.start = input.LT(1);
        int assignmentOperator_StartIndex = input.index();
        Object root_0 = null;

        AS3_exParser.assignmentOperator_int_return op = null;




            WrapOptions options=mPrinter.getExpressionWrapOptions();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // AS3_ex.g3:2748:2: (op= assignmentOperator_int )
            // AS3_ex.g3:2748:4: op= assignmentOperator_int
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_assignmentOperator_int_in_assignmentOperator11574);
            op=assignmentOperator_int();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, op.getTree());
            if ( state.backtracking==0 ) {
              insertWS(mPrinter.getSpacesAroundAssignment());
              	   emit((op!=null?((Token)op.start):null));
              	   mPrinter.saveWrapChar((op!=null?((Token)op.start):null), ASPrettyPrinter.Break_Assignment_code, options.isBeforeAssignmentOperator(), false, -1, "");
              	   insertWS(mPrinter.getSpacesAroundAssignment());
              	  
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, assignmentOperator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "assignmentOperator"

    public static class assignmentOperator_int_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assignmentOperator_int"
    // AS3_ex.g3:2756:1: assignmentOperator_int : ( ASSIGN | s= STAR a= ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | SHL_ASSIGN | ( ( '>' '>' '=' )=>t1= '>' t2= '>' t3= '=' {...}? -> SHR_ASSIGN ) | ( ( '>' '>' '>' '=' )=>t1= '>' t2= '>' t3= '>' t4= '=' {...}? -> SHU_ASSIGN ) | AND_ASSIGN | XOR_ASSIGN | OR_ASSIGN | LOR_ASSIGN | LAND_ASSIGN );
    public final AS3_exParser.assignmentOperator_int_return assignmentOperator_int() throws RecognitionException {
        AS3_exParser.assignmentOperator_int_return retval = new AS3_exParser.assignmentOperator_int_return();
        retval.start = input.LT(1);
        int assignmentOperator_int_StartIndex = input.index();
        Object root_0 = null;

        Token s=null;
        Token a=null;
        Token t1=null;
        Token t2=null;
        Token t3=null;
        Token t4=null;
        Token ASSIGN255=null;
        Token DIV_ASSIGN256=null;
        Token MOD_ASSIGN257=null;
        Token ADD_ASSIGN258=null;
        Token SUB_ASSIGN259=null;
        Token SHL_ASSIGN260=null;
        Token AND_ASSIGN261=null;
        Token XOR_ASSIGN262=null;
        Token OR_ASSIGN263=null;
        Token LOR_ASSIGN264=null;
        Token LAND_ASSIGN265=null;

        Object s_tree=null;
        Object a_tree=null;
        Object t1_tree=null;
        Object t2_tree=null;
        Object t3_tree=null;
        Object t4_tree=null;
        Object ASSIGN255_tree=null;
        Object DIV_ASSIGN256_tree=null;
        Object MOD_ASSIGN257_tree=null;
        Object ADD_ASSIGN258_tree=null;
        Object SUB_ASSIGN259_tree=null;
        Object SHL_ASSIGN260_tree=null;
        Object AND_ASSIGN261_tree=null;
        Object XOR_ASSIGN262_tree=null;
        Object OR_ASSIGN263_tree=null;
        Object LOR_ASSIGN264_tree=null;
        Object LAND_ASSIGN265_tree=null;
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // AS3_ex.g3:2757:5: ( ASSIGN | s= STAR a= ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | SHL_ASSIGN | ( ( '>' '>' '=' )=>t1= '>' t2= '>' t3= '=' {...}? -> SHR_ASSIGN ) | ( ( '>' '>' '>' '=' )=>t1= '>' t2= '>' t3= '>' t4= '=' {...}? -> SHU_ASSIGN ) | AND_ASSIGN | XOR_ASSIGN | OR_ASSIGN | LOR_ASSIGN | LAND_ASSIGN )
            int alt123=14;
            alt123 = dfa123.predict(input);
            switch (alt123) {
                case 1 :
                    // AS3_ex.g3:2757:7: ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    ASSIGN255=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_assignmentOperator_int11600); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ASSIGN255_tree = (Object)adaptor.create(ASSIGN255);
                    adaptor.addChild(root_0, ASSIGN255_tree);
                    }

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:2759:4: s= STAR a= ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    s=(Token)match(input,STAR,FOLLOW_STAR_in_assignmentOperator_int11609); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    s_tree = (Object)adaptor.create(s);
                    adaptor.addChild(root_0, s_tree);
                    }
                    a=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_assignmentOperator_int11613); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      s.setText("*=");
                    }

                    }
                    break;
                case 3 :
                    // AS3_ex.g3:2760:7: DIV_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    DIV_ASSIGN256=(Token)match(input,DIV_ASSIGN,FOLLOW_DIV_ASSIGN_in_assignmentOperator_int11624); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DIV_ASSIGN256_tree = (Object)adaptor.create(DIV_ASSIGN256);
                    adaptor.addChild(root_0, DIV_ASSIGN256_tree);
                    }

                    }
                    break;
                case 4 :
                    // AS3_ex.g3:2761:7: MOD_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    MOD_ASSIGN257=(Token)match(input,MOD_ASSIGN,FOLLOW_MOD_ASSIGN_in_assignmentOperator_int11633); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MOD_ASSIGN257_tree = (Object)adaptor.create(MOD_ASSIGN257);
                    adaptor.addChild(root_0, MOD_ASSIGN257_tree);
                    }

                    }
                    break;
                case 5 :
                    // AS3_ex.g3:2762:7: ADD_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    ADD_ASSIGN258=(Token)match(input,ADD_ASSIGN,FOLLOW_ADD_ASSIGN_in_assignmentOperator_int11642); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ADD_ASSIGN258_tree = (Object)adaptor.create(ADD_ASSIGN258);
                    adaptor.addChild(root_0, ADD_ASSIGN258_tree);
                    }

                    }
                    break;
                case 6 :
                    // AS3_ex.g3:2763:7: SUB_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    SUB_ASSIGN259=(Token)match(input,SUB_ASSIGN,FOLLOW_SUB_ASSIGN_in_assignmentOperator_int11651); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUB_ASSIGN259_tree = (Object)adaptor.create(SUB_ASSIGN259);
                    adaptor.addChild(root_0, SUB_ASSIGN259_tree);
                    }

                    }
                    break;
                case 7 :
                    // AS3_ex.g3:2764:7: SHL_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    SHL_ASSIGN260=(Token)match(input,SHL_ASSIGN,FOLLOW_SHL_ASSIGN_in_assignmentOperator_int11659); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SHL_ASSIGN260_tree = (Object)adaptor.create(SHL_ASSIGN260);
                    adaptor.addChild(root_0, SHL_ASSIGN260_tree);
                    }

                    }
                    break;
                case 8 :
                    // AS3_ex.g3:2773:9: ( ( '>' '>' '=' )=>t1= '>' t2= '>' t3= '=' {...}? -> SHR_ASSIGN )
                    {
                    // AS3_ex.g3:2773:9: ( ( '>' '>' '=' )=>t1= '>' t2= '>' t3= '=' {...}? -> SHR_ASSIGN )
                    // AS3_ex.g3:2773:10: ( '>' '>' '=' )=>t1= '>' t2= '>' t3= '=' {...}?
                    {
                    t1=(Token)match(input,GT,FOLLOW_GT_in_assignmentOperator_int11685); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GT.add(t1);

                    t2=(Token)match(input,GT,FOLLOW_GT_in_assignmentOperator_int11689); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GT.add(t2);

                    t3=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_assignmentOperator_int11693); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(t3);

                    if ( !(( t1.getLine() == t2.getLine() && 
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() && 
                              t2.getLine() == t3.getLine() && 
                              t2.getCharPositionInLine() + 1 == t3.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "assignmentOperator_int", " $t1.getLine() == $t2.getLine() && \r\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() && \r\n          $t2.getLine() == $t3.getLine() && \r\n          $t2.getCharPositionInLine() + 1 == $t3.getCharPositionInLine() ");
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 2778:7: -> SHR_ASSIGN
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(SHR_ASSIGN, "SHR_ASSIGN"));

                    }

                    retval.tree = root_0;}
                    }

                    if ( state.backtracking==0 ) {
                      t1.setText(">>=");
                    }

                    }
                    break;
                case 9 :
                    // AS3_ex.g3:2780:7: ( ( '>' '>' '>' '=' )=>t1= '>' t2= '>' t3= '>' t4= '=' {...}? -> SHU_ASSIGN )
                    {
                    // AS3_ex.g3:2780:7: ( ( '>' '>' '>' '=' )=>t1= '>' t2= '>' t3= '>' t4= '=' {...}? -> SHU_ASSIGN )
                    // AS3_ex.g3:2780:8: ( '>' '>' '>' '=' )=>t1= '>' t2= '>' t3= '>' t4= '=' {...}?
                    {
                    t1=(Token)match(input,GT,FOLLOW_GT_in_assignmentOperator_int11739); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GT.add(t1);

                    t2=(Token)match(input,GT,FOLLOW_GT_in_assignmentOperator_int11743); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GT.add(t2);

                    t3=(Token)match(input,GT,FOLLOW_GT_in_assignmentOperator_int11747); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GT.add(t3);

                    t4=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_assignmentOperator_int11751); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(t4);

                    if ( !(( t1.getLine() == t2.getLine() && 
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() &&
                              t2.getLine() == t3.getLine() && 
                              t2.getCharPositionInLine() + 1 == t3.getCharPositionInLine() &&
                              t3.getLine() == t4.getLine() && 
                              t3.getCharPositionInLine() + 1 == t4.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "assignmentOperator_int", " $t1.getLine() == $t2.getLine() && \r\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() &&\r\n          $t2.getLine() == $t3.getLine() && \r\n          $t2.getCharPositionInLine() + 1 == $t3.getCharPositionInLine() &&\r\n          $t3.getLine() == $t4.getLine() && \r\n          $t3.getCharPositionInLine() + 1 == $t4.getCharPositionInLine() ");
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 2787:7: -> SHU_ASSIGN
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(SHU_ASSIGN, "SHU_ASSIGN"));

                    }

                    retval.tree = root_0;}
                    }

                    if ( state.backtracking==0 ) {
                      t1.setText(">>>=");
                    }

                    }
                    break;
                case 10 :
                    // AS3_ex.g3:2788:7: AND_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    AND_ASSIGN261=(Token)match(input,AND_ASSIGN,FOLLOW_AND_ASSIGN_in_assignmentOperator_int11782); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AND_ASSIGN261_tree = (Object)adaptor.create(AND_ASSIGN261);
                    adaptor.addChild(root_0, AND_ASSIGN261_tree);
                    }

                    }
                    break;
                case 11 :
                    // AS3_ex.g3:2789:7: XOR_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    XOR_ASSIGN262=(Token)match(input,XOR_ASSIGN,FOLLOW_XOR_ASSIGN_in_assignmentOperator_int11791); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    XOR_ASSIGN262_tree = (Object)adaptor.create(XOR_ASSIGN262);
                    adaptor.addChild(root_0, XOR_ASSIGN262_tree);
                    }

                    }
                    break;
                case 12 :
                    // AS3_ex.g3:2790:7: OR_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    OR_ASSIGN263=(Token)match(input,OR_ASSIGN,FOLLOW_OR_ASSIGN_in_assignmentOperator_int11800); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OR_ASSIGN263_tree = (Object)adaptor.create(OR_ASSIGN263);
                    adaptor.addChild(root_0, OR_ASSIGN263_tree);
                    }

                    }
                    break;
                case 13 :
                    // AS3_ex.g3:2791:7: LOR_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    LOR_ASSIGN264=(Token)match(input,LOR_ASSIGN,FOLLOW_LOR_ASSIGN_in_assignmentOperator_int11808); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LOR_ASSIGN264_tree = (Object)adaptor.create(LOR_ASSIGN264);
                    adaptor.addChild(root_0, LOR_ASSIGN264_tree);
                    }

                    }
                    break;
                case 14 :
                    // AS3_ex.g3:2792:7: LAND_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    LAND_ASSIGN265=(Token)match(input,LAND_ASSIGN,FOLLOW_LAND_ASSIGN_in_assignmentOperator_int11816); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LAND_ASSIGN265_tree = (Object)adaptor.create(LAND_ASSIGN265);
                    adaptor.addChild(root_0, LAND_ASSIGN265_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, assignmentOperator_int_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "assignmentOperator_int"

    public static class conditionalExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalExpression"
    // AS3_ex.g3:2796:1: conditionalExpression : logicalORExpression (Q= QUE assignmentExpression C= COLON assignmentExpression )? ;
    public final AS3_exParser.conditionalExpression_return conditionalExpression() throws RecognitionException {
        AS3_exParser.conditionalExpression_return retval = new AS3_exParser.conditionalExpression_return();
        retval.start = input.LT(1);
        int conditionalExpression_StartIndex = input.index();
        Object root_0 = null;

        Token Q=null;
        Token C=null;
        AS3_exParser.logicalORExpression_return logicalORExpression266 = null;

        AS3_exParser.assignmentExpression_return assignmentExpression267 = null;

        AS3_exParser.assignmentExpression_return assignmentExpression268 = null;


        Object Q_tree=null;
        Object C_tree=null;


            WrapOptions options=mPrinter.getExpressionWrapOptions();
            boolean pushedWrapInfo=false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // AS3_ex.g3:2801:5: ( logicalORExpression (Q= QUE assignmentExpression C= COLON assignmentExpression )? )
            // AS3_ex.g3:2801:9: logicalORExpression (Q= QUE assignmentExpression C= COLON assignmentExpression )?
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              pushedWrapInfo=pushWrapInfo(options, true);
            }
            pushFollow(FOLLOW_logicalORExpression_in_conditionalExpression11851);
            logicalORExpression266=logicalORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, logicalORExpression266.getTree());
            // AS3_ex.g3:2802:29: (Q= QUE assignmentExpression C= COLON assignmentExpression )?
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==QUE) ) {
                int LA124_1 = input.LA(2);

                if ( (synpred255_AS3_ex()) ) {
                    alt124=1;
                }
            }
            switch (alt124) {
                case 1 :
                    // AS3_ex.g3:2802:31: Q= QUE assignmentExpression C= COLON assignmentExpression
                    {
                    Q=(Token)match(input,QUE,FOLLOW_QUE_in_conditionalExpression11857); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Q_tree = (Object)adaptor.create(Q);
                    adaptor.addChild(root_0, Q_tree);
                    }
                    if ( state.backtracking==0 ) {
                      indentEmit(Q, ASPrettyPrinter.Break_Ternary_code);
                    }
                    pushFollow(FOLLOW_assignmentExpression_in_conditionalExpression11862);
                    assignmentExpression267=assignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentExpression267.getTree());
                    if ( state.backtracking==0 ) {
                      popIndent();
                    }
                    C=(Token)match(input,COLON,FOLLOW_COLON_in_conditionalExpression11869); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    C_tree = (Object)adaptor.create(C);
                    adaptor.addChild(root_0, C_tree);
                    }
                    if ( state.backtracking==0 ) {
                      indentEmit(C, ASPrettyPrinter.Break_Ternary_code);
                    }
                    pushFollow(FOLLOW_assignmentExpression_in_conditionalExpression11874);
                    assignmentExpression268=assignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentExpression268.getTree());
                    if ( state.backtracking==0 ) {
                      popIndent();
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              if (pushedWrapInfo) mPrinter.popWrapContext();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, conditionalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalExpression"

    public static class conditionalExpressionNoIn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalExpressionNoIn"
    // AS3_ex.g3:2806:1: conditionalExpressionNoIn : logicalORExpressionNoIn (Q= QUE assignmentExpression C= COLON assignmentExpression )? ;
    public final AS3_exParser.conditionalExpressionNoIn_return conditionalExpressionNoIn() throws RecognitionException {
        AS3_exParser.conditionalExpressionNoIn_return retval = new AS3_exParser.conditionalExpressionNoIn_return();
        retval.start = input.LT(1);
        int conditionalExpressionNoIn_StartIndex = input.index();
        Object root_0 = null;

        Token Q=null;
        Token C=null;
        AS3_exParser.logicalORExpressionNoIn_return logicalORExpressionNoIn269 = null;

        AS3_exParser.assignmentExpression_return assignmentExpression270 = null;

        AS3_exParser.assignmentExpression_return assignmentExpression271 = null;


        Object Q_tree=null;
        Object C_tree=null;


            WrapOptions options=mPrinter.getExpressionWrapOptions();
            boolean pushedWrapInfo=false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // AS3_ex.g3:2811:5: ( logicalORExpressionNoIn (Q= QUE assignmentExpression C= COLON assignmentExpression )? )
            // AS3_ex.g3:2811:9: logicalORExpressionNoIn (Q= QUE assignmentExpression C= COLON assignmentExpression )?
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              pushedWrapInfo=pushWrapInfo(options, true);
            }
            pushFollow(FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn11926);
            logicalORExpressionNoIn269=logicalORExpressionNoIn();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, logicalORExpressionNoIn269.getTree());
            // AS3_ex.g3:2812:33: (Q= QUE assignmentExpression C= COLON assignmentExpression )?
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==QUE) ) {
                alt125=1;
            }
            switch (alt125) {
                case 1 :
                    // AS3_ex.g3:2812:35: Q= QUE assignmentExpression C= COLON assignmentExpression
                    {
                    Q=(Token)match(input,QUE,FOLLOW_QUE_in_conditionalExpressionNoIn11932); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Q_tree = (Object)adaptor.create(Q);
                    adaptor.addChild(root_0, Q_tree);
                    }
                    if ( state.backtracking==0 ) {
                      indentEmit(Q, ASPrettyPrinter.Break_Ternary_code);
                    }
                    pushFollow(FOLLOW_assignmentExpression_in_conditionalExpressionNoIn11936);
                    assignmentExpression270=assignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentExpression270.getTree());
                    if ( state.backtracking==0 ) {
                      popIndent();
                    }
                    C=(Token)match(input,COLON,FOLLOW_COLON_in_conditionalExpressionNoIn11943); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    C_tree = (Object)adaptor.create(C);
                    adaptor.addChild(root_0, C_tree);
                    }
                    if ( state.backtracking==0 ) {
                      indentEmit(C, ASPrettyPrinter.Break_Ternary_code);
                    }
                    pushFollow(FOLLOW_assignmentExpression_in_conditionalExpressionNoIn11948);
                    assignmentExpression271=assignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentExpression271.getTree());
                    if ( state.backtracking==0 ) {
                      popIndent();
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              if (pushedWrapInfo) mPrinter.popWrapContext();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, conditionalExpressionNoIn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalExpressionNoIn"

    public static class logicalORExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logicalORExpression"
    // AS3_ex.g3:2817:1: logicalORExpression : logicalANDExpression (L= LOR logicalANDExpression )* ;
    public final AS3_exParser.logicalORExpression_return logicalORExpression() throws RecognitionException {
        AS3_exParser.logicalORExpression_return retval = new AS3_exParser.logicalORExpression_return();
        retval.start = input.LT(1);
        int logicalORExpression_StartIndex = input.index();
        Object root_0 = null;

        Token L=null;
        AS3_exParser.logicalANDExpression_return logicalANDExpression272 = null;

        AS3_exParser.logicalANDExpression_return logicalANDExpression273 = null;


        Object L_tree=null;


            WrapOptions options=mPrinter.getExpressionWrapOptions();
            boolean pushedWrapInfo=false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // AS3_ex.g3:2822:5: ( logicalANDExpression (L= LOR logicalANDExpression )* )
            // AS3_ex.g3:2822:9: logicalANDExpression (L= LOR logicalANDExpression )*
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              pushedWrapInfo=pushWrapInfo(options, true);
            }
            pushFollow(FOLLOW_logicalANDExpression_in_logicalORExpression12005);
            logicalANDExpression272=logicalANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, logicalANDExpression272.getTree());
            // AS3_ex.g3:2823:30: (L= LOR logicalANDExpression )*
            loop126:
            do {
                int alt126=2;
                int LA126_0 = input.LA(1);

                if ( (LA126_0==LOR) ) {
                    int LA126_2 = input.LA(2);

                    if ( (synpred257_AS3_ex()) ) {
                        alt126=1;
                    }


                }


                switch (alt126) {
            	case 1 :
            	    // AS3_ex.g3:2823:32: L= LOR logicalANDExpression
            	    {
            	    L=(Token)match(input,LOR,FOLLOW_LOR_in_logicalORExpression12011); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    L_tree = (Object)adaptor.create(L);
            	    adaptor.addChild(root_0, L_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      indentEmit(L, ASPrettyPrinter.Break_Logical_Ops_code);
            	    }
            	    pushFollow(FOLLOW_logicalANDExpression_in_logicalORExpression12015);
            	    logicalANDExpression273=logicalANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, logicalANDExpression273.getTree());
            	    if ( state.backtracking==0 ) {
            	      popIndent();
            	    }

            	    }
            	    break;

            	default :
            	    break loop126;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              if (pushedWrapInfo) mPrinter.popWrapContext();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, logicalORExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "logicalORExpression"

    public static class logicalORExpressionNoIn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logicalORExpressionNoIn"
    // AS3_ex.g3:2827:1: logicalORExpressionNoIn : logicalANDExpressionNoIn (L= LOR logicalANDExpressionNoIn )* ;
    public final AS3_exParser.logicalORExpressionNoIn_return logicalORExpressionNoIn() throws RecognitionException {
        AS3_exParser.logicalORExpressionNoIn_return retval = new AS3_exParser.logicalORExpressionNoIn_return();
        retval.start = input.LT(1);
        int logicalORExpressionNoIn_StartIndex = input.index();
        Object root_0 = null;

        Token L=null;
        AS3_exParser.logicalANDExpressionNoIn_return logicalANDExpressionNoIn274 = null;

        AS3_exParser.logicalANDExpressionNoIn_return logicalANDExpressionNoIn275 = null;


        Object L_tree=null;


            WrapOptions options=mPrinter.getExpressionWrapOptions();
            boolean pushedWrapInfo=false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // AS3_ex.g3:2832:5: ( logicalANDExpressionNoIn (L= LOR logicalANDExpressionNoIn )* )
            // AS3_ex.g3:2832:9: logicalANDExpressionNoIn (L= LOR logicalANDExpressionNoIn )*
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              pushedWrapInfo=pushWrapInfo(options, true);
            }
            pushFollow(FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn12068);
            logicalANDExpressionNoIn274=logicalANDExpressionNoIn();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, logicalANDExpressionNoIn274.getTree());
            // AS3_ex.g3:2833:34: (L= LOR logicalANDExpressionNoIn )*
            loop127:
            do {
                int alt127=2;
                int LA127_0 = input.LA(1);

                if ( (LA127_0==LOR) ) {
                    alt127=1;
                }


                switch (alt127) {
            	case 1 :
            	    // AS3_ex.g3:2833:36: L= LOR logicalANDExpressionNoIn
            	    {
            	    L=(Token)match(input,LOR,FOLLOW_LOR_in_logicalORExpressionNoIn12074); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    L_tree = (Object)adaptor.create(L);
            	    adaptor.addChild(root_0, L_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      indentEmit(L, ASPrettyPrinter.Break_Logical_Ops_code);
            	    }
            	    pushFollow(FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn12078);
            	    logicalANDExpressionNoIn275=logicalANDExpressionNoIn();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, logicalANDExpressionNoIn275.getTree());
            	    if ( state.backtracking==0 ) {
            	      popIndent();
            	    }

            	    }
            	    break;

            	default :
            	    break loop127;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              if (pushedWrapInfo) mPrinter.popWrapContext();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, logicalORExpressionNoIn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "logicalORExpressionNoIn"

    public static class logicalANDExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logicalANDExpression"
    // AS3_ex.g3:2837:1: logicalANDExpression : bitwiseORExpression (L= LAND bitwiseORExpression )* ;
    public final AS3_exParser.logicalANDExpression_return logicalANDExpression() throws RecognitionException {
        AS3_exParser.logicalANDExpression_return retval = new AS3_exParser.logicalANDExpression_return();
        retval.start = input.LT(1);
        int logicalANDExpression_StartIndex = input.index();
        Object root_0 = null;

        Token L=null;
        AS3_exParser.bitwiseORExpression_return bitwiseORExpression276 = null;

        AS3_exParser.bitwiseORExpression_return bitwiseORExpression277 = null;


        Object L_tree=null;


            WrapOptions options=mPrinter.getExpressionWrapOptions();
            boolean pushedWrapInfo=false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // AS3_ex.g3:2842:5: ( bitwiseORExpression (L= LAND bitwiseORExpression )* )
            // AS3_ex.g3:2842:9: bitwiseORExpression (L= LAND bitwiseORExpression )*
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              pushedWrapInfo=pushWrapInfo(options, true);
            }
            pushFollow(FOLLOW_bitwiseORExpression_in_logicalANDExpression12135);
            bitwiseORExpression276=bitwiseORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bitwiseORExpression276.getTree());
            // AS3_ex.g3:2843:29: (L= LAND bitwiseORExpression )*
            loop128:
            do {
                int alt128=2;
                int LA128_0 = input.LA(1);

                if ( (LA128_0==LAND) ) {
                    int LA128_2 = input.LA(2);

                    if ( (synpred259_AS3_ex()) ) {
                        alt128=1;
                    }


                }


                switch (alt128) {
            	case 1 :
            	    // AS3_ex.g3:2843:31: L= LAND bitwiseORExpression
            	    {
            	    L=(Token)match(input,LAND,FOLLOW_LAND_in_logicalANDExpression12141); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    L_tree = (Object)adaptor.create(L);
            	    adaptor.addChild(root_0, L_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      indentEmit(L, ASPrettyPrinter.Break_Logical_Ops_code);
            	    }
            	    pushFollow(FOLLOW_bitwiseORExpression_in_logicalANDExpression12145);
            	    bitwiseORExpression277=bitwiseORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bitwiseORExpression277.getTree());
            	    if ( state.backtracking==0 ) {
            	      popIndent();
            	    }

            	    }
            	    break;

            	default :
            	    break loop128;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              if (pushedWrapInfo) mPrinter.popWrapContext();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, logicalANDExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "logicalANDExpression"

    public static class logicalANDExpressionNoIn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logicalANDExpressionNoIn"
    // AS3_ex.g3:2847:1: logicalANDExpressionNoIn : bitwiseORExpressionNoIn (L= LAND bitwiseORExpressionNoIn )* ;
    public final AS3_exParser.logicalANDExpressionNoIn_return logicalANDExpressionNoIn() throws RecognitionException {
        AS3_exParser.logicalANDExpressionNoIn_return retval = new AS3_exParser.logicalANDExpressionNoIn_return();
        retval.start = input.LT(1);
        int logicalANDExpressionNoIn_StartIndex = input.index();
        Object root_0 = null;

        Token L=null;
        AS3_exParser.bitwiseORExpressionNoIn_return bitwiseORExpressionNoIn278 = null;

        AS3_exParser.bitwiseORExpressionNoIn_return bitwiseORExpressionNoIn279 = null;


        Object L_tree=null;


            WrapOptions options=mPrinter.getExpressionWrapOptions();
            boolean pushedWrapInfo=false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // AS3_ex.g3:2852:5: ( bitwiseORExpressionNoIn (L= LAND bitwiseORExpressionNoIn )* )
            // AS3_ex.g3:2852:9: bitwiseORExpressionNoIn (L= LAND bitwiseORExpressionNoIn )*
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              pushedWrapInfo=pushWrapInfo(options, true);
            }
            pushFollow(FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn12197);
            bitwiseORExpressionNoIn278=bitwiseORExpressionNoIn();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bitwiseORExpressionNoIn278.getTree());
            // AS3_ex.g3:2853:33: (L= LAND bitwiseORExpressionNoIn )*
            loop129:
            do {
                int alt129=2;
                int LA129_0 = input.LA(1);

                if ( (LA129_0==LAND) ) {
                    alt129=1;
                }


                switch (alt129) {
            	case 1 :
            	    // AS3_ex.g3:2853:35: L= LAND bitwiseORExpressionNoIn
            	    {
            	    L=(Token)match(input,LAND,FOLLOW_LAND_in_logicalANDExpressionNoIn12203); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    L_tree = (Object)adaptor.create(L);
            	    adaptor.addChild(root_0, L_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      indentEmit(L, ASPrettyPrinter.Break_Logical_Ops_code);
            	    }
            	    pushFollow(FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn12207);
            	    bitwiseORExpressionNoIn279=bitwiseORExpressionNoIn();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bitwiseORExpressionNoIn279.getTree());
            	    if ( state.backtracking==0 ) {
            	      popIndent();
            	    }

            	    }
            	    break;

            	default :
            	    break loop129;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              if (pushedWrapInfo) mPrinter.popWrapContext();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, logicalANDExpressionNoIn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "logicalANDExpressionNoIn"

    public static class bitwiseORExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bitwiseORExpression"
    // AS3_ex.g3:2858:1: bitwiseORExpression : bitwiseXORExpression (O= OR bitwiseXORExpression )* ;
    public final AS3_exParser.bitwiseORExpression_return bitwiseORExpression() throws RecognitionException {
        AS3_exParser.bitwiseORExpression_return retval = new AS3_exParser.bitwiseORExpression_return();
        retval.start = input.LT(1);
        int bitwiseORExpression_StartIndex = input.index();
        Object root_0 = null;

        Token O=null;
        AS3_exParser.bitwiseXORExpression_return bitwiseXORExpression280 = null;

        AS3_exParser.bitwiseXORExpression_return bitwiseXORExpression281 = null;


        Object O_tree=null;


            WrapOptions options=mPrinter.getExpressionWrapOptions();
            boolean pushedWrapInfo=false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // AS3_ex.g3:2863:5: ( bitwiseXORExpression (O= OR bitwiseXORExpression )* )
            // AS3_ex.g3:2863:9: bitwiseXORExpression (O= OR bitwiseXORExpression )*
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              pushedWrapInfo=pushWrapInfo(options, true);
            }
            pushFollow(FOLLOW_bitwiseXORExpression_in_bitwiseORExpression12264);
            bitwiseXORExpression280=bitwiseXORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bitwiseXORExpression280.getTree());
            // AS3_ex.g3:2864:30: (O= OR bitwiseXORExpression )*
            loop130:
            do {
                int alt130=2;
                int LA130_0 = input.LA(1);

                if ( (LA130_0==OR) ) {
                    int LA130_2 = input.LA(2);

                    if ( (synpred261_AS3_ex()) ) {
                        alt130=1;
                    }


                }


                switch (alt130) {
            	case 1 :
            	    // AS3_ex.g3:2864:32: O= OR bitwiseXORExpression
            	    {
            	    O=(Token)match(input,OR,FOLLOW_OR_in_bitwiseORExpression12270); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    O_tree = (Object)adaptor.create(O);
            	    adaptor.addChild(root_0, O_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      indentEmit(O, ASPrettyPrinter.Break_Arithmetic_Ops_code);
            	    }
            	    pushFollow(FOLLOW_bitwiseXORExpression_in_bitwiseORExpression12274);
            	    bitwiseXORExpression281=bitwiseXORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bitwiseXORExpression281.getTree());
            	    if ( state.backtracking==0 ) {
            	      popIndent();
            	    }

            	    }
            	    break;

            	default :
            	    break loop130;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              if (pushedWrapInfo) mPrinter.popWrapContext();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, bitwiseORExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bitwiseORExpression"

    public static class bitwiseORExpressionNoIn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bitwiseORExpressionNoIn"
    // AS3_ex.g3:2868:1: bitwiseORExpressionNoIn : bitwiseXORExpressionNoIn (O= OR bitwiseXORExpressionNoIn )* ;
    public final AS3_exParser.bitwiseORExpressionNoIn_return bitwiseORExpressionNoIn() throws RecognitionException {
        AS3_exParser.bitwiseORExpressionNoIn_return retval = new AS3_exParser.bitwiseORExpressionNoIn_return();
        retval.start = input.LT(1);
        int bitwiseORExpressionNoIn_StartIndex = input.index();
        Object root_0 = null;

        Token O=null;
        AS3_exParser.bitwiseXORExpressionNoIn_return bitwiseXORExpressionNoIn282 = null;

        AS3_exParser.bitwiseXORExpressionNoIn_return bitwiseXORExpressionNoIn283 = null;


        Object O_tree=null;


            WrapOptions options=mPrinter.getExpressionWrapOptions();
            boolean pushedWrapInfo=false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // AS3_ex.g3:2873:5: ( bitwiseXORExpressionNoIn (O= OR bitwiseXORExpressionNoIn )* )
            // AS3_ex.g3:2873:9: bitwiseXORExpressionNoIn (O= OR bitwiseXORExpressionNoIn )*
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              pushedWrapInfo=pushWrapInfo(options, true);
            }
            pushFollow(FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn12326);
            bitwiseXORExpressionNoIn282=bitwiseXORExpressionNoIn();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bitwiseXORExpressionNoIn282.getTree());
            // AS3_ex.g3:2874:34: (O= OR bitwiseXORExpressionNoIn )*
            loop131:
            do {
                int alt131=2;
                int LA131_0 = input.LA(1);

                if ( (LA131_0==OR) ) {
                    alt131=1;
                }


                switch (alt131) {
            	case 1 :
            	    // AS3_ex.g3:2874:36: O= OR bitwiseXORExpressionNoIn
            	    {
            	    O=(Token)match(input,OR,FOLLOW_OR_in_bitwiseORExpressionNoIn12332); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    O_tree = (Object)adaptor.create(O);
            	    adaptor.addChild(root_0, O_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      indentEmit(O, ASPrettyPrinter.Break_Arithmetic_Ops_code);
            	    }
            	    pushFollow(FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn12336);
            	    bitwiseXORExpressionNoIn283=bitwiseXORExpressionNoIn();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bitwiseXORExpressionNoIn283.getTree());
            	    if ( state.backtracking==0 ) {
            	      popIndent();
            	    }

            	    }
            	    break;

            	default :
            	    break loop131;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              if (pushedWrapInfo) mPrinter.popWrapContext();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, bitwiseORExpressionNoIn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bitwiseORExpressionNoIn"

    public static class bitwiseXORExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bitwiseXORExpression"
    // AS3_ex.g3:2878:1: bitwiseXORExpression : bitwiseANDExpression (x= XOR bitwiseANDExpression )* ;
    public final AS3_exParser.bitwiseXORExpression_return bitwiseXORExpression() throws RecognitionException {
        AS3_exParser.bitwiseXORExpression_return retval = new AS3_exParser.bitwiseXORExpression_return();
        retval.start = input.LT(1);
        int bitwiseXORExpression_StartIndex = input.index();
        Object root_0 = null;

        Token x=null;
        AS3_exParser.bitwiseANDExpression_return bitwiseANDExpression284 = null;

        AS3_exParser.bitwiseANDExpression_return bitwiseANDExpression285 = null;


        Object x_tree=null;


            WrapOptions options=mPrinter.getExpressionWrapOptions();
            boolean pushedWrapInfo=false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // AS3_ex.g3:2883:5: ( bitwiseANDExpression (x= XOR bitwiseANDExpression )* )
            // AS3_ex.g3:2883:9: bitwiseANDExpression (x= XOR bitwiseANDExpression )*
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              pushedWrapInfo=pushWrapInfo(options, true);
            }
            pushFollow(FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression12392);
            bitwiseANDExpression284=bitwiseANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bitwiseANDExpression284.getTree());
            // AS3_ex.g3:2884:30: (x= XOR bitwiseANDExpression )*
            loop132:
            do {
                int alt132=2;
                int LA132_0 = input.LA(1);

                if ( (LA132_0==XOR) ) {
                    int LA132_2 = input.LA(2);

                    if ( (synpred263_AS3_ex()) ) {
                        alt132=1;
                    }


                }


                switch (alt132) {
            	case 1 :
            	    // AS3_ex.g3:2884:32: x= XOR bitwiseANDExpression
            	    {
            	    x=(Token)match(input,XOR,FOLLOW_XOR_in_bitwiseXORExpression12398); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    x_tree = (Object)adaptor.create(x);
            	    adaptor.addChild(root_0, x_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      indentEmit(x, ASPrettyPrinter.Break_Arithmetic_Ops_code);
            	    }
            	    pushFollow(FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression12402);
            	    bitwiseANDExpression285=bitwiseANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bitwiseANDExpression285.getTree());
            	    if ( state.backtracking==0 ) {
            	      popIndent();
            	    }

            	    }
            	    break;

            	default :
            	    break loop132;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              if (pushedWrapInfo) mPrinter.popWrapContext();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 114, bitwiseXORExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bitwiseXORExpression"

    public static class bitwiseXORExpressionNoIn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bitwiseXORExpressionNoIn"
    // AS3_ex.g3:2888:1: bitwiseXORExpressionNoIn : bitwiseANDExpressionNoIn (x= XOR bitwiseANDExpressionNoIn )* ;
    public final AS3_exParser.bitwiseXORExpressionNoIn_return bitwiseXORExpressionNoIn() throws RecognitionException {
        AS3_exParser.bitwiseXORExpressionNoIn_return retval = new AS3_exParser.bitwiseXORExpressionNoIn_return();
        retval.start = input.LT(1);
        int bitwiseXORExpressionNoIn_StartIndex = input.index();
        Object root_0 = null;

        Token x=null;
        AS3_exParser.bitwiseANDExpressionNoIn_return bitwiseANDExpressionNoIn286 = null;

        AS3_exParser.bitwiseANDExpressionNoIn_return bitwiseANDExpressionNoIn287 = null;


        Object x_tree=null;


            WrapOptions options=mPrinter.getExpressionWrapOptions();
            boolean pushedWrapInfo=false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // AS3_ex.g3:2893:5: ( bitwiseANDExpressionNoIn (x= XOR bitwiseANDExpressionNoIn )* )
            // AS3_ex.g3:2893:9: bitwiseANDExpressionNoIn (x= XOR bitwiseANDExpressionNoIn )*
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              pushedWrapInfo=pushWrapInfo(options, true);
            }
            pushFollow(FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn12454);
            bitwiseANDExpressionNoIn286=bitwiseANDExpressionNoIn();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bitwiseANDExpressionNoIn286.getTree());
            // AS3_ex.g3:2894:34: (x= XOR bitwiseANDExpressionNoIn )*
            loop133:
            do {
                int alt133=2;
                int LA133_0 = input.LA(1);

                if ( (LA133_0==XOR) ) {
                    alt133=1;
                }


                switch (alt133) {
            	case 1 :
            	    // AS3_ex.g3:2894:36: x= XOR bitwiseANDExpressionNoIn
            	    {
            	    x=(Token)match(input,XOR,FOLLOW_XOR_in_bitwiseXORExpressionNoIn12460); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    x_tree = (Object)adaptor.create(x);
            	    adaptor.addChild(root_0, x_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      indentEmit(x, ASPrettyPrinter.Break_Arithmetic_Ops_code);
            	    }
            	    pushFollow(FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn12464);
            	    bitwiseANDExpressionNoIn287=bitwiseANDExpressionNoIn();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bitwiseANDExpressionNoIn287.getTree());
            	    if ( state.backtracking==0 ) {
            	      popIndent();
            	    }

            	    }
            	    break;

            	default :
            	    break loop133;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              if (pushedWrapInfo) mPrinter.popWrapContext();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 115, bitwiseXORExpressionNoIn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bitwiseXORExpressionNoIn"

    public static class bitwiseANDExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bitwiseANDExpression"
    // AS3_ex.g3:2898:1: bitwiseANDExpression : equalityExpression (A= AND equalityExpression )* ;
    public final AS3_exParser.bitwiseANDExpression_return bitwiseANDExpression() throws RecognitionException {
        AS3_exParser.bitwiseANDExpression_return retval = new AS3_exParser.bitwiseANDExpression_return();
        retval.start = input.LT(1);
        int bitwiseANDExpression_StartIndex = input.index();
        Object root_0 = null;

        Token A=null;
        AS3_exParser.equalityExpression_return equalityExpression288 = null;

        AS3_exParser.equalityExpression_return equalityExpression289 = null;


        Object A_tree=null;


            WrapOptions options=mPrinter.getExpressionWrapOptions();
            boolean pushedWrapInfo=false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }
            // AS3_ex.g3:2903:5: ( equalityExpression (A= AND equalityExpression )* )
            // AS3_ex.g3:2903:9: equalityExpression (A= AND equalityExpression )*
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              pushedWrapInfo=pushWrapInfo(options, true);
            }
            pushFollow(FOLLOW_equalityExpression_in_bitwiseANDExpression12516);
            equalityExpression288=equalityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, equalityExpression288.getTree());
            // AS3_ex.g3:2904:28: (A= AND equalityExpression )*
            loop134:
            do {
                int alt134=2;
                int LA134_0 = input.LA(1);

                if ( (LA134_0==AND) ) {
                    int LA134_2 = input.LA(2);

                    if ( (synpred265_AS3_ex()) ) {
                        alt134=1;
                    }


                }


                switch (alt134) {
            	case 1 :
            	    // AS3_ex.g3:2904:30: A= AND equalityExpression
            	    {
            	    A=(Token)match(input,AND,FOLLOW_AND_in_bitwiseANDExpression12522); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    A_tree = (Object)adaptor.create(A);
            	    adaptor.addChild(root_0, A_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      indentEmit(A, ASPrettyPrinter.Break_Arithmetic_Ops_code);
            	    }
            	    pushFollow(FOLLOW_equalityExpression_in_bitwiseANDExpression12526);
            	    equalityExpression289=equalityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, equalityExpression289.getTree());
            	    if ( state.backtracking==0 ) {
            	      popIndent();
            	    }

            	    }
            	    break;

            	default :
            	    break loop134;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              if (pushedWrapInfo) mPrinter.popWrapContext();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, bitwiseANDExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bitwiseANDExpression"

    public static class bitwiseANDExpressionNoIn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bitwiseANDExpressionNoIn"
    // AS3_ex.g3:2908:1: bitwiseANDExpressionNoIn : equalityExpressionNoIn (A= AND equalityExpressionNoIn )* ;
    public final AS3_exParser.bitwiseANDExpressionNoIn_return bitwiseANDExpressionNoIn() throws RecognitionException {
        AS3_exParser.bitwiseANDExpressionNoIn_return retval = new AS3_exParser.bitwiseANDExpressionNoIn_return();
        retval.start = input.LT(1);
        int bitwiseANDExpressionNoIn_StartIndex = input.index();
        Object root_0 = null;

        Token A=null;
        AS3_exParser.equalityExpressionNoIn_return equalityExpressionNoIn290 = null;

        AS3_exParser.equalityExpressionNoIn_return equalityExpressionNoIn291 = null;


        Object A_tree=null;


            WrapOptions options=mPrinter.getExpressionWrapOptions();
            boolean pushedWrapInfo=false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }
            // AS3_ex.g3:2913:5: ( equalityExpressionNoIn (A= AND equalityExpressionNoIn )* )
            // AS3_ex.g3:2913:9: equalityExpressionNoIn (A= AND equalityExpressionNoIn )*
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              pushedWrapInfo=pushWrapInfo(options, true);
            }
            pushFollow(FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn12578);
            equalityExpressionNoIn290=equalityExpressionNoIn();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, equalityExpressionNoIn290.getTree());
            // AS3_ex.g3:2914:32: (A= AND equalityExpressionNoIn )*
            loop135:
            do {
                int alt135=2;
                int LA135_0 = input.LA(1);

                if ( (LA135_0==AND) ) {
                    alt135=1;
                }


                switch (alt135) {
            	case 1 :
            	    // AS3_ex.g3:2914:34: A= AND equalityExpressionNoIn
            	    {
            	    A=(Token)match(input,AND,FOLLOW_AND_in_bitwiseANDExpressionNoIn12584); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    A_tree = (Object)adaptor.create(A);
            	    adaptor.addChild(root_0, A_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      indentEmit(A, ASPrettyPrinter.Break_Arithmetic_Ops_code);
            	    }
            	    pushFollow(FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn12588);
            	    equalityExpressionNoIn291=equalityExpressionNoIn();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, equalityExpressionNoIn291.getTree());
            	    if ( state.backtracking==0 ) {
            	      popIndent();
            	    }

            	    }
            	    break;

            	default :
            	    break loop135;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              if (pushedWrapInfo) mPrinter.popWrapContext();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 117, bitwiseANDExpressionNoIn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bitwiseANDExpressionNoIn"

    public static class equalityExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equalityExpression"
    // AS3_ex.g3:2919:1: equalityExpression : relationalExpression (eq= ( EQ | NEQ | SAME | NSAME ) relationalExpression )* ;
    public final AS3_exParser.equalityExpression_return equalityExpression() throws RecognitionException {
        AS3_exParser.equalityExpression_return retval = new AS3_exParser.equalityExpression_return();
        retval.start = input.LT(1);
        int equalityExpression_StartIndex = input.index();
        Object root_0 = null;

        Token eq=null;
        AS3_exParser.relationalExpression_return relationalExpression292 = null;

        AS3_exParser.relationalExpression_return relationalExpression293 = null;


        Object eq_tree=null;


            WrapOptions options=mPrinter.getExpressionWrapOptions();
            boolean pushedWrapInfo=false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }
            // AS3_ex.g3:2924:5: ( relationalExpression (eq= ( EQ | NEQ | SAME | NSAME ) relationalExpression )* )
            // AS3_ex.g3:2924:9: relationalExpression (eq= ( EQ | NEQ | SAME | NSAME ) relationalExpression )*
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              pushedWrapInfo=pushWrapInfo(options, true);
            }
            pushFollow(FOLLOW_relationalExpression_in_equalityExpression12641);
            relationalExpression292=relationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, relationalExpression292.getTree());
            // AS3_ex.g3:2925:30: (eq= ( EQ | NEQ | SAME | NSAME ) relationalExpression )*
            loop136:
            do {
                int alt136=2;
                int LA136_0 = input.LA(1);

                if ( ((LA136_0>=EQ && LA136_0<=NSAME)) ) {
                    int LA136_2 = input.LA(2);

                    if ( (synpred270_AS3_ex()) ) {
                        alt136=1;
                    }


                }


                switch (alt136) {
            	case 1 :
            	    // AS3_ex.g3:2925:32: eq= ( EQ | NEQ | SAME | NSAME ) relationalExpression
            	    {
            	    eq=(Token)input.LT(1);
            	    if ( (input.LA(1)>=EQ && input.LA(1)<=NSAME) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(eq));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    if ( state.backtracking==0 ) {
            	      indentEmit(eq, ASPrettyPrinter.Break_Arithmetic_Ops_code);
            	    }
            	    pushFollow(FOLLOW_relationalExpression_in_equalityExpression12659);
            	    relationalExpression293=relationalExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, relationalExpression293.getTree());
            	    if ( state.backtracking==0 ) {
            	      popIndent();
            	    }

            	    }
            	    break;

            	default :
            	    break loop136;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              if (pushedWrapInfo) mPrinter.popWrapContext();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 118, equalityExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "equalityExpression"

    public static class equalityExpressionNoIn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equalityExpressionNoIn"
    // AS3_ex.g3:2929:1: equalityExpressionNoIn : relationalExpressionNoIn (eq= ( EQ | NEQ | SAME | NSAME ) relationalExpressionNoIn )* ;
    public final AS3_exParser.equalityExpressionNoIn_return equalityExpressionNoIn() throws RecognitionException {
        AS3_exParser.equalityExpressionNoIn_return retval = new AS3_exParser.equalityExpressionNoIn_return();
        retval.start = input.LT(1);
        int equalityExpressionNoIn_StartIndex = input.index();
        Object root_0 = null;

        Token eq=null;
        AS3_exParser.relationalExpressionNoIn_return relationalExpressionNoIn294 = null;

        AS3_exParser.relationalExpressionNoIn_return relationalExpressionNoIn295 = null;


        Object eq_tree=null;


            WrapOptions options=mPrinter.getExpressionWrapOptions();
            boolean pushedWrapInfo=false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }
            // AS3_ex.g3:2934:5: ( relationalExpressionNoIn (eq= ( EQ | NEQ | SAME | NSAME ) relationalExpressionNoIn )* )
            // AS3_ex.g3:2934:9: relationalExpressionNoIn (eq= ( EQ | NEQ | SAME | NSAME ) relationalExpressionNoIn )*
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              pushedWrapInfo=pushWrapInfo(options, true);
            }
            pushFollow(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn12711);
            relationalExpressionNoIn294=relationalExpressionNoIn();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, relationalExpressionNoIn294.getTree());
            // AS3_ex.g3:2935:34: (eq= ( EQ | NEQ | SAME | NSAME ) relationalExpressionNoIn )*
            loop137:
            do {
                int alt137=2;
                int LA137_0 = input.LA(1);

                if ( ((LA137_0>=EQ && LA137_0<=NSAME)) ) {
                    alt137=1;
                }


                switch (alt137) {
            	case 1 :
            	    // AS3_ex.g3:2935:36: eq= ( EQ | NEQ | SAME | NSAME ) relationalExpressionNoIn
            	    {
            	    eq=(Token)input.LT(1);
            	    if ( (input.LA(1)>=EQ && input.LA(1)<=NSAME) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(eq));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    if ( state.backtracking==0 ) {
            	      indentEmit(eq, ASPrettyPrinter.Break_Arithmetic_Ops_code);
            	    }
            	    pushFollow(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn12730);
            	    relationalExpressionNoIn295=relationalExpressionNoIn();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, relationalExpressionNoIn295.getTree());
            	    if ( state.backtracking==0 ) {
            	      popIndent();
            	    }

            	    }
            	    break;

            	default :
            	    break loop137;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              if (pushedWrapInfo) mPrinter.popWrapContext();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 119, equalityExpressionNoIn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "equalityExpressionNoIn"

    public static class relationalExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalExpression"
    // AS3_ex.g3:2940:1: relationalExpression : shiftExpression ( (g= GT (assign= ASSIGN )? | eq= ( IN | LT | LTE | INSTANCEOF | IS | AS ) ) shiftExpression )* ;
    public final AS3_exParser.relationalExpression_return relationalExpression() throws RecognitionException {
        AS3_exParser.relationalExpression_return retval = new AS3_exParser.relationalExpression_return();
        retval.start = input.LT(1);
        int relationalExpression_StartIndex = input.index();
        Object root_0 = null;

        Token g=null;
        Token assign=null;
        Token eq=null;
        AS3_exParser.shiftExpression_return shiftExpression296 = null;

        AS3_exParser.shiftExpression_return shiftExpression297 = null;


        Object g_tree=null;
        Object assign_tree=null;
        Object eq_tree=null;


            WrapOptions options=mPrinter.getExpressionWrapOptions();
            boolean pushedWrapInfo=false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }
            // AS3_ex.g3:2945:5: ( shiftExpression ( (g= GT (assign= ASSIGN )? | eq= ( IN | LT | LTE | INSTANCEOF | IS | AS ) ) shiftExpression )* )
            // AS3_ex.g3:2945:9: shiftExpression ( (g= GT (assign= ASSIGN )? | eq= ( IN | LT | LTE | INSTANCEOF | IS | AS ) ) shiftExpression )*
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              pushedWrapInfo=pushWrapInfo(options, true);
            }
            pushFollow(FOLLOW_shiftExpression_in_relationalExpression12783);
            shiftExpression296=shiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, shiftExpression296.getTree());
            // AS3_ex.g3:2947:6: ( (g= GT (assign= ASSIGN )? | eq= ( IN | LT | LTE | INSTANCEOF | IS | AS ) ) shiftExpression )*
            loop140:
            do {
                int alt140=2;
                switch ( input.LA(1) ) {
                case LT:
                    {
                    int LA140_2 = input.LA(2);

                    if ( (synpred282_AS3_ex()) ) {
                        alt140=1;
                    }


                    }
                    break;
                case IN:
                    {
                    int LA140_3 = input.LA(2);

                    if ( (synpred282_AS3_ex()) ) {
                        alt140=1;
                    }


                    }
                    break;
                case AS:
                case INSTANCEOF:
                case IS:
                    {
                    int LA140_4 = input.LA(2);

                    if ( (synpred282_AS3_ex()) ) {
                        alt140=1;
                    }


                    }
                    break;
                case GT:
                    {
                    int LA140_5 = input.LA(2);

                    if ( (synpred282_AS3_ex()) ) {
                        alt140=1;
                    }


                    }
                    break;
                case LTE:
                    {
                    int LA140_6 = input.LA(2);

                    if ( (synpred282_AS3_ex()) ) {
                        alt140=1;
                    }


                    }
                    break;

                }

                switch (alt140) {
            	case 1 :
            	    // AS3_ex.g3:2948:7: (g= GT (assign= ASSIGN )? | eq= ( IN | LT | LTE | INSTANCEOF | IS | AS ) ) shiftExpression
            	    {
            	    // AS3_ex.g3:2948:7: (g= GT (assign= ASSIGN )? | eq= ( IN | LT | LTE | INSTANCEOF | IS | AS ) )
            	    int alt139=2;
            	    int LA139_0 = input.LA(1);

            	    if ( (LA139_0==GT) ) {
            	        alt139=1;
            	    }
            	    else if ( (LA139_0==AS||(LA139_0>=IN && LA139_0<=INSTANCEOF)||LA139_0==IS||LA139_0==LT||LA139_0==LTE) ) {
            	        alt139=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 139, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt139) {
            	        case 1 :
            	            // AS3_ex.g3:2948:9: g= GT (assign= ASSIGN )?
            	            {
            	            g=(Token)match(input,GT,FOLLOW_GT_in_relationalExpression12803); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            g_tree = (Object)adaptor.create(g);
            	            adaptor.addChild(root_0, g_tree);
            	            }
            	            // AS3_ex.g3:2948:14: (assign= ASSIGN )?
            	            int alt138=2;
            	            int LA138_0 = input.LA(1);

            	            if ( (LA138_0==ASSIGN) ) {
            	                alt138=1;
            	            }
            	            switch (alt138) {
            	                case 1 :
            	                    // AS3_ex.g3:2948:15: assign= ASSIGN
            	                    {
            	                    assign=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_relationalExpression12808); if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) {
            	                    assign_tree = (Object)adaptor.create(assign);
            	                    adaptor.addChild(root_0, assign_tree);
            	                    }

            	                    }
            	                    break;

            	            }

            	            if ( state.backtracking==0 ) {
            	              if (assign!=null)
            	              		         {
            	              		         	g.setText(">=");
            	              		         	g.setType(GTE);
            	              		         }
            	              		         indentEmit(g, ASPrettyPrinter.Break_Arithmetic_Ops_code);
            	              		        
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // AS3_ex.g3:2956:14: eq= ( IN | LT | LTE | INSTANCEOF | IS | AS )
            	            {
            	            eq=(Token)input.LT(1);
            	            if ( input.LA(1)==AS||(input.LA(1)>=IN && input.LA(1)<=INSTANCEOF)||input.LA(1)==IS||input.LA(1)==LT||input.LA(1)==LTE ) {
            	                input.consume();
            	                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(eq));
            	                state.errorRecovery=false;state.failed=false;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                MismatchedSetException mse = new MismatchedSetException(null,input);
            	                throw mse;
            	            }

            	            if ( state.backtracking==0 ) {
            	              indentEmit(eq, ASPrettyPrinter.Break_Arithmetic_Ops_code);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_shiftExpression_in_relationalExpression12879);
            	    shiftExpression297=shiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, shiftExpression297.getTree());
            	    if ( state.backtracking==0 ) {
            	      popIndent();
            	    }

            	    }
            	    break;

            	default :
            	    break loop140;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              if (pushedWrapInfo) mPrinter.popWrapContext();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 120, relationalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relationalExpression"

    public static class relationalExpressionNoIn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalExpressionNoIn"
    // AS3_ex.g3:2963:1: relationalExpressionNoIn : shiftExpression ( (g= GT (assign= ASSIGN )? | eq= ( LT | LTE | INSTANCEOF | IS | AS ) ) shiftExpression )* ;
    public final AS3_exParser.relationalExpressionNoIn_return relationalExpressionNoIn() throws RecognitionException {
        AS3_exParser.relationalExpressionNoIn_return retval = new AS3_exParser.relationalExpressionNoIn_return();
        retval.start = input.LT(1);
        int relationalExpressionNoIn_StartIndex = input.index();
        Object root_0 = null;

        Token g=null;
        Token assign=null;
        Token eq=null;
        AS3_exParser.shiftExpression_return shiftExpression298 = null;

        AS3_exParser.shiftExpression_return shiftExpression299 = null;


        Object g_tree=null;
        Object assign_tree=null;
        Object eq_tree=null;


            WrapOptions options=mPrinter.getExpressionWrapOptions();
            boolean pushedWrapInfo=false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }
            // AS3_ex.g3:2968:5: ( shiftExpression ( (g= GT (assign= ASSIGN )? | eq= ( LT | LTE | INSTANCEOF | IS | AS ) ) shiftExpression )* )
            // AS3_ex.g3:2968:9: shiftExpression ( (g= GT (assign= ASSIGN )? | eq= ( LT | LTE | INSTANCEOF | IS | AS ) ) shiftExpression )*
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              pushedWrapInfo=pushWrapInfo(options, true);
            }
            pushFollow(FOLLOW_shiftExpression_in_relationalExpressionNoIn12940);
            shiftExpression298=shiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, shiftExpression298.getTree());
            // AS3_ex.g3:2970:6: ( (g= GT (assign= ASSIGN )? | eq= ( LT | LTE | INSTANCEOF | IS | AS ) ) shiftExpression )*
            loop143:
            do {
                int alt143=2;
                int LA143_0 = input.LA(1);

                if ( (LA143_0==AS||LA143_0==INSTANCEOF||LA143_0==IS||(LA143_0>=LT && LA143_0<=LTE)) ) {
                    alt143=1;
                }


                switch (alt143) {
            	case 1 :
            	    // AS3_ex.g3:2971:7: (g= GT (assign= ASSIGN )? | eq= ( LT | LTE | INSTANCEOF | IS | AS ) ) shiftExpression
            	    {
            	    // AS3_ex.g3:2971:7: (g= GT (assign= ASSIGN )? | eq= ( LT | LTE | INSTANCEOF | IS | AS ) )
            	    int alt142=2;
            	    int LA142_0 = input.LA(1);

            	    if ( (LA142_0==GT) ) {
            	        alt142=1;
            	    }
            	    else if ( (LA142_0==AS||LA142_0==INSTANCEOF||LA142_0==IS||LA142_0==LT||LA142_0==LTE) ) {
            	        alt142=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 142, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt142) {
            	        case 1 :
            	            // AS3_ex.g3:2971:9: g= GT (assign= ASSIGN )?
            	            {
            	            g=(Token)match(input,GT,FOLLOW_GT_in_relationalExpressionNoIn12960); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            g_tree = (Object)adaptor.create(g);
            	            adaptor.addChild(root_0, g_tree);
            	            }
            	            // AS3_ex.g3:2971:14: (assign= ASSIGN )?
            	            int alt141=2;
            	            int LA141_0 = input.LA(1);

            	            if ( (LA141_0==ASSIGN) ) {
            	                alt141=1;
            	            }
            	            switch (alt141) {
            	                case 1 :
            	                    // AS3_ex.g3:2971:15: assign= ASSIGN
            	                    {
            	                    assign=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_relationalExpressionNoIn12965); if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) {
            	                    assign_tree = (Object)adaptor.create(assign);
            	                    adaptor.addChild(root_0, assign_tree);
            	                    }

            	                    }
            	                    break;

            	            }

            	            if ( state.backtracking==0 ) {
            	              if (assign!=null)
            	              		         {
            	              		         	g.setText(">=");
            	              		         	g.setType(GTE);
            	              		         }
            	              		         indentEmit(g, ASPrettyPrinter.Break_Arithmetic_Ops_code);
            	              		        
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // AS3_ex.g3:2979:14: eq= ( LT | LTE | INSTANCEOF | IS | AS )
            	            {
            	            eq=(Token)input.LT(1);
            	            if ( input.LA(1)==AS||input.LA(1)==INSTANCEOF||input.LA(1)==IS||input.LA(1)==LT||input.LA(1)==LTE ) {
            	                input.consume();
            	                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(eq));
            	                state.errorRecovery=false;state.failed=false;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                MismatchedSetException mse = new MismatchedSetException(null,input);
            	                throw mse;
            	            }

            	            if ( state.backtracking==0 ) {
            	              indentEmit(eq, ASPrettyPrinter.Break_Arithmetic_Ops_code);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_shiftExpression_in_relationalExpressionNoIn13034);
            	    shiftExpression299=shiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, shiftExpression299.getTree());
            	    if ( state.backtracking==0 ) {
            	      popIndent();
            	    }

            	    }
            	    break;

            	default :
            	    break loop143;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              if (pushedWrapInfo) mPrinter.popWrapContext();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 121, relationalExpressionNoIn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relationalExpressionNoIn"

    public static class shiftExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftExpression"
    // AS3_ex.g3:2987:1: shiftExpression : additiveExpression ( (t1= SHL | ( ( '>' '>' )=>t1= '>' t2= '>' {...}? -> SHR ) | ( ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}? -> SHU ) ) additiveExpression )* ;
    public final AS3_exParser.shiftExpression_return shiftExpression() throws RecognitionException {
        AS3_exParser.shiftExpression_return retval = new AS3_exParser.shiftExpression_return();
        retval.start = input.LT(1);
        int shiftExpression_StartIndex = input.index();
        Object root_0 = null;

        Token t1=null;
        Token t2=null;
        Token t3=null;
        AS3_exParser.additiveExpression_return additiveExpression300 = null;

        AS3_exParser.additiveExpression_return additiveExpression301 = null;


        Object t1_tree=null;
        Object t2_tree=null;
        Object t3_tree=null;
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_SHL=new RewriteRuleTokenStream(adaptor,"token SHL");
        RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");

            WrapOptions options=mPrinter.getExpressionWrapOptions();
            boolean pushedWrapInfo=false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }
            // AS3_ex.g3:2992:5: ( additiveExpression ( (t1= SHL | ( ( '>' '>' )=>t1= '>' t2= '>' {...}? -> SHR ) | ( ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}? -> SHU ) ) additiveExpression )* )
            // AS3_ex.g3:2992:9: additiveExpression ( (t1= SHL | ( ( '>' '>' )=>t1= '>' t2= '>' {...}? -> SHR ) | ( ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}? -> SHU ) ) additiveExpression )*
            {
            if ( state.backtracking==0 ) {
              pushedWrapInfo=pushWrapInfo(options, true);
            }
            pushFollow(FOLLOW_additiveExpression_in_shiftExpression13092);
            additiveExpression300=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression300.getTree());
            // AS3_ex.g3:2993:28: ( (t1= SHL | ( ( '>' '>' )=>t1= '>' t2= '>' {...}? -> SHR ) | ( ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}? -> SHU ) ) additiveExpression )*
            loop145:
            do {
                int alt145=2;
                int LA145_0 = input.LA(1);

                if ( (LA145_0==GT) ) {
                    int LA145_1 = input.LA(2);

                    if ( (synpred294_AS3_ex()) ) {
                        alt145=1;
                    }


                }
                else if ( (LA145_0==SHL) ) {
                    int LA145_3 = input.LA(2);

                    if ( (synpred294_AS3_ex()) ) {
                        alt145=1;
                    }


                }


                switch (alt145) {
            	case 1 :
            	    // AS3_ex.g3:2994:7: (t1= SHL | ( ( '>' '>' )=>t1= '>' t2= '>' {...}? -> SHR ) | ( ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}? -> SHU ) ) additiveExpression
            	    {
            	    // AS3_ex.g3:2994:7: (t1= SHL | ( ( '>' '>' )=>t1= '>' t2= '>' {...}? -> SHR ) | ( ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}? -> SHU ) )
            	    int alt144=3;
            	    int LA144_0 = input.LA(1);

            	    if ( (LA144_0==SHL) ) {
            	        alt144=1;
            	    }
            	    else if ( (LA144_0==GT) ) {
            	        int LA144_2 = input.LA(2);

            	        if ( (LA144_2==GT) ) {
            	            int LA144_3 = input.LA(3);

            	            if ( (LA144_3==GT) && (synpred293_AS3_ex())) {
            	                alt144=3;
            	            }
            	            else if ( ((LA144_3>=AS && LA144_3<=STATIC)||LA144_3==LCURLY||LA144_3==LPAREN||LA144_3==LBRACK||LA144_3==LT||(LA144_3>=PLUS && LA144_3<=STAR)||(LA144_3>=INC && LA144_3<=DEC)||(LA144_3>=NOT && LA144_3<=INV)||(LA144_3>=XML_AT && LA144_3<=XML_LS_STD)||(LA144_3>=SINGLE_QUOTE_LITERAL && LA144_3<=DOUBLE_QUOTE_LITERAL)||LA144_3==REGULAR_EXPR_LITERAL||LA144_3==HEX_NUMBER_LITERAL||LA144_3==DEC_NUMBER_LITERAL||LA144_3==IDENTIFIER||(LA144_3>=XML_COMMENT && LA144_3<=XML_PI)) ) {
            	                alt144=2;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 144, 3, input);

            	                throw nvae;
            	            }
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 144, 2, input);

            	            throw nvae;
            	        }
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 144, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt144) {
            	        case 1 :
            	            // AS3_ex.g3:2995:8: t1= SHL
            	            {
            	            t1=(Token)match(input,SHL,FOLLOW_SHL_in_shiftExpression13114); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SHL.add(t1);


            	            }
            	            break;
            	        case 2 :
            	            // AS3_ex.g3:3000:11: ( ( '>' '>' )=>t1= '>' t2= '>' {...}? -> SHR )
            	            {
            	            // AS3_ex.g3:3000:11: ( ( '>' '>' )=>t1= '>' t2= '>' {...}? -> SHR )
            	            // AS3_ex.g3:3000:12: ( '>' '>' )=>t1= '>' t2= '>' {...}?
            	            {
            	            t1=(Token)match(input,GT,FOLLOW_GT_in_shiftExpression13145); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_GT.add(t1);

            	            t2=(Token)match(input,GT,FOLLOW_GT_in_shiftExpression13149); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_GT.add(t2);

            	            if ( !(( t1.getLine() == t2.getLine() && 
            	                      			t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() )) ) {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                throw new FailedPredicateException(input, "shiftExpression", " $t1.getLine() == $t2.getLine() && \r\n          \t\t\t$t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() ");
            	            }


            	            // AST REWRITE
            	            // elements: 
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            	            root_0 = (Object)adaptor.nil();
            	            // 3003:10: -> SHR
            	            {
            	                adaptor.addChild(root_0, (Object)adaptor.create(SHR, "SHR"));

            	            }

            	            retval.tree = root_0;}
            	            }

            	            if ( state.backtracking==0 ) {
            	              t1.setText(">>");
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // AS3_ex.g3:3004:10: ( ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}? -> SHU )
            	            {
            	            // AS3_ex.g3:3004:10: ( ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}? -> SHU )
            	            // AS3_ex.g3:3004:11: ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}?
            	            {
            	            t1=(Token)match(input,GT,FOLLOW_GT_in_shiftExpression13200); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_GT.add(t1);

            	            t2=(Token)match(input,GT,FOLLOW_GT_in_shiftExpression13204); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_GT.add(t2);

            	            t3=(Token)match(input,GT,FOLLOW_GT_in_shiftExpression13208); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_GT.add(t3);

            	            if ( !(( t1.getLine() == t2.getLine() && 
            	                      			t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() &&
            	                      			t2.getLine() == t3.getLine() && 
            	                      			t2.getCharPositionInLine() + 1 == t3.getCharPositionInLine() )) ) {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                throw new FailedPredicateException(input, "shiftExpression", " $t1.getLine() == $t2.getLine() && \r\n          \t\t\t$t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() &&\r\n          \t\t\t$t2.getLine() == $t3.getLine() && \r\n          \t\t\t$t2.getCharPositionInLine() + 1 == $t3.getCharPositionInLine() ");
            	            }


            	            // AST REWRITE
            	            // elements: 
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            	            root_0 = (Object)adaptor.nil();
            	            // 3009:10: -> SHU
            	            {
            	                adaptor.addChild(root_0, (Object)adaptor.create(SHU, "SHU"));

            	            }

            	            retval.tree = root_0;}
            	            }

            	            if ( state.backtracking==0 ) {
            	              t1.setText(">>>");
            	            }

            	            }
            	            break;

            	    }

            	    if ( state.backtracking==0 ) {
            	      indentEmit(t1, ASPrettyPrinter.Break_Arithmetic_Ops_code);
            	    }
            	    pushFollow(FOLLOW_additiveExpression_in_shiftExpression13255);
            	    additiveExpression301=additiveExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression301.getTree());
            	    if ( state.backtracking==0 ) {
            	      popIndent();
            	    }

            	    }
            	    break;

            	default :
            	    break loop145;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              if (pushedWrapInfo) mPrinter.popWrapContext();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 122, shiftExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "shiftExpression"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // AS3_ex.g3:3017:1: additiveExpression : multiplicativeExpression (op= ( PLUS | SUB ) multiplicativeExpression )* ;
    public final AS3_exParser.additiveExpression_return additiveExpression() throws RecognitionException {
        AS3_exParser.additiveExpression_return retval = new AS3_exParser.additiveExpression_return();
        retval.start = input.LT(1);
        int additiveExpression_StartIndex = input.index();
        Object root_0 = null;

        Token op=null;
        AS3_exParser.multiplicativeExpression_return multiplicativeExpression302 = null;

        AS3_exParser.multiplicativeExpression_return multiplicativeExpression303 = null;


        Object op_tree=null;


            WrapOptions options=mPrinter.getExpressionWrapOptions();
            boolean pushedWrapInfo=false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }
            // AS3_ex.g3:3022:5: ( multiplicativeExpression (op= ( PLUS | SUB ) multiplicativeExpression )* )
            // AS3_ex.g3:3022:9: multiplicativeExpression (op= ( PLUS | SUB ) multiplicativeExpression )*
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              pushedWrapInfo=pushWrapInfo(options, true);
            }
            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression13307);
            multiplicativeExpression302=multiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplicativeExpression302.getTree());
            // AS3_ex.g3:3023:34: (op= ( PLUS | SUB ) multiplicativeExpression )*
            loop146:
            do {
                int alt146=2;
                int LA146_0 = input.LA(1);

                if ( ((LA146_0>=PLUS && LA146_0<=SUB)) ) {
                    int LA146_2 = input.LA(2);

                    if ( (synpred296_AS3_ex()) ) {
                        alt146=1;
                    }


                }


                switch (alt146) {
            	case 1 :
            	    // AS3_ex.g3:3023:36: op= ( PLUS | SUB ) multiplicativeExpression
            	    {
            	    op=(Token)input.LT(1);
            	    if ( (input.LA(1)>=PLUS && input.LA(1)<=SUB) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(op));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    if ( state.backtracking==0 ) {
            	      indentEmit(op, ASPrettyPrinter.Break_Arithmetic_Ops_code);
            	    }
            	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression13321);
            	    multiplicativeExpression303=multiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplicativeExpression303.getTree());
            	    if ( state.backtracking==0 ) {
            	      popIndent();
            	    }

            	    }
            	    break;

            	default :
            	    break loop146;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              if (pushedWrapInfo) mPrinter.popWrapContext();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 123, additiveExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class multiplicativeExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplicativeExpression"
    // AS3_ex.g3:3028:1: multiplicativeExpression : unaryExpression (op= ( STAR | DIV | MOD ) unaryExpression )* ;
    public final AS3_exParser.multiplicativeExpression_return multiplicativeExpression() throws RecognitionException {
        AS3_exParser.multiplicativeExpression_return retval = new AS3_exParser.multiplicativeExpression_return();
        retval.start = input.LT(1);
        int multiplicativeExpression_StartIndex = input.index();
        Object root_0 = null;

        Token op=null;
        AS3_exParser.unaryExpression_return unaryExpression304 = null;

        AS3_exParser.unaryExpression_return unaryExpression305 = null;


        Object op_tree=null;


            WrapOptions options=mPrinter.getExpressionWrapOptions();
            boolean pushedWrapInfo=false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }
            // AS3_ex.g3:3033:5: ( unaryExpression (op= ( STAR | DIV | MOD ) unaryExpression )* )
            // AS3_ex.g3:3033:9: unaryExpression (op= ( STAR | DIV | MOD ) unaryExpression )*
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              pushedWrapInfo=pushWrapInfo(options, true);
            }
            pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression13370);
            unaryExpression304=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression304.getTree());
            // AS3_ex.g3:3034:25: (op= ( STAR | DIV | MOD ) unaryExpression )*
            loop147:
            do {
                int alt147=2;
                int LA147_0 = input.LA(1);

                if ( (LA147_0==STAR) ) {
                    int LA147_2 = input.LA(2);

                    if ( (synpred299_AS3_ex()) ) {
                        alt147=1;
                    }


                }
                else if ( ((LA147_0>=DIV && LA147_0<=MOD)) ) {
                    int LA147_3 = input.LA(2);

                    if ( (synpred299_AS3_ex()) ) {
                        alt147=1;
                    }


                }


                switch (alt147) {
            	case 1 :
            	    // AS3_ex.g3:3034:27: op= ( STAR | DIV | MOD ) unaryExpression
            	    {
            	    op=(Token)input.LT(1);
            	    if ( (input.LA(1)>=STAR && input.LA(1)<=MOD) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(op));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    if ( state.backtracking==0 ) {
            	      indentEmit(op, ASPrettyPrinter.Break_Arithmetic_Ops_code);
            	    }
            	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression13385);
            	    unaryExpression305=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression305.getTree());
            	    if ( state.backtracking==0 ) {
            	      popIndent();
            	    }

            	    }
            	    break;

            	default :
            	    break loop147;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              if (pushedWrapInfo) mPrinter.popWrapContext();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 124, multiplicativeExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiplicativeExpression"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // AS3_ex.g3:3039:1: unaryExpression : ( postfixExpression | op= ( NOT | INV ) unaryExpression | unaryOp postfixExpression );
    public final AS3_exParser.unaryExpression_return unaryExpression() throws RecognitionException {
        AS3_exParser.unaryExpression_return retval = new AS3_exParser.unaryExpression_return();
        retval.start = input.LT(1);
        int unaryExpression_StartIndex = input.index();
        Object root_0 = null;

        Token op=null;
        AS3_exParser.postfixExpression_return postfixExpression306 = null;

        AS3_exParser.unaryExpression_return unaryExpression307 = null;

        AS3_exParser.unaryOp_return unaryOp308 = null;

        AS3_exParser.postfixExpression_return postfixExpression309 = null;


        Object op_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }
            // AS3_ex.g3:3040:5: ( postfixExpression | op= ( NOT | INV ) unaryExpression | unaryOp postfixExpression )
            int alt148=3;
            alt148 = dfa148.predict(input);
            switch (alt148) {
                case 1 :
                    // AS3_ex.g3:3040:9: postfixExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_postfixExpression_in_unaryExpression13420);
                    postfixExpression306=postfixExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, postfixExpression306.getTree());

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:3041:8: op= ( NOT | INV ) unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    op=(Token)input.LT(1);
                    if ( (input.LA(1)>=NOT && input.LA(1)<=INV) ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(op));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }

                    if ( state.backtracking==0 ) {
                      emit(op);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression13441);
                    unaryExpression307=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression307.getTree());

                    }
                    break;
                case 3 :
                    // AS3_ex.g3:3042:9: unaryOp postfixExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unaryOp_in_unaryExpression13451);
                    unaryOp308=unaryOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryOp308.getTree());
                    pushFollow(FOLLOW_postfixExpression_in_unaryExpression13453);
                    postfixExpression309=postfixExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, postfixExpression309.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 125, unaryExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class unaryOp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryOp"
    // AS3_ex.g3:3047:1: unaryOp : op= ( DELETE | VOID | TYPEOF | INC | DEC | PLUS | SUB | INV | NOT ) ;
    public final AS3_exParser.unaryOp_return unaryOp() throws RecognitionException {
        AS3_exParser.unaryOp_return retval = new AS3_exParser.unaryOp_return();
        retval.start = input.LT(1);
        int unaryOp_StartIndex = input.index();
        Object root_0 = null;

        Token op=null;

        Object op_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }
            // AS3_ex.g3:3048:5: (op= ( DELETE | VOID | TYPEOF | INC | DEC | PLUS | SUB | INV | NOT ) )
            // AS3_ex.g3:3048:9: op= ( DELETE | VOID | TYPEOF | INC | DEC | PLUS | SUB | INV | NOT )
            {
            root_0 = (Object)adaptor.nil();

            op=(Token)input.LT(1);
            if ( input.LA(1)==DELETE||input.LA(1)==TYPEOF||input.LA(1)==VOID||(input.LA(1)>=PLUS && input.LA(1)<=SUB)||(input.LA(1)>=INC && input.LA(1)<=DEC)||(input.LA(1)>=NOT && input.LA(1)<=INV) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(op));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            if ( state.backtracking==0 ) {
              emit(op);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 126, unaryOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryOp"

    public static class postfixExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "postfixExpression"
    // AS3_ex.g3:3053:1: postfixExpression : leftHandSideExpression ( postfixOp )? ;
    public final AS3_exParser.postfixExpression_return postfixExpression() throws RecognitionException {
        AS3_exParser.postfixExpression_return retval = new AS3_exParser.postfixExpression_return();
        retval.start = input.LT(1);
        int postfixExpression_StartIndex = input.index();
        Object root_0 = null;

        AS3_exParser.leftHandSideExpression_return leftHandSideExpression310 = null;

        AS3_exParser.postfixOp_return postfixOp311 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }
            // AS3_ex.g3:3054:5: ( leftHandSideExpression ( postfixOp )? )
            // AS3_ex.g3:3054:9: leftHandSideExpression ( postfixOp )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_leftHandSideExpression_in_postfixExpression13541);
            leftHandSideExpression310=leftHandSideExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, leftHandSideExpression310.getTree());
            // AS3_ex.g3:3054:32: ( postfixOp )?
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( ((LA149_0>=INC && LA149_0<=DEC)) ) {
                int LA149_1 = input.LA(2);

                if ( (synpred311_AS3_ex()) ) {
                    alt149=1;
                }
            }
            switch (alt149) {
                case 1 :
                    // AS3_ex.g3:0:0: postfixOp
                    {
                    pushFollow(FOLLOW_postfixOp_in_postfixExpression13543);
                    postfixOp311=postfixOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, postfixOp311.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 127, postfixExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "postfixExpression"

    public static class postfixOp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "postfixOp"
    // AS3_ex.g3:3057:1: postfixOp : op= ( INC | DEC ) ;
    public final AS3_exParser.postfixOp_return postfixOp() throws RecognitionException {
        AS3_exParser.postfixOp_return retval = new AS3_exParser.postfixOp_return();
        retval.start = input.LT(1);
        int postfixOp_StartIndex = input.index();
        Object root_0 = null;

        Token op=null;

        Object op_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }
            // AS3_ex.g3:3058:5: (op= ( INC | DEC ) )
            // AS3_ex.g3:3058:9: op= ( INC | DEC )
            {
            root_0 = (Object)adaptor.nil();

            op=(Token)input.LT(1);
            if ( (input.LA(1)>=INC && input.LA(1)<=DEC) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(op));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            if ( state.backtracking==0 ) {
              emit(op);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 128, postfixOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "postfixOp"

    public static class memberExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "memberExpression"
    // AS3_ex.g3:3062:1: memberExpression : ( primaryExpression | functionExpression | newExpression );
    public final AS3_exParser.memberExpression_return memberExpression() throws RecognitionException {
        AS3_exParser.memberExpression_return retval = new AS3_exParser.memberExpression_return();
        retval.start = input.LT(1);
        int memberExpression_StartIndex = input.index();
        Object root_0 = null;

        AS3_exParser.primaryExpression_return primaryExpression312 = null;

        AS3_exParser.functionExpression_return functionExpression313 = null;

        AS3_exParser.newExpression_return newExpression314 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }
            // AS3_ex.g3:3063:2: ( primaryExpression | functionExpression | newExpression )
            int alt150=3;
            switch ( input.LA(1) ) {
            case AS:
            case BREAK:
            case CASE:
            case CATCH:
            case CLASS:
            case CONST:
            case CONTINUE:
            case DEFAULT:
            case DELETE:
            case DO:
            case ELSE:
            case EXTENDS:
            case FALSE:
            case FINALLY:
            case FOR:
            case IF:
            case IMPLEMENTS:
            case IMPORT:
            case IN:
            case INSTANCEOF:
            case INTERFACE:
            case INTERNAL:
            case IS:
            case NATIVE:
            case NULL:
            case PACKAGE:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case RETURN:
            case SUPER:
            case SWITCH:
            case THIS:
            case THROW:
            case TO:
            case TRUE:
            case TRY:
            case TYPEOF:
            case USE:
            case VAR:
            case VOID:
            case WHILE:
            case WITH:
            case EACH:
            case GET:
            case SET:
            case NAMESPACE:
            case INCLUDE:
            case DYNAMIC:
            case FINAL:
            case OVERRIDE:
            case STATIC:
            case LCURLY:
            case LPAREN:
            case LBRACK:
            case LT:
            case STAR:
            case XML_AT:
            case XML_LS_STD:
            case SINGLE_QUOTE_LITERAL:
            case DOUBLE_QUOTE_LITERAL:
            case REGULAR_EXPR_LITERAL:
            case HEX_NUMBER_LITERAL:
            case DEC_NUMBER_LITERAL:
            case IDENTIFIER:
            case XML_COMMENT:
            case XML_CDATA:
            case XML_PI:
                {
                alt150=1;
                }
                break;
            case FUNCTION:
                {
                int LA150_2 = input.LA(2);

                if ( (LA150_2==DOT||LA150_2==SUB||LA150_2==COLON||LA150_2==XML_NS_OP) ) {
                    alt150=1;
                }
                else if ( (LA150_2==LPAREN||LA150_2==IDENTIFIER) ) {
                    alt150=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 150, 2, input);

                    throw nvae;
                }
                }
                break;
            case NEW:
                {
                int LA150_3 = input.LA(2);

                if ( ((LA150_3>=AS && LA150_3<=STATIC)||LA150_3==LCURLY||LA150_3==LPAREN||LA150_3==LBRACK||LA150_3==LT||LA150_3==STAR||(LA150_3>=XML_AT && LA150_3<=XML_LS_STD)||(LA150_3>=SINGLE_QUOTE_LITERAL && LA150_3<=DOUBLE_QUOTE_LITERAL)||LA150_3==REGULAR_EXPR_LITERAL||LA150_3==HEX_NUMBER_LITERAL||LA150_3==DEC_NUMBER_LITERAL||LA150_3==IDENTIFIER||(LA150_3>=XML_COMMENT && LA150_3<=XML_PI)) ) {
                    alt150=3;
                }
                else if ( (LA150_3==DOT||LA150_3==SUB||LA150_3==COLON||LA150_3==XML_NS_OP) ) {
                    alt150=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 150, 3, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 150, 0, input);

                throw nvae;
            }

            switch (alt150) {
                case 1 :
                    // AS3_ex.g3:3063:4: primaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_primaryExpression_in_memberExpression13591);
                    primaryExpression312=primaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primaryExpression312.getTree());

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:3064:4: functionExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_functionExpression_in_memberExpression13596);
                    functionExpression313=functionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, functionExpression313.getTree());

                    }
                    break;
                case 3 :
                    // AS3_ex.g3:3065:4: newExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_newExpression_in_memberExpression13601);
                    newExpression314=newExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, newExpression314.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 129, memberExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "memberExpression"

    public static class newExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "newExpression"
    // AS3_ex.g3:3068:1: newExpression : N= NEW primaryExpression ;
    public final AS3_exParser.newExpression_return newExpression() throws RecognitionException {
        AS3_exParser.newExpression_return retval = new AS3_exParser.newExpression_return();
        retval.start = input.LT(1);
        int newExpression_StartIndex = input.index();
        Object root_0 = null;

        Token N=null;
        AS3_exParser.primaryExpression_return primaryExpression315 = null;


        Object N_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }
            // AS3_ex.g3:3069:2: (N= NEW primaryExpression )
            // AS3_ex.g3:3069:4: N= NEW primaryExpression
            {
            root_0 = (Object)adaptor.nil();

            N=(Token)match(input,NEW,FOLLOW_NEW_in_newExpression13614); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            N_tree = (Object)adaptor.create(N);
            adaptor.addChild(root_0, N_tree);
            }
            if ( state.backtracking==0 ) {
              emit(N);insertWS(1);
            }
            pushFollow(FOLLOW_primaryExpression_in_newExpression13619);
            primaryExpression315=primaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, primaryExpression315.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 130, newExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "newExpression"

    public static class leftHandSideExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "leftHandSideExpression"
    // AS3_ex.g3:3073:1: leftHandSideExpression : memberExpression ( arguments | L= LBRACK expression R= RBRACK | E= XML_ELLIPSIS eitherIdentifier | D= DOT ( eitherIdentifier | parExpression ) | typePostfixSyntax | op= XML_NS_OP expression )* ;
    public final AS3_exParser.leftHandSideExpression_return leftHandSideExpression() throws RecognitionException {
        AS3_exParser.leftHandSideExpression_return retval = new AS3_exParser.leftHandSideExpression_return();
        retval.start = input.LT(1);
        int leftHandSideExpression_StartIndex = input.index();
        Object root_0 = null;

        Token L=null;
        Token R=null;
        Token E=null;
        Token D=null;
        Token op=null;
        AS3_exParser.memberExpression_return memberExpression316 = null;

        AS3_exParser.arguments_return arguments317 = null;

        AS3_exParser.expression_return expression318 = null;

        AS3_exParser.eitherIdentifier_return eitherIdentifier319 = null;

        AS3_exParser.eitherIdentifier_return eitherIdentifier320 = null;

        AS3_exParser.parExpression_return parExpression321 = null;

        AS3_exParser.typePostfixSyntax_return typePostfixSyntax322 = null;

        AS3_exParser.expression_return expression323 = null;


        Object L_tree=null;
        Object R_tree=null;
        Object E_tree=null;
        Object D_tree=null;
        Object op_tree=null;


            WrapOptions options=mPrinter.getExpressionWrapOptions();
            boolean pushedWrapInfo=false;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }
            // AS3_ex.g3:3078:5: ( memberExpression ( arguments | L= LBRACK expression R= RBRACK | E= XML_ELLIPSIS eitherIdentifier | D= DOT ( eitherIdentifier | parExpression ) | typePostfixSyntax | op= XML_NS_OP expression )* )
            // AS3_ex.g3:3078:7: memberExpression ( arguments | L= LBRACK expression R= RBRACK | E= XML_ELLIPSIS eitherIdentifier | D= DOT ( eitherIdentifier | parExpression ) | typePostfixSyntax | op= XML_NS_OP expression )*
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              pushedWrapInfo=pushWrapInfo(options, true);
            }
            pushFollow(FOLLOW_memberExpression_in_leftHandSideExpression13645);
            memberExpression316=memberExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, memberExpression316.getTree());
            // AS3_ex.g3:3080:5: ( arguments | L= LBRACK expression R= RBRACK | E= XML_ELLIPSIS eitherIdentifier | D= DOT ( eitherIdentifier | parExpression ) | typePostfixSyntax | op= XML_NS_OP expression )*
            loop152:
            do {
                int alt152=7;
                alt152 = dfa152.predict(input);
                switch (alt152) {
            	case 1 :
            	    // AS3_ex.g3:3081:7: arguments
            	    {
            	    pushFollow(FOLLOW_arguments_in_leftHandSideExpression13660);
            	    arguments317=arguments();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments317.getTree());

            	    }
            	    break;
            	case 2 :
            	    // AS3_ex.g3:3082:9: L= LBRACK expression R= RBRACK
            	    {
            	    L=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_leftHandSideExpression13672); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    L_tree = (Object)adaptor.create(L);
            	    adaptor.addChild(root_0, L_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      emit(L);insertWS(mPrinter.getAdvancedSpacesInsideArrayReferenceBrackets());
            	    }
            	    pushFollow(FOLLOW_expression_in_leftHandSideExpression13676);
            	    expression318=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression318.getTree());
            	    R=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_leftHandSideExpression13680); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    R_tree = (Object)adaptor.create(R);
            	    adaptor.addChild(root_0, R_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      insertWS(mPrinter.getAdvancedSpacesInsideArrayReferenceBrackets());emit(R);
            	    }

            	    }
            	    break;
            	case 3 :
            	    // AS3_ex.g3:3085:9: E= XML_ELLIPSIS eitherIdentifier
            	    {
            	    E=(Token)match(input,XML_ELLIPSIS,FOLLOW_XML_ELLIPSIS_in_leftHandSideExpression13696); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    E_tree = (Object)adaptor.create(E);
            	    adaptor.addChild(root_0, E_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      wrapEmit(E, ASPrettyPrinter.Break_Other_Connectors_code);
            	    }
            	    pushFollow(FOLLOW_eitherIdentifier_in_leftHandSideExpression13699);
            	    eitherIdentifier319=eitherIdentifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, eitherIdentifier319.getTree());
            	    if ( state.backtracking==0 ) {
            	      popIndent();
            	    }

            	    }
            	    break;
            	case 4 :
            	    // AS3_ex.g3:3086:9: D= DOT ( eitherIdentifier | parExpression )
            	    {
            	    D=(Token)match(input,DOT,FOLLOW_DOT_in_leftHandSideExpression13713); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    D_tree = (Object)adaptor.create(D);
            	    adaptor.addChild(root_0, D_tree);
            	    }
            	    // AS3_ex.g3:3086:15: ( eitherIdentifier | parExpression )
            	    int alt151=2;
            	    int LA151_0 = input.LA(1);

            	    if ( ((LA151_0>=AS && LA151_0<=STATIC)||LA151_0==STAR||LA151_0==XML_AT||LA151_0==IDENTIFIER) ) {
            	        alt151=1;
            	    }
            	    else if ( (LA151_0==LPAREN) ) {
            	        alt151=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 151, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt151) {
            	        case 1 :
            	            // AS3_ex.g3:3086:16: eitherIdentifier
            	            {
            	            if ( state.backtracking==0 ) {
            	              wrapEmit(D, ASPrettyPrinter.Break_Function_Calls_code);
            	            }
            	            pushFollow(FOLLOW_eitherIdentifier_in_leftHandSideExpression13718);
            	            eitherIdentifier320=eitherIdentifier();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, eitherIdentifier320.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // AS3_ex.g3:3086:94: parExpression
            	            {
            	            if ( state.backtracking==0 ) {
            	              wrapEmit(D, ASPrettyPrinter.Break_Other_Connectors_code);
            	            }
            	            pushFollow(FOLLOW_parExpression_in_leftHandSideExpression13724);
            	            parExpression321=parExpression();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, parExpression321.getTree());

            	            }
            	            break;

            	    }

            	    if ( state.backtracking==0 ) {
            	      popIndent();
            	    }

            	    }
            	    break;
            	case 5 :
            	    // AS3_ex.g3:3087:9: typePostfixSyntax
            	    {
            	    pushFollow(FOLLOW_typePostfixSyntax_in_leftHandSideExpression13737);
            	    typePostfixSyntax322=typePostfixSyntax();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, typePostfixSyntax322.getTree());

            	    }
            	    break;
            	case 6 :
            	    // AS3_ex.g3:3088:9: op= XML_NS_OP expression
            	    {
            	    op=(Token)match(input,XML_NS_OP,FOLLOW_XML_NS_OP_in_leftHandSideExpression13749); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    op_tree = (Object)adaptor.create(op);
            	    adaptor.addChild(root_0, op_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      wrapEmit(op, ASPrettyPrinter.Break_Other_Connectors_code);
            	    }
            	    pushFollow(FOLLOW_expression_in_leftHandSideExpression13753);
            	    expression323=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression323.getTree());
            	    if ( state.backtracking==0 ) {
            	      popIndent();
            	    }

            	    }
            	    break;

            	default :
            	    break loop152;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              if (pushedWrapInfo) mPrinter.popWrapContext();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 131, leftHandSideExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "leftHandSideExpression"

    public static class eitherIdentifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eitherIdentifier"
    // AS3_ex.g3:3093:1: eitherIdentifier : (I= IDENTIFIER | xmlPropertyIdentifier | allKeywords );
    public final AS3_exParser.eitherIdentifier_return eitherIdentifier() throws RecognitionException {
        AS3_exParser.eitherIdentifier_return retval = new AS3_exParser.eitherIdentifier_return();
        retval.start = input.LT(1);
        int eitherIdentifier_StartIndex = input.index();
        Object root_0 = null;

        Token I=null;
        AS3_exParser.xmlPropertyIdentifier_return xmlPropertyIdentifier324 = null;

        AS3_exParser.allKeywords_return allKeywords325 = null;


        Object I_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }
            // AS3_ex.g3:3094:2: (I= IDENTIFIER | xmlPropertyIdentifier | allKeywords )
            int alt153=3;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
                {
                int LA153_1 = input.LA(2);

                if ( (synpred322_AS3_ex()) ) {
                    alt153=1;
                }
                else if ( (synpred323_AS3_ex()) ) {
                    alt153=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 153, 1, input);

                    throw nvae;
                }
                }
                break;
            case STAR:
            case XML_AT:
                {
                alt153=2;
                }
                break;
            case AS:
            case BREAK:
            case CASE:
            case CATCH:
            case CLASS:
            case CONST:
            case CONTINUE:
            case DEFAULT:
            case DELETE:
            case DO:
            case ELSE:
            case EXTENDS:
            case FALSE:
            case FINALLY:
            case FOR:
            case FUNCTION:
            case IF:
            case IMPLEMENTS:
            case IMPORT:
            case IN:
            case INSTANCEOF:
            case INTERFACE:
            case INTERNAL:
            case IS:
            case NEW:
            case NULL:
            case PACKAGE:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case RETURN:
            case SUPER:
            case SWITCH:
            case THIS:
            case THROW:
            case TRUE:
            case TRY:
            case TYPEOF:
            case USE:
            case VAR:
            case VOID:
            case WHILE:
            case WITH:
            case INCLUDE:
                {
                int LA153_3 = input.LA(2);

                if ( (synpred323_AS3_ex()) ) {
                    alt153=2;
                }
                else if ( (true) ) {
                    alt153=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 153, 3, input);

                    throw nvae;
                }
                }
                break;
            case NATIVE:
            case TO:
            case EACH:
            case GET:
            case SET:
            case NAMESPACE:
            case DYNAMIC:
            case FINAL:
            case OVERRIDE:
            case STATIC:
                {
                int LA153_4 = input.LA(2);

                if ( (synpred323_AS3_ex()) ) {
                    alt153=2;
                }
                else if ( (true) ) {
                    alt153=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 153, 4, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 153, 0, input);

                throw nvae;
            }

            switch (alt153) {
                case 1 :
                    // AS3_ex.g3:3094:4: I= IDENTIFIER
                    {
                    root_0 = (Object)adaptor.nil();

                    I=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_eitherIdentifier13790); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    I_tree = (Object)adaptor.create(I);
                    adaptor.addChild(root_0, I_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(I);
                    }

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:3095:5: xmlPropertyIdentifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_xmlPropertyIdentifier_in_eitherIdentifier13800);
                    xmlPropertyIdentifier324=xmlPropertyIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlPropertyIdentifier324.getTree());

                    }
                    break;
                case 3 :
                    // AS3_ex.g3:3096:5: allKeywords
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_allKeywords_in_eitherIdentifier13806);
                    allKeywords325=allKeywords();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, allKeywords325.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 132, eitherIdentifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "eitherIdentifier"

    public static class typeSpecifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeSpecifier"
    // AS3_ex.g3:3099:1: typeSpecifier : (I= IDENTIFIER | notQuiteReservedWord | I= INTERNAL | D= DEFAULT );
    public final AS3_exParser.typeSpecifier_return typeSpecifier() throws RecognitionException {
        AS3_exParser.typeSpecifier_return retval = new AS3_exParser.typeSpecifier_return();
        retval.start = input.LT(1);
        int typeSpecifier_StartIndex = input.index();
        Object root_0 = null;

        Token I=null;
        Token D=null;
        AS3_exParser.notQuiteReservedWord_return notQuiteReservedWord326 = null;


        Object I_tree=null;
        Object D_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }
            // AS3_ex.g3:3099:14: (I= IDENTIFIER | notQuiteReservedWord | I= INTERNAL | D= DEFAULT )
            int alt154=4;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
                {
                alt154=1;
                }
                break;
            case NATIVE:
            case TO:
            case EACH:
            case GET:
            case SET:
            case NAMESPACE:
            case DYNAMIC:
            case FINAL:
            case OVERRIDE:
            case STATIC:
                {
                alt154=2;
                }
                break;
            case INTERNAL:
                {
                alt154=3;
                }
                break;
            case DEFAULT:
                {
                alt154=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 154, 0, input);

                throw nvae;
            }

            switch (alt154) {
                case 1 :
                    // AS3_ex.g3:3100:2: I= IDENTIFIER
                    {
                    root_0 = (Object)adaptor.nil();

                    I=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_typeSpecifier13819); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    I_tree = (Object)adaptor.create(I);
                    adaptor.addChild(root_0, I_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(I);
                    }

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:3100:29: notQuiteReservedWord
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_notQuiteReservedWord_in_typeSpecifier13825);
                    notQuiteReservedWord326=notQuiteReservedWord();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, notQuiteReservedWord326.getTree());

                    }
                    break;
                case 3 :
                    // AS3_ex.g3:3100:52: I= INTERNAL
                    {
                    root_0 = (Object)adaptor.nil();

                    I=(Token)match(input,INTERNAL,FOLLOW_INTERNAL_in_typeSpecifier13831); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    I_tree = (Object)adaptor.create(I);
                    adaptor.addChild(root_0, I_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(I);
                    }

                    }
                    break;
                case 4 :
                    // AS3_ex.g3:3100:77: D= DEFAULT
                    {
                    root_0 = (Object)adaptor.nil();

                    D=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_typeSpecifier13839); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    D_tree = (Object)adaptor.create(D);
                    adaptor.addChild(root_0, D_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(D);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 133, typeSpecifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeSpecifier"

    public static class notQuiteReservedWord_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "notQuiteReservedWord"
    // AS3_ex.g3:3103:1: notQuiteReservedWord : word= ( TO | NATIVE | EACH | GET | SET | NAMESPACE | DYNAMIC | FINAL | OVERRIDE | STATIC ) ;
    public final AS3_exParser.notQuiteReservedWord_return notQuiteReservedWord() throws RecognitionException {
        AS3_exParser.notQuiteReservedWord_return retval = new AS3_exParser.notQuiteReservedWord_return();
        retval.start = input.LT(1);
        int notQuiteReservedWord_StartIndex = input.index();
        Object root_0 = null;

        Token word=null;

        Object word_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }
            // AS3_ex.g3:3104:2: (word= ( TO | NATIVE | EACH | GET | SET | NAMESPACE | DYNAMIC | FINAL | OVERRIDE | STATIC ) )
            // AS3_ex.g3:3105:2: word= ( TO | NATIVE | EACH | GET | SET | NAMESPACE | DYNAMIC | FINAL | OVERRIDE | STATIC )
            {
            root_0 = (Object)adaptor.nil();

            word=(Token)input.LT(1);
            if ( input.LA(1)==NATIVE||input.LA(1)==TO||(input.LA(1)>=EACH && input.LA(1)<=NAMESPACE)||(input.LA(1)>=DYNAMIC && input.LA(1)<=STATIC) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(word));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            if ( state.backtracking==0 ) {
              emit(word);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 134, notQuiteReservedWord_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "notQuiteReservedWord"

    public static class allKeywords_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "allKeywords"
    // AS3_ex.g3:3108:1: allKeywords : ( reservedWord | notQuiteReservedWord ) ;
    public final AS3_exParser.allKeywords_return allKeywords() throws RecognitionException {
        AS3_exParser.allKeywords_return retval = new AS3_exParser.allKeywords_return();
        retval.start = input.LT(1);
        int allKeywords_StartIndex = input.index();
        Object root_0 = null;

        AS3_exParser.reservedWord_return reservedWord327 = null;

        AS3_exParser.notQuiteReservedWord_return notQuiteReservedWord328 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }
            // AS3_ex.g3:3109:2: ( ( reservedWord | notQuiteReservedWord ) )
            // AS3_ex.g3:3109:4: ( reservedWord | notQuiteReservedWord )
            {
            root_0 = (Object)adaptor.nil();

            // AS3_ex.g3:3109:4: ( reservedWord | notQuiteReservedWord )
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( ((LA155_0>=AS && LA155_0<=IS)||(LA155_0>=NEW && LA155_0<=THROW)||(LA155_0>=TRUE && LA155_0<=WITH)||LA155_0==INCLUDE) ) {
                alt155=1;
            }
            else if ( (LA155_0==NATIVE||LA155_0==TO||(LA155_0>=EACH && LA155_0<=NAMESPACE)||(LA155_0>=DYNAMIC && LA155_0<=STATIC)) ) {
                alt155=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 155, 0, input);

                throw nvae;
            }
            switch (alt155) {
                case 1 :
                    // AS3_ex.g3:3109:5: reservedWord
                    {
                    pushFollow(FOLLOW_reservedWord_in_allKeywords13910);
                    reservedWord327=reservedWord();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, reservedWord327.getTree());

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:3109:20: notQuiteReservedWord
                    {
                    pushFollow(FOLLOW_notQuiteReservedWord_in_allKeywords13914);
                    notQuiteReservedWord328=notQuiteReservedWord();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, notQuiteReservedWord328.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 135, allKeywords_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "allKeywords"

    public static class reservedWord_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "reservedWord"
    // AS3_ex.g3:3111:1: reservedWord : word= ( AS | BREAK | CASE | CATCH | CLASS | CONST | CONTINUE | DEFAULT | DELETE | DO | ELSE | EXTENDS | FALSE | FINALLY | FOR | FUNCTION | IF | IMPLEMENTS | IMPORT | IN | INSTANCEOF | INTERFACE | INTERNAL | IS | NEW | NULL | PACKAGE | PRIVATE | PROTECTED | PUBLIC | RETURN | SUPER | SWITCH | THIS | THROW | TRUE | TRY | TYPEOF | USE | VAR | VOID | WHILE | WITH | INCLUDE ) ;
    public final AS3_exParser.reservedWord_return reservedWord() throws RecognitionException {
        AS3_exParser.reservedWord_return retval = new AS3_exParser.reservedWord_return();
        retval.start = input.LT(1);
        int reservedWord_StartIndex = input.index();
        Object root_0 = null;

        Token word=null;

        Object word_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }
            // AS3_ex.g3:3112:2: (word= ( AS | BREAK | CASE | CATCH | CLASS | CONST | CONTINUE | DEFAULT | DELETE | DO | ELSE | EXTENDS | FALSE | FINALLY | FOR | FUNCTION | IF | IMPLEMENTS | IMPORT | IN | INSTANCEOF | INTERFACE | INTERNAL | IS | NEW | NULL | PACKAGE | PRIVATE | PROTECTED | PUBLIC | RETURN | SUPER | SWITCH | THIS | THROW | TRUE | TRY | TYPEOF | USE | VAR | VOID | WHILE | WITH | INCLUDE ) )
            // AS3_ex.g3:3113:5: word= ( AS | BREAK | CASE | CATCH | CLASS | CONST | CONTINUE | DEFAULT | DELETE | DO | ELSE | EXTENDS | FALSE | FINALLY | FOR | FUNCTION | IF | IMPLEMENTS | IMPORT | IN | INSTANCEOF | INTERFACE | INTERNAL | IS | NEW | NULL | PACKAGE | PRIVATE | PROTECTED | PUBLIC | RETURN | SUPER | SWITCH | THIS | THROW | TRUE | TRY | TYPEOF | USE | VAR | VOID | WHILE | WITH | INCLUDE )
            {
            root_0 = (Object)adaptor.nil();

            word=(Token)input.LT(1);
            if ( (input.LA(1)>=AS && input.LA(1)<=IS)||(input.LA(1)>=NEW && input.LA(1)<=THROW)||(input.LA(1)>=TRUE && input.LA(1)<=WITH)||input.LA(1)==INCLUDE ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(word));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            if ( state.backtracking==0 ) {
              emit(word);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 136, reservedWord_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "reservedWord"

    public static class arguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arguments"
    // AS3_ex.g3:3170:1: arguments : L= LPAREN ( assignmentExpression (C= COMMA assignmentExpression )* )? R= RPAREN ;
    public final AS3_exParser.arguments_return arguments() throws RecognitionException {
        AS3_exParser.arguments_return retval = new AS3_exParser.arguments_return();
        retval.start = input.LT(1);
        int arguments_StartIndex = input.index();
        Object root_0 = null;

        Token L=null;
        Token C=null;
        Token R=null;
        AS3_exParser.assignmentExpression_return assignmentExpression329 = null;

        AS3_exParser.assignmentExpression_return assignmentExpression330 = null;


        Object L_tree=null;
        Object C_tree=null;
        Object R_tree=null;


        	WrapOptions options=mPrinter.getMethodCallWrapOptions();
        	boolean pushedFormat=false;
        	boolean pushedIndent=false;
        	boolean pushedWrapInfo=false;
        	int firstArgPos=0;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }
            // AS3_ex.g3:3179:2: (L= LPAREN ( assignmentExpression (C= COMMA assignmentExpression )* )? R= RPAREN )
            // AS3_ex.g3:3180:4: L= LPAREN ( assignmentExpression (C= COMMA assignmentExpression )* )? R= RPAREN
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              pushedFormat=pushFormatType(options, true);
              	   pushedWrapInfo=pushWrapInfo(options, true);
              	  
            }
            L=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_arguments14493); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            L_tree = (Object)adaptor.create(L);
            adaptor.addChild(root_0, L_tree);
            }
            if ( state.backtracking==0 ) {
              {insertWS(mPrinter.getSpacesBeforeArguments());} emit(L);insertWS(mPrinter.getAdvancedSpacesInsideParensInArgumentLists());
            }
            // AS3_ex.g3:3184:4: ( assignmentExpression (C= COMMA assignmentExpression )* )?
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( ((LA157_0>=AS && LA157_0<=STATIC)||LA157_0==LCURLY||LA157_0==LPAREN||LA157_0==LBRACK||LA157_0==LT||(LA157_0>=PLUS && LA157_0<=STAR)||(LA157_0>=INC && LA157_0<=DEC)||(LA157_0>=NOT && LA157_0<=INV)||(LA157_0>=XML_AT && LA157_0<=XML_LS_STD)||(LA157_0>=SINGLE_QUOTE_LITERAL && LA157_0<=DOUBLE_QUOTE_LITERAL)||LA157_0==REGULAR_EXPR_LITERAL||LA157_0==HEX_NUMBER_LITERAL||LA157_0==DEC_NUMBER_LITERAL||LA157_0==IDENTIFIER||(LA157_0>=XML_COMMENT && LA157_0<=XML_PI)) ) {
                alt157=1;
            }
            switch (alt157) {
                case 1 :
                    // AS3_ex.g3:3184:6: assignmentExpression (C= COMMA assignmentExpression )*
                    {
                    if ( state.backtracking==0 ) {
                      pushedIndent=pushLazyParmIndent(pushedIndent, options.getIndentStyle());
                    }
                    if ( state.backtracking==0 ) {
                      mPrinter.captureNextTextPosition();
                    }
                    pushFollow(FOLLOW_assignmentExpression_in_arguments14506);
                    assignmentExpression329=assignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentExpression329.getTree());
                    if ( state.backtracking==0 ) {
                      firstArgPos=mPrinter.getLastCapturePosition();
                    }
                    // AS3_ex.g3:3185:10: (C= COMMA assignmentExpression )*
                    loop156:
                    do {
                        int alt156=2;
                        int LA156_0 = input.LA(1);

                        if ( (LA156_0==COMMA) ) {
                            alt156=1;
                        }


                        switch (alt156) {
                    	case 1 :
                    	    // AS3_ex.g3:3186:11: C= COMMA assignmentExpression
                    	    {
                    	    C=(Token)match(input,COMMA,FOLLOW_COMMA_in_arguments14536); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    C_tree = (Object)adaptor.create(C);
                    	    adaptor.addChild(root_0, C_tree);
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      pushedIndent=emitCommaWithSpacingAndCRs(options, C, pushedIndent, firstArgPos, ASPrettyPrinter.Break_SubType_Arguments);
                    	    }
                    	    pushFollow(FOLLOW_assignmentExpression_in_arguments14561);
                    	    assignmentExpression330=assignmentExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentExpression330.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop156;
                        }
                    } while (true);


                    }
                    break;

            }

            R=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_arguments14587); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            R_tree = (Object)adaptor.create(R);
            adaptor.addChild(root_0, R_tree);
            }
            if ( state.backtracking==0 ) {
              insertWS(mPrinter.getAdvancedSpacesInsideParensInArgumentLists());emit(R);
            }
            if ( state.backtracking==0 ) {

                      if (pushedIndent)
                 	    	popIndent();
                 	    if (pushedFormat)
                 	    {
                 	    	mPrinter.popFormatMode();
                 	    }
                 	    if (pushedWrapInfo)
                 	    	mPrinter.popWrapContext();
                    
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 137, arguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arguments"

    public static class suffix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "suffix"
    // AS3_ex.g3:3205:1: suffix : ( indexSuffix | propertyReferenceSuffix );
    public final AS3_exParser.suffix_return suffix() throws RecognitionException {
        AS3_exParser.suffix_return retval = new AS3_exParser.suffix_return();
        retval.start = input.LT(1);
        int suffix_StartIndex = input.index();
        Object root_0 = null;

        AS3_exParser.indexSuffix_return indexSuffix331 = null;

        AS3_exParser.propertyReferenceSuffix_return propertyReferenceSuffix332 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }
            // AS3_ex.g3:3206:5: ( indexSuffix | propertyReferenceSuffix )
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==LBRACK) ) {
                alt158=1;
            }
            else if ( (LA158_0==DOT) ) {
                alt158=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 158, 0, input);

                throw nvae;
            }
            switch (alt158) {
                case 1 :
                    // AS3_ex.g3:3206:10: indexSuffix
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_indexSuffix_in_suffix14617);
                    indexSuffix331=indexSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, indexSuffix331.getTree());

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:3206:24: propertyReferenceSuffix
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_propertyReferenceSuffix_in_suffix14621);
                    propertyReferenceSuffix332=propertyReferenceSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyReferenceSuffix332.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 138, suffix_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "suffix"

    public static class indexSuffix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "indexSuffix"
    // AS3_ex.g3:3209:1: indexSuffix : L= LBRACK expression R= RBRACK ;
    public final AS3_exParser.indexSuffix_return indexSuffix() throws RecognitionException {
        AS3_exParser.indexSuffix_return retval = new AS3_exParser.indexSuffix_return();
        retval.start = input.LT(1);
        int indexSuffix_StartIndex = input.index();
        Object root_0 = null;

        Token L=null;
        Token R=null;
        AS3_exParser.expression_return expression333 = null;


        Object L_tree=null;
        Object R_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return retval; }
            // AS3_ex.g3:3210:5: (L= LBRACK expression R= RBRACK )
            // AS3_ex.g3:3210:10: L= LBRACK expression R= RBRACK
            {
            root_0 = (Object)adaptor.nil();

            L=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_indexSuffix14662); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            L_tree = (Object)adaptor.create(L);
            adaptor.addChild(root_0, L_tree);
            }
            if ( state.backtracking==0 ) {
              emit(L);insertWS(mPrinter.getAdvancedSpacesInsideArrayReferenceBrackets());
            }
            pushFollow(FOLLOW_expression_in_indexSuffix14667);
            expression333=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression333.getTree());
            R=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_indexSuffix14672); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            R_tree = (Object)adaptor.create(R);
            adaptor.addChild(root_0, R_tree);
            }
            if ( state.backtracking==0 ) {
              insertWS(mPrinter.getAdvancedSpacesInsideArrayReferenceBrackets());emit(R);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 139, indexSuffix_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "indexSuffix"

    public static class propertyReferenceSuffix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyReferenceSuffix"
    // AS3_ex.g3:3213:1: propertyReferenceSuffix : (D= DOT I= IDENTIFIER | D= DOT xmlPropertyIdentifier | D= DOT );
    public final AS3_exParser.propertyReferenceSuffix_return propertyReferenceSuffix() throws RecognitionException {
        AS3_exParser.propertyReferenceSuffix_return retval = new AS3_exParser.propertyReferenceSuffix_return();
        retval.start = input.LT(1);
        int propertyReferenceSuffix_StartIndex = input.index();
        Object root_0 = null;

        Token D=null;
        Token I=null;
        AS3_exParser.xmlPropertyIdentifier_return xmlPropertyIdentifier334 = null;


        Object D_tree=null;
        Object I_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return retval; }
            // AS3_ex.g3:3214:5: (D= DOT I= IDENTIFIER | D= DOT xmlPropertyIdentifier | D= DOT )
            int alt159=3;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==DOT) ) {
                switch ( input.LA(2) ) {
                case AS:
                case BREAK:
                case CASE:
                case CATCH:
                case CLASS:
                case CONST:
                case CONTINUE:
                case DEFAULT:
                case DELETE:
                case DO:
                case ELSE:
                case EXTENDS:
                case FALSE:
                case FINALLY:
                case FOR:
                case FUNCTION:
                case IF:
                case IMPLEMENTS:
                case IMPORT:
                case IN:
                case INSTANCEOF:
                case INTERFACE:
                case INTERNAL:
                case IS:
                case NATIVE:
                case NEW:
                case NULL:
                case PACKAGE:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case RETURN:
                case SUPER:
                case SWITCH:
                case THIS:
                case THROW:
                case TO:
                case TRUE:
                case TRY:
                case TYPEOF:
                case USE:
                case VAR:
                case VOID:
                case WHILE:
                case WITH:
                case EACH:
                case GET:
                case SET:
                case NAMESPACE:
                case INCLUDE:
                case DYNAMIC:
                case FINAL:
                case OVERRIDE:
                case STATIC:
                case STAR:
                case XML_AT:
                    {
                    alt159=2;
                    }
                    break;
                case IDENTIFIER:
                    {
                    int LA159_3 = input.LA(3);

                    if ( (LA159_3==DOT||LA159_3==SUB||LA159_3==COLON||LA159_3==XML_NS_OP) ) {
                        alt159=2;
                    }
                    else if ( (LA159_3==EOF) ) {
                        alt159=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 159, 3, input);

                        throw nvae;
                    }
                    }
                    break;
                case EOF:
                    {
                    alt159=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 159, 1, input);

                    throw nvae;
                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 159, 0, input);

                throw nvae;
            }
            switch (alt159) {
                case 1 :
                    // AS3_ex.g3:3214:10: D= DOT I= IDENTIFIER
                    {
                    root_0 = (Object)adaptor.nil();

                    D=(Token)match(input,DOT,FOLLOW_DOT_in_propertyReferenceSuffix14700); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    D_tree = (Object)adaptor.create(D);
                    adaptor.addChild(root_0, D_tree);
                    }
                    if ( state.backtracking==0 ) {
                      wrapEmit(D, ASPrettyPrinter.Break_Other_Connectors_code);
                    }
                    I=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_propertyReferenceSuffix14707); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    I_tree = (Object)adaptor.create(I);
                    adaptor.addChild(root_0, I_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(I);
                    }
                    if ( state.backtracking==0 ) {
                      popIndent();
                    }

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:3215:10: D= DOT xmlPropertyIdentifier
                    {
                    root_0 = (Object)adaptor.nil();

                    D=(Token)match(input,DOT,FOLLOW_DOT_in_propertyReferenceSuffix14724); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    D_tree = (Object)adaptor.create(D);
                    adaptor.addChild(root_0, D_tree);
                    }
                    if ( state.backtracking==0 ) {
                      wrapEmit(D, ASPrettyPrinter.Break_Other_Connectors_code);
                    }
                    pushFollow(FOLLOW_xmlPropertyIdentifier_in_propertyReferenceSuffix14729);
                    xmlPropertyIdentifier334=xmlPropertyIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlPropertyIdentifier334.getTree());
                    if ( state.backtracking==0 ) {
                      popIndent();
                    }

                    }
                    break;
                case 3 :
                    // AS3_ex.g3:3216:10: D= DOT
                    {
                    root_0 = (Object)adaptor.nil();

                    D=(Token)match(input,DOT,FOLLOW_DOT_in_propertyReferenceSuffix14744); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    D_tree = (Object)adaptor.create(D);
                    adaptor.addChild(root_0, D_tree);
                    }
                    if ( state.backtracking==0 ) {
                      wrapEmit(D, ASPrettyPrinter.Break_Other_Connectors_code);
                    }
                    if ( state.backtracking==0 ) {
                      popIndent();
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 140, propertyReferenceSuffix_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "propertyReferenceSuffix"

    public static class primaryExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primaryExpression"
    // AS3_ex.g3:3220:1: primaryExpression : primaryExpressionHelper ;
    public final AS3_exParser.primaryExpression_return primaryExpression() throws RecognitionException {
        AS3_exParser.primaryExpression_return retval = new AS3_exParser.primaryExpression_return();
        retval.start = input.LT(1);
        int primaryExpression_StartIndex = input.index();
        Object root_0 = null;

        AS3_exParser.primaryExpressionHelper_return primaryExpressionHelper335 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }
            // AS3_ex.g3:3221:5: ( primaryExpressionHelper )
            // AS3_ex.g3:3221:10: primaryExpressionHelper
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_primaryExpressionHelper_in_primaryExpression14774);
            primaryExpressionHelper335=primaryExpressionHelper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, primaryExpressionHelper335.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 141, primaryExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primaryExpression"

    public static class primaryExpressionHelper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primaryExpressionHelper"
    // AS3_ex.g3:3225:1: primaryExpressionHelper : (T= THIS | S= SUPER | literal | arrayLiteral | objectLiteral | ( identifierLiteral x= XML_NS_OP )? identifierLiteral | xmlPrimaryExpression | parExpression | l= LT type g= GT ( arrayLiteral )? );
    public final AS3_exParser.primaryExpressionHelper_return primaryExpressionHelper() throws RecognitionException {
        AS3_exParser.primaryExpressionHelper_return retval = new AS3_exParser.primaryExpressionHelper_return();
        retval.start = input.LT(1);
        int primaryExpressionHelper_StartIndex = input.index();
        Object root_0 = null;

        Token T=null;
        Token S=null;
        Token x=null;
        Token l=null;
        Token g=null;
        AS3_exParser.literal_return literal336 = null;

        AS3_exParser.arrayLiteral_return arrayLiteral337 = null;

        AS3_exParser.objectLiteral_return objectLiteral338 = null;

        AS3_exParser.identifierLiteral_return identifierLiteral339 = null;

        AS3_exParser.identifierLiteral_return identifierLiteral340 = null;

        AS3_exParser.xmlPrimaryExpression_return xmlPrimaryExpression341 = null;

        AS3_exParser.parExpression_return parExpression342 = null;

        AS3_exParser.type_return type343 = null;

        AS3_exParser.arrayLiteral_return arrayLiteral344 = null;


        Object T_tree=null;
        Object S_tree=null;
        Object x_tree=null;
        Object l_tree=null;
        Object g_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 142) ) { return retval; }
            // AS3_ex.g3:3226:5: (T= THIS | S= SUPER | literal | arrayLiteral | objectLiteral | ( identifierLiteral x= XML_NS_OP )? identifierLiteral | xmlPrimaryExpression | parExpression | l= LT type g= GT ( arrayLiteral )? )
            int alt162=9;
            alt162 = dfa162.predict(input);
            switch (alt162) {
                case 1 :
                    // AS3_ex.g3:3226:9: T= THIS
                    {
                    root_0 = (Object)adaptor.nil();

                    T=(Token)match(input,THIS,FOLLOW_THIS_in_primaryExpressionHelper14801); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    T_tree = (Object)adaptor.create(T);
                    adaptor.addChild(root_0, T_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(T);
                    }

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:3227:9: S= SUPER
                    {
                    root_0 = (Object)adaptor.nil();

                    S=(Token)match(input,SUPER,FOLLOW_SUPER_in_primaryExpressionHelper14815); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    S_tree = (Object)adaptor.create(S);
                    adaptor.addChild(root_0, S_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(S);
                    }

                    }
                    break;
                case 3 :
                    // AS3_ex.g3:3228:9: literal
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_literal_in_primaryExpressionHelper14827);
                    literal336=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal336.getTree());

                    }
                    break;
                case 4 :
                    // AS3_ex.g3:3229:9: arrayLiteral
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_arrayLiteral_in_primaryExpressionHelper14839);
                    arrayLiteral337=arrayLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayLiteral337.getTree());

                    }
                    break;
                case 5 :
                    // AS3_ex.g3:3230:9: objectLiteral
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_objectLiteral_in_primaryExpressionHelper14850);
                    objectLiteral338=objectLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, objectLiteral338.getTree());

                    }
                    break;
                case 6 :
                    // AS3_ex.g3:3231:9: ( identifierLiteral x= XML_NS_OP )? identifierLiteral
                    {
                    root_0 = (Object)adaptor.nil();

                    // AS3_ex.g3:3231:9: ( identifierLiteral x= XML_NS_OP )?
                    int alt160=2;
                    int LA160_0 = input.LA(1);

                    if ( (LA160_0==IDENTIFIER) ) {
                        int LA160_1 = input.LA(2);

                        if ( (LA160_1==XML_NS_OP) ) {
                            int LA160_3 = input.LA(3);

                            if ( (synpred390_AS3_ex()) ) {
                                alt160=1;
                            }
                        }
                    }
                    else if ( (LA160_0==NATIVE||LA160_0==TO||(LA160_0>=EACH && LA160_0<=NAMESPACE)||(LA160_0>=DYNAMIC && LA160_0<=STATIC)) ) {
                        int LA160_2 = input.LA(2);

                        if ( (LA160_2==XML_NS_OP) ) {
                            int LA160_3 = input.LA(3);

                            if ( (synpred390_AS3_ex()) ) {
                                alt160=1;
                            }
                        }
                    }
                    switch (alt160) {
                        case 1 :
                            // AS3_ex.g3:3231:10: identifierLiteral x= XML_NS_OP
                            {
                            pushFollow(FOLLOW_identifierLiteral_in_primaryExpressionHelper14863);
                            identifierLiteral339=identifierLiteral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierLiteral339.getTree());
                            x=(Token)match(input,XML_NS_OP,FOLLOW_XML_NS_OP_in_primaryExpressionHelper14867); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            x_tree = (Object)adaptor.create(x);
                            adaptor.addChild(root_0, x_tree);
                            }
                            if ( state.backtracking==0 ) {
                              emit(x);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_identifierLiteral_in_primaryExpressionHelper14873);
                    identifierLiteral340=identifierLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierLiteral340.getTree());

                    }
                    break;
                case 7 :
                    // AS3_ex.g3:3232:9: xmlPrimaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_xmlPrimaryExpression_in_primaryExpressionHelper14884);
                    xmlPrimaryExpression341=xmlPrimaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlPrimaryExpression341.getTree());

                    }
                    break;
                case 8 :
                    // AS3_ex.g3:3233:9: parExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_parExpression_in_primaryExpressionHelper14894);
                    parExpression342=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parExpression342.getTree());

                    }
                    break;
                case 9 :
                    // AS3_ex.g3:3234:9: l= LT type g= GT ( arrayLiteral )?
                    {
                    root_0 = (Object)adaptor.nil();

                    l=(Token)match(input,LT,FOLLOW_LT_in_primaryExpressionHelper14907); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    l_tree = (Object)adaptor.create(l);
                    adaptor.addChild(root_0, l_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(l);
                    }
                    pushFollow(FOLLOW_type_in_primaryExpressionHelper14911);
                    type343=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type343.getTree());
                    g=(Token)match(input,GT,FOLLOW_GT_in_primaryExpressionHelper14915); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    g_tree = (Object)adaptor.create(g);
                    adaptor.addChild(root_0, g_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(g);
                    }
                    // AS3_ex.g3:3234:48: ( arrayLiteral )?
                    int alt161=2;
                    alt161 = dfa161.predict(input);
                    switch (alt161) {
                        case 1 :
                            // AS3_ex.g3:3234:49: arrayLiteral
                            {
                            pushFollow(FOLLOW_arrayLiteral_in_primaryExpressionHelper14920);
                            arrayLiteral344=arrayLiteral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayLiteral344.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 142, primaryExpressionHelper_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primaryExpressionHelper"

    public static class objectLiteral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "objectLiteral"
    // AS3_ex.g3:3238:1: objectLiteral : L= LCURLY ( propertyNameAndValueList )? R= RCURLY ;
    public final AS3_exParser.objectLiteral_return objectLiteral() throws RecognitionException {
        AS3_exParser.objectLiteral_return retval = new AS3_exParser.objectLiteral_return();
        retval.start = input.LT(1);
        int objectLiteral_StartIndex = input.index();
        Object root_0 = null;

        Token L=null;
        Token R=null;
        AS3_exParser.propertyNameAndValueList_return propertyNameAndValueList345 = null;


        Object L_tree=null;
        Object R_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 143) ) { return retval; }
            // AS3_ex.g3:3239:5: (L= LCURLY ( propertyNameAndValueList )? R= RCURLY )
            // AS3_ex.g3:3239:9: L= LCURLY ( propertyNameAndValueList )? R= RCURLY
            {
            root_0 = (Object)adaptor.nil();

            L=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_objectLiteral14945); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            L_tree = (Object)adaptor.create(L);
            adaptor.addChild(root_0, L_tree);
            }
            if ( state.backtracking==0 ) {
              emit(L);insertWS(mPrinter.getAdvancedSpacesInsideObjectBraces());
                  pushIndent(true);
                  
            }
            // AS3_ex.g3:3241:7: ( propertyNameAndValueList )?
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==NATIVE||LA163_0==TO||(LA163_0>=EACH && LA163_0<=NAMESPACE)||(LA163_0>=DYNAMIC && LA163_0<=STATIC)||(LA163_0>=SINGLE_QUOTE_LITERAL && LA163_0<=DOUBLE_QUOTE_LITERAL)||LA163_0==HEX_NUMBER_LITERAL||LA163_0==DEC_NUMBER_LITERAL||LA163_0==IDENTIFIER) ) {
                alt163=1;
            }
            switch (alt163) {
                case 1 :
                    // AS3_ex.g3:0:0: propertyNameAndValueList
                    {
                    pushFollow(FOLLOW_propertyNameAndValueList_in_objectLiteral14949);
                    propertyNameAndValueList345=propertyNameAndValueList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyNameAndValueList345.getTree());

                    }
                    break;

            }

            R=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_objectLiteral14954); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            R_tree = (Object)adaptor.create(R);
            adaptor.addChild(root_0, R_tree);
            }
            if ( state.backtracking==0 ) {

                  popIndent();
                  insertWS(mPrinter.getAdvancedSpacesInsideObjectBraces());emit(R);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 143, objectLiteral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "objectLiteral"

    public static class propertyNameAndValueList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyNameAndValueList"
    // AS3_ex.g3:3246:1: propertyNameAndValueList : propertyNameAndValue (C= COMMA propertyNameAndValue )* ;
    public final AS3_exParser.propertyNameAndValueList_return propertyNameAndValueList() throws RecognitionException {
        AS3_exParser.propertyNameAndValueList_return retval = new AS3_exParser.propertyNameAndValueList_return();
        retval.start = input.LT(1);
        int propertyNameAndValueList_StartIndex = input.index();
        Object root_0 = null;

        Token C=null;
        AS3_exParser.propertyNameAndValue_return propertyNameAndValue346 = null;

        AS3_exParser.propertyNameAndValue_return propertyNameAndValue347 = null;


        Object C_tree=null;


        	WrapOptions options=mPrinter.getArrayInitWrapOptions();
        	boolean pushedFormat=false;
        	boolean pushedIndent=true; //so that we won't push another indent
        	boolean pushedWrapInfo=false;
        	int firstItem=(-1);

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 144) ) { return retval; }
            // AS3_ex.g3:3255:5: ( propertyNameAndValue (C= COMMA propertyNameAndValue )* )
            // AS3_ex.g3:3256:4: propertyNameAndValue (C= COMMA propertyNameAndValue )*
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              pushedFormat=pushFormatType(options, true);
              	   pushedWrapInfo=pushWrapInfo(options, true);
              	  
            }
            if ( state.backtracking==0 ) {
              mPrinter.captureNextTextPosition();
            }
            pushFollow(FOLLOW_propertyNameAndValue_in_propertyNameAndValueList14997);
            propertyNameAndValue346=propertyNameAndValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyNameAndValue346.getTree());
            if ( state.backtracking==0 ) {
              firstItem=mPrinter.getLastCapturePosition();
            }
            // AS3_ex.g3:3262:10: (C= COMMA propertyNameAndValue )*
            loop164:
            do {
                int alt164=2;
                int LA164_0 = input.LA(1);

                if ( (LA164_0==COMMA) ) {
                    alt164=1;
                }


                switch (alt164) {
            	case 1 :
            	    // AS3_ex.g3:3262:11: C= COMMA propertyNameAndValue
            	    {
            	    C=(Token)match(input,COMMA,FOLLOW_COMMA_in_propertyNameAndValueList15021); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    C_tree = (Object)adaptor.create(C);
            	    adaptor.addChild(root_0, C_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      pushedIndent=emitCommaWithSpacingAndCRs(options, C, pushedIndent, firstItem, ASPrettyPrinter.Break_SubType_Object);
            	    }
            	    pushFollow(FOLLOW_propertyNameAndValue_in_propertyNameAndValueList15025);
            	    propertyNameAndValue347=propertyNameAndValue();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyNameAndValue347.getTree());

            	    }
            	    break;

            	default :
            	    break loop164;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              //        if (pushedIndent)
              //   	    	popIndent();
                 	    if (pushedFormat)
                 	    {
                 	    	mPrinter.popFormatMode();
                 	    }
                 	    if (pushedWrapInfo)
                 	    	mPrinter.popWrapContext();
                    
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 144, propertyNameAndValueList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "propertyNameAndValueList"

    public static class propertyNameAndValue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyNameAndValue"
    // AS3_ex.g3:3275:1: propertyNameAndValue : propertyName C= COLON assignmentExpression ;
    public final AS3_exParser.propertyNameAndValue_return propertyNameAndValue() throws RecognitionException {
        AS3_exParser.propertyNameAndValue_return retval = new AS3_exParser.propertyNameAndValue_return();
        retval.start = input.LT(1);
        int propertyNameAndValue_StartIndex = input.index();
        Object root_0 = null;

        Token C=null;
        AS3_exParser.propertyName_return propertyName348 = null;

        AS3_exParser.assignmentExpression_return assignmentExpression349 = null;


        Object C_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 145) ) { return retval; }
            // AS3_ex.g3:3276:5: ( propertyName C= COLON assignmentExpression )
            // AS3_ex.g3:3276:9: propertyName C= COLON assignmentExpression
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_propertyName_in_propertyNameAndValue15055);
            propertyName348=propertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyName348.getTree());
            C=(Token)match(input,COLON,FOLLOW_COLON_in_propertyNameAndValue15059); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            C_tree = (Object)adaptor.create(C);
            adaptor.addChild(root_0, C_tree);
            }
            if ( state.backtracking==0 ) {

                  		emit(C);
                  		insertWS(mPrinter.getSpacesAfterLabel());
                  		
            }
            pushFollow(FOLLOW_assignmentExpression_in_propertyNameAndValue15077);
            assignmentExpression349=assignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentExpression349.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 145, propertyNameAndValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "propertyNameAndValue"

    public static class propertyName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyName"
    // AS3_ex.g3:3284:1: propertyName : ( identifierLiteral | stringLiteral | numericLiteral );
    public final AS3_exParser.propertyName_return propertyName() throws RecognitionException {
        AS3_exParser.propertyName_return retval = new AS3_exParser.propertyName_return();
        retval.start = input.LT(1);
        int propertyName_StartIndex = input.index();
        Object root_0 = null;

        AS3_exParser.identifierLiteral_return identifierLiteral350 = null;

        AS3_exParser.stringLiteral_return stringLiteral351 = null;

        AS3_exParser.numericLiteral_return numericLiteral352 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 146) ) { return retval; }
            // AS3_ex.g3:3285:5: ( identifierLiteral | stringLiteral | numericLiteral )
            int alt165=3;
            switch ( input.LA(1) ) {
            case NATIVE:
            case TO:
            case EACH:
            case GET:
            case SET:
            case NAMESPACE:
            case DYNAMIC:
            case FINAL:
            case OVERRIDE:
            case STATIC:
            case IDENTIFIER:
                {
                alt165=1;
                }
                break;
            case SINGLE_QUOTE_LITERAL:
            case DOUBLE_QUOTE_LITERAL:
                {
                alt165=2;
                }
                break;
            case HEX_NUMBER_LITERAL:
            case DEC_NUMBER_LITERAL:
                {
                alt165=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 165, 0, input);

                throw nvae;
            }

            switch (alt165) {
                case 1 :
                    // AS3_ex.g3:3285:9: identifierLiteral
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_identifierLiteral_in_propertyName15096);
                    identifierLiteral350=identifierLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierLiteral350.getTree());

                    }
                    break;
                case 2 :
                    // AS3_ex.g3:3286:9: stringLiteral
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_stringLiteral_in_propertyName15107);
                    stringLiteral351=stringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringLiteral351.getTree());

                    }
                    break;
                case 3 :
                    // AS3_ex.g3:3287:9: numericLiteral
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_numericLiteral_in_propertyName15118);
                    numericLiteral352=numericLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericLiteral352.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 146, propertyName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "propertyName"

    public static class arrayLiteral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayLiteral"
    // AS3_ex.g3:3291:1: arrayLiteral : L= LBRACK ( elementList )? R= RBRACK ;
    public final AS3_exParser.arrayLiteral_return arrayLiteral() throws RecognitionException {
        AS3_exParser.arrayLiteral_return retval = new AS3_exParser.arrayLiteral_return();
        retval.start = input.LT(1);
        int arrayLiteral_StartIndex = input.index();
        Object root_0 = null;

        Token L=null;
        Token R=null;
        AS3_exParser.elementList_return elementList353 = null;


        Object L_tree=null;
        Object R_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 147) ) { return retval; }
            // AS3_ex.g3:3292:5: (L= LBRACK ( elementList )? R= RBRACK )
            // AS3_ex.g3:3292:9: L= LBRACK ( elementList )? R= RBRACK
            {
            root_0 = (Object)adaptor.nil();

            L=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_arrayLiteral15141); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            L_tree = (Object)adaptor.create(L);
            adaptor.addChild(root_0, L_tree);
            }
            if ( state.backtracking==0 ) {
              emit(L);insertWS(mPrinter.getAdvancedSpacesInsideArrayDeclBrackets());
            }
            // AS3_ex.g3:3292:92: ( elementList )?
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( ((LA166_0>=AS && LA166_0<=STATIC)||LA166_0==LCURLY||LA166_0==LPAREN||LA166_0==LBRACK||LA166_0==LT||(LA166_0>=PLUS && LA166_0<=STAR)||(LA166_0>=INC && LA166_0<=DEC)||(LA166_0>=NOT && LA166_0<=INV)||(LA166_0>=XML_AT && LA166_0<=XML_LS_STD)||(LA166_0>=SINGLE_QUOTE_LITERAL && LA166_0<=DOUBLE_QUOTE_LITERAL)||LA166_0==REGULAR_EXPR_LITERAL||LA166_0==HEX_NUMBER_LITERAL||LA166_0==DEC_NUMBER_LITERAL||LA166_0==IDENTIFIER||(LA166_0>=XML_COMMENT && LA166_0<=XML_PI)) ) {
                alt166=1;
            }
            switch (alt166) {
                case 1 :
                    // AS3_ex.g3:0:0: elementList
                    {
                    pushFollow(FOLLOW_elementList_in_arrayLiteral15145);
                    elementList353=elementList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementList353.getTree());

                    }
                    break;

            }

            R=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_arrayLiteral15150); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            R_tree = (Object)adaptor.create(R);
            adaptor.addChild(root_0, R_tree);
            }
            if ( state.backtracking==0 ) {
              insertWS(mPrinter.getAdvancedSpacesInsideArrayDeclBrackets());emit(R);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 147, arrayLiteral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arrayLiteral"

    public static class elementList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementList"
    // AS3_ex.g3:3295:1: elementList : assignmentExpression (C= COMMA assignmentExpression )* (C= COMMA )? ;
    public final AS3_exParser.elementList_return elementList() throws RecognitionException {
        AS3_exParser.elementList_return retval = new AS3_exParser.elementList_return();
        retval.start = input.LT(1);
        int elementList_StartIndex = input.index();
        Object root_0 = null;

        Token C=null;
        AS3_exParser.assignmentExpression_return assignmentExpression354 = null;

        AS3_exParser.assignmentExpression_return assignmentExpression355 = null;


        Object C_tree=null;


        	WrapOptions options=mPrinter.getArrayInitWrapOptions();
        	boolean pushedFormat=false;
        	boolean pushedIndent=false;
        	boolean pushedWrapInfo=false;
        	int firstItemPos=0;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 148) ) { return retval; }
            // AS3_ex.g3:3304:5: ( assignmentExpression (C= COMMA assignmentExpression )* (C= COMMA )? )
            // AS3_ex.g3:3305:6: assignmentExpression (C= COMMA assignmentExpression )* (C= COMMA )?
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              pushedFormat=pushFormatType(options, true);
            }
            if ( state.backtracking==0 ) {

              		 pushedIndent=pushLazyParmIndent(pushedIndent, options.getIndentStyle());
                  	 pushedWrapInfo=pushWrapInfo(options, true);
            }
            if ( state.backtracking==0 ) {
              mPrinter.captureNextTextPosition();
            }
            pushFollow(FOLLOW_assignmentExpression_in_elementList15198);
            assignmentExpression354=assignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentExpression354.getTree());
            if ( state.backtracking==0 ) {
              firstItemPos=mPrinter.getLastCapturePosition();
            }
            // AS3_ex.g3:3310:6: (C= COMMA assignmentExpression )*
            loop167:
            do {
                int alt167=2;
                int LA167_0 = input.LA(1);

                if ( (LA167_0==COMMA) ) {
                    int LA167_1 = input.LA(2);

                    if ( ((LA167_1>=AS && LA167_1<=STATIC)||LA167_1==LCURLY||LA167_1==LPAREN||LA167_1==LBRACK||LA167_1==LT||(LA167_1>=PLUS && LA167_1<=STAR)||(LA167_1>=INC && LA167_1<=DEC)||(LA167_1>=NOT && LA167_1<=INV)||(LA167_1>=XML_AT && LA167_1<=XML_LS_STD)||(LA167_1>=SINGLE_QUOTE_LITERAL && LA167_1<=DOUBLE_QUOTE_LITERAL)||LA167_1==REGULAR_EXPR_LITERAL||LA167_1==HEX_NUMBER_LITERAL||LA167_1==DEC_NUMBER_LITERAL||LA167_1==IDENTIFIER||(LA167_1>=XML_COMMENT && LA167_1<=XML_PI)) ) {
                        alt167=1;
                    }


                }


                switch (alt167) {
            	case 1 :
            	    // AS3_ex.g3:3311:7: C= COMMA assignmentExpression
            	    {
            	    C=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementList15218); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    C_tree = (Object)adaptor.create(C);
            	    adaptor.addChild(root_0, C_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      pushedIndent=emitCommaWithSpacingAndCRs(options, C, pushedIndent, firstItemPos, ASPrettyPrinter.Break_SubType_Array);
            	    }
            	    pushFollow(FOLLOW_assignmentExpression_in_elementList15235);
            	    assignmentExpression355=assignmentExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentExpression355.getTree());

            	    }
            	    break;

            	default :
            	    break loop167;
                }
            } while (true);

            // AS3_ex.g3:3314:9: (C= COMMA )?
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==COMMA) ) {
                alt168=1;
            }
            switch (alt168) {
                case 1 :
                    // AS3_ex.g3:3314:10: C= COMMA
                    {
                    C=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementList15248); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    C_tree = (Object)adaptor.create(C);
                    adaptor.addChild(root_0, C_tree);
                    }
                    if ( state.backtracking==0 ) {
                      emit(C);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			if (pushedIndent)
              				popIndent();
                  	    if (pushedFormat)
                  	    {
                  	    	mPrinter.popFormatMode();
                  	    }
                  	    if (pushedWrapInfo)
                  	    	mPrinter.popWrapContext();
              		
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 148, elementList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementList"

    // $ANTLR start synpred9_AS3_ex
    public final void synpred9_AS3_ex_fragment() throws RecognitionException {   
        Token s=null;
        Token d=null;
        Token c=null;
        Token I2=null;

        // AS3_ex.g3:1252:82: ({...}? => (s= SUB | d= DOT | c= COLON ) {...}? => (I2= IDENTIFIER | allKeywords ) )
        // AS3_ex.g3:1252:82: {...}? => (s= SUB | d= DOT | c= COLON ) {...}? => (I2= IDENTIFIER | allKeywords )
        {
        if ( !((!promoteWhitespace())) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred9_AS3_ex", "!promoteWhitespace()");
        }
        // AS3_ex.g3:1252:108: (s= SUB | d= DOT | c= COLON )
        int alt169=3;
        switch ( input.LA(1) ) {
        case SUB:
            {
            alt169=1;
            }
            break;
        case DOT:
            {
            alt169=2;
            }
            break;
        case COLON:
            {
            alt169=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 169, 0, input);

            throw nvae;
        }

        switch (alt169) {
            case 1 :
                // AS3_ex.g3:1252:109: s= SUB
                {
                s=(Token)match(input,SUB,FOLLOW_SUB_in_synpred9_AS3_ex3848); if (state.failed) return ;

                }
                break;
            case 2 :
                // AS3_ex.g3:1252:129: d= DOT
                {
                d=(Token)match(input,DOT,FOLLOW_DOT_in_synpred9_AS3_ex3856); if (state.failed) return ;

                }
                break;
            case 3 :
                // AS3_ex.g3:1252:149: c= COLON
                {
                c=(Token)match(input,COLON,FOLLOW_COLON_in_synpred9_AS3_ex3864); if (state.failed) return ;

                }
                break;

        }

        if ( !((!promoteWhitespace())) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred9_AS3_ex", "!promoteWhitespace()");
        }
        // AS3_ex.g3:1252:196: (I2= IDENTIFIER | allKeywords )
        int alt170=2;
        int LA170_0 = input.LA(1);

        if ( (LA170_0==IDENTIFIER) ) {
            alt170=1;
        }
        else if ( ((LA170_0>=AS && LA170_0<=STATIC)) ) {
            alt170=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 170, 0, input);

            throw nvae;
        }
        switch (alt170) {
            case 1 :
                // AS3_ex.g3:1252:197: I2= IDENTIFIER
                {
                I2=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred9_AS3_ex3875); if (state.failed) return ;

                }
                break;
            case 2 :
                // AS3_ex.g3:1252:226: allKeywords
                {
                pushFollow(FOLLOW_allKeywords_in_synpred9_AS3_ex3881);
                allKeywords();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred9_AS3_ex

    // $ANTLR start synpred68_AS3_ex
    public final void synpred68_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1341:6: ( xmlTextElement )
        // AS3_ex.g3:1341:6: xmlTextElement
        {
        pushFollow(FOLLOW_xmlTextElement_in_synpred68_AS3_ex4908);
        xmlTextElement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred68_AS3_ex

    // $ANTLR start synpred72_AS3_ex
    public final void synpred72_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1363:11: ( xmlQualifiedIdentifier )
        // AS3_ex.g3:1363:11: xmlQualifiedIdentifier
        {
        pushFollow(FOLLOW_xmlQualifiedIdentifier_in_synpred72_AS3_ex5057);
        xmlQualifiedIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred72_AS3_ex

    // $ANTLR start synpred73_AS3_ex
    public final void synpred73_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1370:12: ( xmlQualifiedIdentifier )
        // AS3_ex.g3:1370:12: xmlQualifiedIdentifier
        {
        pushFollow(FOLLOW_xmlQualifiedIdentifier_in_synpred73_AS3_ex5162);
        xmlQualifiedIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred73_AS3_ex

    // $ANTLR start synpred74_AS3_ex
    public final void synpred74_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1371:14: ( xmlPropertySelector )
        // AS3_ex.g3:1371:14: xmlPropertySelector
        {
        pushFollow(FOLLOW_xmlPropertySelector_in_synpred74_AS3_ex5177);
        xmlPropertySelector();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred74_AS3_ex

    // $ANTLR start synpred96_AS3_ex
    public final void synpred96_AS3_ex_fragment() throws RecognitionException {   
        Token l=null;
        Token r=null;

        // AS3_ex.g3:1553:4: ( conditionalCompilerOption l= LCURLY mxmlEmbedded r= RCURLY )
        // AS3_ex.g3:1553:4: conditionalCompilerOption l= LCURLY mxmlEmbedded r= RCURLY
        {
        if ( state.backtracking==0 ) {
          insertCR(false);
        }
        pushFollow(FOLLOW_conditionalCompilerOption_in_synpred96_AS3_ex6081);
        conditionalCompilerOption();

        state._fsp--;
        if (state.failed) return ;
        l=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_synpred96_AS3_ex6089); if (state.failed) return ;
        pushFollow(FOLLOW_mxmlEmbedded_in_synpred96_AS3_ex6099);
        mxmlEmbedded();

        state._fsp--;
        if (state.failed) return ;
        r=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_synpred96_AS3_ex6108); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred96_AS3_ex

    // $ANTLR start synpred97_AS3_ex
    public final void synpred97_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1563:9: ( propertyDeclaration )
        // AS3_ex.g3:1563:9: propertyDeclaration
        {
        pushFollow(FOLLOW_propertyDeclaration_in_synpred97_AS3_ex6121);
        propertyDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred97_AS3_ex

    // $ANTLR start synpred98_AS3_ex
    public final void synpred98_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1563:31: ( functionDeclaration )
        // AS3_ex.g3:1563:31: functionDeclaration
        {
        pushFollow(FOLLOW_functionDeclaration_in_synpred98_AS3_ex6125);
        functionDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred98_AS3_ex

    // $ANTLR start synpred99_AS3_ex
    public final void synpred99_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1563:53: ( statement )
        // AS3_ex.g3:1563:53: statement
        {
        pushFollow(FOLLOW_statement_in_synpred99_AS3_ex6129);
        statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred99_AS3_ex

    // $ANTLR start synpred100_AS3_ex
    public final void synpred100_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1563:65: ( directive )
        // AS3_ex.g3:1563:65: directive
        {
        pushFollow(FOLLOW_directive_in_synpred100_AS3_ex6133);
        directive();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred100_AS3_ex

    // $ANTLR start synpred101_AS3_ex
    public final void synpred101_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1563:77: ( interfaceFunctionDeclaration )
        // AS3_ex.g3:1563:77: interfaceFunctionDeclaration
        {
        pushFollow(FOLLOW_interfaceFunctionDeclaration_in_synpred101_AS3_ex6137);
        interfaceFunctionDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred101_AS3_ex

    // $ANTLR start synpred104_AS3_ex
    public final void synpred104_AS3_ex_fragment() throws RecognitionException {   
        Token l=null;
        Token r=null;

        // AS3_ex.g3:1570:6: ( conditionalCompilerOption l= LCURLY ( packageElement )* r= RCURLY )
        // AS3_ex.g3:1570:6: conditionalCompilerOption l= LCURLY ( packageElement )* r= RCURLY
        {
        if ( state.backtracking==0 ) {
          insertCR(false);
        }
        pushFollow(FOLLOW_conditionalCompilerOption_in_synpred104_AS3_ex6180);
        conditionalCompilerOption();

        state._fsp--;
        if (state.failed) return ;
        l=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_synpred104_AS3_ex6188); if (state.failed) return ;
        // AS3_ex.g3:1579:4: ( packageElement )*
        loop173:
        do {
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( ((LA173_0>=AS && LA173_0<=LCURLY)||LA173_0==LPAREN||LA173_0==LBRACK||LA173_0==LT||(LA173_0>=PLUS && LA173_0<=STAR)||(LA173_0>=INC && LA173_0<=DEC)||(LA173_0>=NOT && LA173_0<=INV)||(LA173_0>=XML_AT && LA173_0<=XML_LS_STD)||(LA173_0>=SINGLE_QUOTE_LITERAL && LA173_0<=DOUBLE_QUOTE_LITERAL)||LA173_0==REGULAR_EXPR_LITERAL||LA173_0==HEX_NUMBER_LITERAL||LA173_0==DEC_NUMBER_LITERAL||LA173_0==IDENTIFIER||(LA173_0>=XML_COMMENT && LA173_0<=XML_PI)) ) {
                alt173=1;
            }


            switch (alt173) {
        	case 1 :
        	    // AS3_ex.g3:0:0: packageElement
        	    {
        	    pushFollow(FOLLOW_packageElement_in_synpred104_AS3_ex6198);
        	    packageElement();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop173;
            }
        } while (true);

        r=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_synpred104_AS3_ex6213); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred104_AS3_ex

    // $ANTLR start synpred105_AS3_ex
    public final void synpred105_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1582:8: ( classOrInterfaceDecl )
        // AS3_ex.g3:1582:8: classOrInterfaceDecl
        {
        pushFollow(FOLLOW_classOrInterfaceDecl_in_synpred105_AS3_ex6228);
        classOrInterfaceDecl();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred105_AS3_ex

    // $ANTLR start synpred106_AS3_ex
    public final void synpred106_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1582:31: ( propertyDeclaration )
        // AS3_ex.g3:1582:31: propertyDeclaration
        {
        pushFollow(FOLLOW_propertyDeclaration_in_synpred106_AS3_ex6232);
        propertyDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred106_AS3_ex

    // $ANTLR start synpred107_AS3_ex
    public final void synpred107_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1582:53: ( functionDeclaration )
        // AS3_ex.g3:1582:53: functionDeclaration
        {
        pushFollow(FOLLOW_functionDeclaration_in_synpred107_AS3_ex6236);
        functionDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred107_AS3_ex

    // $ANTLR start synpred108_AS3_ex
    public final void synpred108_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1582:75: ( interfaceFunctionDeclaration )
        // AS3_ex.g3:1582:75: interfaceFunctionDeclaration
        {
        pushFollow(FOLLOW_interfaceFunctionDeclaration_in_synpred108_AS3_ex6240);
        interfaceFunctionDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred108_AS3_ex

    // $ANTLR start synpred109_AS3_ex
    public final void synpred109_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1582:106: ( statement )
        // AS3_ex.g3:1582:106: statement
        {
        pushFollow(FOLLOW_statement_in_synpred109_AS3_ex6244);
        statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred109_AS3_ex

    // $ANTLR start synpred123_AS3_ex
    public final void synpred123_AS3_ex_fragment() throws RecognitionException {   
        Token s=null;

        // AS3_ex.g3:1666:26: (s= SEMI )
        // AS3_ex.g3:1666:26: s= SEMI
        {
        s=(Token)match(input,SEMI,FOLLOW_SEMI_in_synpred123_AS3_ex6635); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred123_AS3_ex

    // $ANTLR start synpred124_AS3_ex
    public final void synpred124_AS3_ex_fragment() throws RecognitionException {   
        Token E=null;

        // AS3_ex.g3:1697:6: ( eitherIdentifier E= ASSIGN )
        // AS3_ex.g3:1697:6: eitherIdentifier E= ASSIGN
        {
        pushFollow(FOLLOW_eitherIdentifier_in_synpred124_AS3_ex6699);
        eitherIdentifier();

        state._fsp--;
        if (state.failed) return ;
        E=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred124_AS3_ex6703); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred124_AS3_ex

    // $ANTLR start synpred135_AS3_ex
    public final void synpred135_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1780:7: ( conditionalCompilerOption LCURLY )
        // AS3_ex.g3:1780:8: conditionalCompilerOption LCURLY
        {
        pushFollow(FOLLOW_conditionalCompilerOption_in_synpred135_AS3_ex7091);
        conditionalCompilerOption();

        state._fsp--;
        if (state.failed) return ;
        match(input,LCURLY,FOLLOW_LCURLY_in_synpred135_AS3_ex7093); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred135_AS3_ex

    // $ANTLR start synpred137_AS3_ex
    public final void synpred137_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1794:7: ( propertyDeclaration )
        // AS3_ex.g3:1794:7: propertyDeclaration
        {
        pushFollow(FOLLOW_propertyDeclaration_in_synpred137_AS3_ex7158);
        propertyDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred137_AS3_ex

    // $ANTLR start synpred138_AS3_ex
    public final void synpred138_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1794:29: ( functionDeclaration )
        // AS3_ex.g3:1794:29: functionDeclaration
        {
        pushFollow(FOLLOW_functionDeclaration_in_synpred138_AS3_ex7162);
        functionDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred138_AS3_ex

    // $ANTLR start synpred139_AS3_ex
    public final void synpred139_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1794:51: ( statement )
        // AS3_ex.g3:1794:51: statement
        {
        pushFollow(FOLLOW_statement_in_synpred139_AS3_ex7166);
        statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred139_AS3_ex

    // $ANTLR start synpred140_AS3_ex
    public final void synpred140_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1798:7: ( conditionalCompilerOption LCURLY )
        // AS3_ex.g3:1798:8: conditionalCompilerOption LCURLY
        {
        pushFollow(FOLLOW_conditionalCompilerOption_in_synpred140_AS3_ex7185);
        conditionalCompilerOption();

        state._fsp--;
        if (state.failed) return ;
        match(input,LCURLY,FOLLOW_LCURLY_in_synpred140_AS3_ex7187); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred140_AS3_ex

    // $ANTLR start synpred142_AS3_ex
    public final void synpred142_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1812:7: ( propertyDeclaration )
        // AS3_ex.g3:1812:7: propertyDeclaration
        {
        pushFollow(FOLLOW_propertyDeclaration_in_synpred142_AS3_ex7253);
        propertyDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred142_AS3_ex

    // $ANTLR start synpred143_AS3_ex
    public final void synpred143_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1812:29: ( interfaceFunctionDeclaration )
        // AS3_ex.g3:1812:29: interfaceFunctionDeclaration
        {
        pushFollow(FOLLOW_interfaceFunctionDeclaration_in_synpred143_AS3_ex7257);
        interfaceFunctionDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred143_AS3_ex

    // $ANTLR start synpred144_AS3_ex
    public final void synpred144_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1812:60: ( statement )
        // AS3_ex.g3:1812:60: statement
        {
        pushFollow(FOLLOW_statement_in_synpred144_AS3_ex7261);
        statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred144_AS3_ex

    // $ANTLR start synpred152_AS3_ex
    public final void synpred152_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1839:203: ( memberModifiers )
        // AS3_ex.g3:1839:203: memberModifiers
        {
        pushFollow(FOLLOW_memberModifiers_in_synpred152_AS3_ex7412);
        memberModifiers();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred152_AS3_ex

    // $ANTLR start synpred167_AS3_ex
    public final void synpred167_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1930:9: ( statement )
        // AS3_ex.g3:1930:9: statement
        {
        pushFollow(FOLLOW_statement_in_synpred167_AS3_ex7935);
        statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred167_AS3_ex

    // $ANTLR start synpred169_AS3_ex
    public final void synpred169_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1945:9: ( memberModifier )
        // AS3_ex.g3:1945:9: memberModifier
        {
        pushFollow(FOLLOW_memberModifier_in_synpred169_AS3_ex8000);
        memberModifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred169_AS3_ex

    // $ANTLR start synpred179_AS3_ex
    public final void synpred179_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1977:7: ( blockStatement )
        // AS3_ex.g3:1977:7: blockStatement
        {
        if ( state.backtracking==0 ) {
          mPrinter.inOther();
        }
        pushFollow(FOLLOW_blockStatement_in_synpred179_AS3_ex8176);
        blockStatement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred179_AS3_ex

    // $ANTLR start synpred180_AS3_ex
    public final void synpred180_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1978:9: ( directive )
        // AS3_ex.g3:1978:9: directive
        {
        if ( state.backtracking==0 ) {
          insertStatementCR();
        }
        pushFollow(FOLLOW_directive_in_synpred180_AS3_ex8187);
        directive();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred180_AS3_ex

    // $ANTLR start synpred181_AS3_ex
    public final void synpred181_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1979:9: ( namespaceDirective )
        // AS3_ex.g3:1979:9: namespaceDirective
        {
        if ( state.backtracking==0 ) {
          insertStatementCR();
        }
        pushFollow(FOLLOW_namespaceDirective_in_synpred181_AS3_ex8198);
        namespaceDirective();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred181_AS3_ex

    // $ANTLR start synpred182_AS3_ex
    public final void synpred182_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1980:9: ( constantVarStatement )
        // AS3_ex.g3:1980:9: constantVarStatement
        {
        if ( state.backtracking==0 ) {
          insertStatementCR();
        }
        pushFollow(FOLLOW_constantVarStatement_in_synpred182_AS3_ex8211);
        constantVarStatement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred182_AS3_ex

    // $ANTLR start synpred183_AS3_ex
    public final void synpred183_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1981:9: ( tryStatement )
        // AS3_ex.g3:1981:9: tryStatement
        {
        if ( state.backtracking==0 ) {
          markBlockFlag();insertLines(mPrinter.getBlankLinesBeforeControlStatement());
        }
        pushFollow(FOLLOW_tryStatement_in_synpred183_AS3_ex8224);
        tryStatement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred183_AS3_ex

    // $ANTLR start synpred184_AS3_ex
    public final void synpred184_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1982:9: ( switchStatement )
        // AS3_ex.g3:1982:9: switchStatement
        {
        if ( state.backtracking==0 ) {
          markBlockFlag();
        }
        pushFollow(FOLLOW_switchStatement_in_synpred184_AS3_ex8236);
        switchStatement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred184_AS3_ex

    // $ANTLR start synpred185_AS3_ex
    public final void synpred185_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1983:9: ( withStatement )
        // AS3_ex.g3:1983:9: withStatement
        {
        if ( state.backtracking==0 ) {
          markBlockFlag();insertLines(mPrinter.getBlankLinesBeforeControlStatement());
        }
        pushFollow(FOLLOW_withStatement_in_synpred185_AS3_ex8250);
        withStatement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred185_AS3_ex

    // $ANTLR start synpred186_AS3_ex
    public final void synpred186_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1984:9: ( returnStatement )
        // AS3_ex.g3:1984:9: returnStatement
        {
        if ( state.backtracking==0 ) {
          pushLazyIndent();
        }
        pushFollow(FOLLOW_returnStatement_in_synpred186_AS3_ex8264);
        returnStatement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred186_AS3_ex

    // $ANTLR start synpred187_AS3_ex
    public final void synpred187_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1985:9: ( breakStatement )
        // AS3_ex.g3:1985:9: breakStatement
        {
        if ( state.backtracking==0 ) {
          pushLazyIndent();
        }
        pushFollow(FOLLOW_breakStatement_in_synpred187_AS3_ex8278);
        breakStatement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred187_AS3_ex

    // $ANTLR start synpred188_AS3_ex
    public final void synpred188_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1986:9: ( continueStatement )
        // AS3_ex.g3:1986:9: continueStatement
        {
        if ( state.backtracking==0 ) {
          pushLazyIndent();
        }
        pushFollow(FOLLOW_continueStatement_in_synpred188_AS3_ex8292);
        continueStatement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred188_AS3_ex

    // $ANTLR start synpred189_AS3_ex
    public final void synpred189_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1987:9: ( forStatement )
        // AS3_ex.g3:1987:9: forStatement
        {
        if ( state.backtracking==0 ) {
          mPrinter.inLoop();
        }
        pushFollow(FOLLOW_forStatement_in_synpred189_AS3_ex8309);
        forStatement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred189_AS3_ex

    // $ANTLR start synpred190_AS3_ex
    public final void synpred190_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1988:9: ( forInStatement )
        // AS3_ex.g3:1988:9: forInStatement
        {
        if ( state.backtracking==0 ) {
          mPrinter.inLoop();
        }
        pushFollow(FOLLOW_forInStatement_in_synpred190_AS3_ex8326);
        forInStatement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred190_AS3_ex

    // $ANTLR start synpred191_AS3_ex
    public final void synpred191_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1989:9: ( forEachInStatement )
        // AS3_ex.g3:1989:9: forEachInStatement
        {
        if ( state.backtracking==0 ) {
          mPrinter.inLoop();
        }
        pushFollow(FOLLOW_forEachInStatement_in_synpred191_AS3_ex8343);
        forEachInStatement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred191_AS3_ex

    // $ANTLR start synpred192_AS3_ex
    public final void synpred192_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1990:9: ( doWhileStatement )
        // AS3_ex.g3:1990:9: doWhileStatement
        {
        if ( state.backtracking==0 ) {
          mPrinter.inLoop();
        }
        pushFollow(FOLLOW_doWhileStatement_in_synpred192_AS3_ex8360);
        doWhileStatement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred192_AS3_ex

    // $ANTLR start synpred193_AS3_ex
    public final void synpred193_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1991:9: ( whileStatement )
        // AS3_ex.g3:1991:9: whileStatement
        {
        if ( state.backtracking==0 ) {
          mPrinter.inLoop();
        }
        pushFollow(FOLLOW_whileStatement_in_synpred193_AS3_ex8377);
        whileStatement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred193_AS3_ex

    // $ANTLR start synpred194_AS3_ex
    public final void synpred194_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1992:9: ( ifStatement )
        // AS3_ex.g3:1992:9: ifStatement
        {
        if ( state.backtracking==0 ) {
          mPrinter.inCondition();
        }
        pushFollow(FOLLOW_ifStatement_in_synpred194_AS3_ex8392);
        ifStatement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred194_AS3_ex

    // $ANTLR start synpred195_AS3_ex
    public final void synpred195_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1993:9: ( variableStatement )
        // AS3_ex.g3:1993:9: variableStatement
        {
        if ( state.backtracking==0 ) {
          insertStatementCR();
        }
        pushFollow(FOLLOW_variableStatement_in_synpred195_AS3_ex8406);
        variableStatement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred195_AS3_ex

    // $ANTLR start synpred196_AS3_ex
    public final void synpred196_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1994:9: ( throwStatement )
        // AS3_ex.g3:1994:9: throwStatement
        {
        if ( state.backtracking==0 ) {
          pushLazyIndent();
        }
        pushFollow(FOLLOW_throwStatement_in_synpred196_AS3_ex8421);
        throwStatement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred196_AS3_ex

    // $ANTLR start synpred197_AS3_ex
    public final void synpred197_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1995:9: ( labelledStatement )
        // AS3_ex.g3:1995:9: labelledStatement
        {
        if ( state.backtracking==0 ) {
          insertLines(mPrinter.getBlankLinesBeforeControlStatement());
        }
        pushFollow(FOLLOW_labelledStatement_in_synpred197_AS3_ex8437);
        labelledStatement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred197_AS3_ex

    // $ANTLR start synpred198_AS3_ex
    public final void synpred198_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:1996:9: ( expression semic )
        // AS3_ex.g3:1996:9: expression semic
        {
        if ( state.backtracking==0 ) {
          pushLazyIndent();
        }
        pushFollow(FOLLOW_expression_in_synpred198_AS3_ex8469);
        expression();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_semic_in_synpred198_AS3_ex8471);
        semic();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred198_AS3_ex

    // $ANTLR start synpred201_AS3_ex
    public final void synpred201_AS3_ex_fragment() throws RecognitionException {   
        Token S=null;

        // AS3_ex.g3:2048:51: (S= SEMI )
        // AS3_ex.g3:2048:51: S= SEMI
        {
        S=(Token)match(input,SEMI,FOLLOW_SEMI_in_synpred201_AS3_ex8650); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred201_AS3_ex

    // $ANTLR start synpred205_AS3_ex
    public final void synpred205_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:2100:11: ( ( catchClause )+ finallyClause )
        // AS3_ex.g3:2100:11: ( catchClause )+ finallyClause
        {
        // AS3_ex.g3:2100:11: ( catchClause )+
        int cnt181=0;
        loop181:
        do {
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==CATCH) ) {
                alt181=1;
            }


            switch (alt181) {
        	case 1 :
        	    // AS3_ex.g3:0:0: catchClause
        	    {
        	    pushFollow(FOLLOW_catchClause_in_synpred205_AS3_ex8852);
        	    catchClause();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt181 >= 1 ) break loop181;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(181, input);
                    throw eee;
            }
            cnt181++;
        } while (true);

        pushFollow(FOLLOW_finallyClause_in_synpred205_AS3_ex8855);
        finallyClause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred205_AS3_ex

    // $ANTLR start synpred207_AS3_ex
    public final void synpred207_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:2101:11: ( ( catchClause )+ )
        // AS3_ex.g3:2101:11: ( catchClause )+
        {
        // AS3_ex.g3:2101:11: ( catchClause )+
        int cnt182=0;
        loop182:
        do {
            int alt182=2;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==CATCH) ) {
                alt182=1;
            }


            switch (alt182) {
        	case 1 :
        	    // AS3_ex.g3:0:0: catchClause
        	    {
        	    pushFollow(FOLLOW_catchClause_in_synpred207_AS3_ex8867);
        	    catchClause();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt182 >= 1 ) break loop182;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(182, input);
                    throw eee;
            }
            cnt182++;
        } while (true);


        }
    }
    // $ANTLR end synpred207_AS3_ex

    // $ANTLR start synpred209_AS3_ex
    public final void synpred209_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:2169:6: ( statement )
        // AS3_ex.g3:2169:6: statement
        {
        pushFollow(FOLLOW_statement_in_synpred209_AS3_ex9178);
        statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred209_AS3_ex

    // $ANTLR start synpred220_AS3_ex
    public final void synpred220_AS3_ex_fragment() throws RecognitionException {   
        Token S=null;

        // AS3_ex.g3:2370:134: (S= SEMI )
        // AS3_ex.g3:2370:134: S= SEMI
        {
        S=(Token)match(input,SEMI,FOLLOW_SEMI_in_synpred220_AS3_ex10101); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred220_AS3_ex

    // $ANTLR start synpred221_AS3_ex
    public final void synpred221_AS3_ex_fragment() throws RecognitionException {   
        Token E=null;

        // AS3_ex.g3:2458:26: (E= ELSE statement )
        // AS3_ex.g3:2458:26: E= ELSE statement
        {
        E=(Token)match(input,ELSE,FOLLOW_ELSE_in_synpred221_AS3_ex10446); if (state.failed) return ;
        pushFollow(FOLLOW_statement_in_synpred221_AS3_ex10534);
        statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred221_AS3_ex

    // $ANTLR start synpred236_AS3_ex
    public final void synpred236_AS3_ex_fragment() throws RecognitionException {   
        Token C=null;

        // AS3_ex.g3:2676:30: (C= COMMA assignmentExpression )
        // AS3_ex.g3:2676:30: C= COMMA assignmentExpression
        {
        C=(Token)match(input,COMMA,FOLLOW_COMMA_in_synpred236_AS3_ex11308); if (state.failed) return ;
        pushFollow(FOLLOW_assignmentExpression_in_synpred236_AS3_ex11313);
        assignmentExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred236_AS3_ex

    // $ANTLR start synpred238_AS3_ex
    public final void synpred238_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:2722:9: ( leftHandSideExpression assignmentOperator )
        // AS3_ex.g3:2722:10: leftHandSideExpression assignmentOperator
        {
        pushFollow(FOLLOW_leftHandSideExpression_in_synpred238_AS3_ex11430);
        leftHandSideExpression();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_assignmentOperator_in_synpred238_AS3_ex11433);
        assignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred238_AS3_ex

    // $ANTLR start synpred239_AS3_ex
    public final void synpred239_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:2737:9: ( leftHandSideExpression assignmentOperator )
        // AS3_ex.g3:2737:10: leftHandSideExpression assignmentOperator
        {
        pushFollow(FOLLOW_leftHandSideExpression_in_synpred239_AS3_ex11514);
        leftHandSideExpression();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_assignmentOperator_in_synpred239_AS3_ex11517);
        assignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred239_AS3_ex

    // $ANTLR start synpred255_AS3_ex
    public final void synpred255_AS3_ex_fragment() throws RecognitionException {   
        Token Q=null;
        Token C=null;

        // AS3_ex.g3:2802:31: (Q= QUE assignmentExpression C= COLON assignmentExpression )
        // AS3_ex.g3:2802:31: Q= QUE assignmentExpression C= COLON assignmentExpression
        {
        Q=(Token)match(input,QUE,FOLLOW_QUE_in_synpred255_AS3_ex11857); if (state.failed) return ;
        pushFollow(FOLLOW_assignmentExpression_in_synpred255_AS3_ex11862);
        assignmentExpression();

        state._fsp--;
        if (state.failed) return ;
        C=(Token)match(input,COLON,FOLLOW_COLON_in_synpred255_AS3_ex11869); if (state.failed) return ;
        pushFollow(FOLLOW_assignmentExpression_in_synpred255_AS3_ex11874);
        assignmentExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred255_AS3_ex

    // $ANTLR start synpred257_AS3_ex
    public final void synpred257_AS3_ex_fragment() throws RecognitionException {   
        Token L=null;

        // AS3_ex.g3:2823:32: (L= LOR logicalANDExpression )
        // AS3_ex.g3:2823:32: L= LOR logicalANDExpression
        {
        L=(Token)match(input,LOR,FOLLOW_LOR_in_synpred257_AS3_ex12011); if (state.failed) return ;
        pushFollow(FOLLOW_logicalANDExpression_in_synpred257_AS3_ex12015);
        logicalANDExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred257_AS3_ex

    // $ANTLR start synpred259_AS3_ex
    public final void synpred259_AS3_ex_fragment() throws RecognitionException {   
        Token L=null;

        // AS3_ex.g3:2843:31: (L= LAND bitwiseORExpression )
        // AS3_ex.g3:2843:31: L= LAND bitwiseORExpression
        {
        L=(Token)match(input,LAND,FOLLOW_LAND_in_synpred259_AS3_ex12141); if (state.failed) return ;
        pushFollow(FOLLOW_bitwiseORExpression_in_synpred259_AS3_ex12145);
        bitwiseORExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred259_AS3_ex

    // $ANTLR start synpred261_AS3_ex
    public final void synpred261_AS3_ex_fragment() throws RecognitionException {   
        Token O=null;

        // AS3_ex.g3:2864:32: (O= OR bitwiseXORExpression )
        // AS3_ex.g3:2864:32: O= OR bitwiseXORExpression
        {
        O=(Token)match(input,OR,FOLLOW_OR_in_synpred261_AS3_ex12270); if (state.failed) return ;
        pushFollow(FOLLOW_bitwiseXORExpression_in_synpred261_AS3_ex12274);
        bitwiseXORExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred261_AS3_ex

    // $ANTLR start synpred263_AS3_ex
    public final void synpred263_AS3_ex_fragment() throws RecognitionException {   
        Token x=null;

        // AS3_ex.g3:2884:32: (x= XOR bitwiseANDExpression )
        // AS3_ex.g3:2884:32: x= XOR bitwiseANDExpression
        {
        x=(Token)match(input,XOR,FOLLOW_XOR_in_synpred263_AS3_ex12398); if (state.failed) return ;
        pushFollow(FOLLOW_bitwiseANDExpression_in_synpred263_AS3_ex12402);
        bitwiseANDExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred263_AS3_ex

    // $ANTLR start synpred265_AS3_ex
    public final void synpred265_AS3_ex_fragment() throws RecognitionException {   
        Token A=null;

        // AS3_ex.g3:2904:30: (A= AND equalityExpression )
        // AS3_ex.g3:2904:30: A= AND equalityExpression
        {
        A=(Token)match(input,AND,FOLLOW_AND_in_synpred265_AS3_ex12522); if (state.failed) return ;
        pushFollow(FOLLOW_equalityExpression_in_synpred265_AS3_ex12526);
        equalityExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred265_AS3_ex

    // $ANTLR start synpred270_AS3_ex
    public final void synpred270_AS3_ex_fragment() throws RecognitionException {   
        Token eq=null;

        // AS3_ex.g3:2925:32: (eq= ( EQ | NEQ | SAME | NSAME ) relationalExpression )
        // AS3_ex.g3:2925:32: eq= ( EQ | NEQ | SAME | NSAME ) relationalExpression
        {
        eq=(Token)input.LT(1);
        if ( (input.LA(1)>=EQ && input.LA(1)<=NSAME) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }

        pushFollow(FOLLOW_relationalExpression_in_synpred270_AS3_ex12659);
        relationalExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred270_AS3_ex

    // $ANTLR start synpred282_AS3_ex
    public final void synpred282_AS3_ex_fragment() throws RecognitionException {   
        Token g=null;
        Token assign=null;
        Token eq=null;

        // AS3_ex.g3:2948:7: ( (g= GT (assign= ASSIGN )? | eq= ( IN | LT | LTE | INSTANCEOF | IS | AS ) ) shiftExpression )
        // AS3_ex.g3:2948:7: (g= GT (assign= ASSIGN )? | eq= ( IN | LT | LTE | INSTANCEOF | IS | AS ) ) shiftExpression
        {
        // AS3_ex.g3:2948:7: (g= GT (assign= ASSIGN )? | eq= ( IN | LT | LTE | INSTANCEOF | IS | AS ) )
        int alt185=2;
        int LA185_0 = input.LA(1);

        if ( (LA185_0==GT) ) {
            alt185=1;
        }
        else if ( (LA185_0==AS||(LA185_0>=IN && LA185_0<=INSTANCEOF)||LA185_0==IS||LA185_0==LT||LA185_0==LTE) ) {
            alt185=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 185, 0, input);

            throw nvae;
        }
        switch (alt185) {
            case 1 :
                // AS3_ex.g3:2948:9: g= GT (assign= ASSIGN )?
                {
                g=(Token)match(input,GT,FOLLOW_GT_in_synpred282_AS3_ex12803); if (state.failed) return ;
                // AS3_ex.g3:2948:14: (assign= ASSIGN )?
                int alt184=2;
                int LA184_0 = input.LA(1);

                if ( (LA184_0==ASSIGN) ) {
                    alt184=1;
                }
                switch (alt184) {
                    case 1 :
                        // AS3_ex.g3:2948:15: assign= ASSIGN
                        {
                        assign=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred282_AS3_ex12808); if (state.failed) return ;

                        }
                        break;

                }


                }
                break;
            case 2 :
                // AS3_ex.g3:2956:14: eq= ( IN | LT | LTE | INSTANCEOF | IS | AS )
                {
                eq=(Token)input.LT(1);
                if ( input.LA(1)==AS||(input.LA(1)>=IN && input.LA(1)<=INSTANCEOF)||input.LA(1)==IS||input.LA(1)==LT||input.LA(1)==LTE ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }


                }
                break;

        }

        pushFollow(FOLLOW_shiftExpression_in_synpred282_AS3_ex12879);
        shiftExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred282_AS3_ex

    // $ANTLR start synpred293_AS3_ex
    public final void synpred293_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:3004:11: ( '>' '>' '>' )
        // AS3_ex.g3:3004:12: '>' '>' '>'
        {
        match(input,GT,FOLLOW_GT_in_synpred293_AS3_ex13190); if (state.failed) return ;
        match(input,GT,FOLLOW_GT_in_synpred293_AS3_ex13192); if (state.failed) return ;
        match(input,GT,FOLLOW_GT_in_synpred293_AS3_ex13194); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred293_AS3_ex

    // $ANTLR start synpred294_AS3_ex
    public final void synpred294_AS3_ex_fragment() throws RecognitionException {   
        Token t1=null;
        Token t2=null;
        Token t3=null;

        // AS3_ex.g3:2994:7: ( (t1= SHL | ( ( '>' '>' )=>t1= '>' t2= '>' {...}?) | ( ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}?) ) additiveExpression )
        // AS3_ex.g3:2994:7: (t1= SHL | ( ( '>' '>' )=>t1= '>' t2= '>' {...}?) | ( ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}?) ) additiveExpression
        {
        // AS3_ex.g3:2994:7: (t1= SHL | ( ( '>' '>' )=>t1= '>' t2= '>' {...}?) | ( ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}?) )
        int alt189=3;
        int LA189_0 = input.LA(1);

        if ( (LA189_0==SHL) ) {
            alt189=1;
        }
        else if ( (LA189_0==GT) ) {
            int LA189_2 = input.LA(2);

            if ( (LA189_2==GT) ) {
                int LA189_3 = input.LA(3);

                if ( (LA189_3==GT) && (synpred293_AS3_ex())) {
                    alt189=3;
                }
                else if ( ((LA189_3>=AS && LA189_3<=STATIC)||LA189_3==LCURLY||LA189_3==LPAREN||LA189_3==LBRACK||LA189_3==LT||(LA189_3>=PLUS && LA189_3<=STAR)||(LA189_3>=INC && LA189_3<=DEC)||(LA189_3>=NOT && LA189_3<=INV)||(LA189_3>=XML_AT && LA189_3<=XML_LS_STD)||(LA189_3>=SINGLE_QUOTE_LITERAL && LA189_3<=DOUBLE_QUOTE_LITERAL)||LA189_3==REGULAR_EXPR_LITERAL||LA189_3==HEX_NUMBER_LITERAL||LA189_3==DEC_NUMBER_LITERAL||LA189_3==IDENTIFIER||(LA189_3>=XML_COMMENT && LA189_3<=XML_PI)) ) {
                    alt189=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 189, 3, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 189, 2, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 189, 0, input);

            throw nvae;
        }
        switch (alt189) {
            case 1 :
                // AS3_ex.g3:2995:8: t1= SHL
                {
                t1=(Token)match(input,SHL,FOLLOW_SHL_in_synpred294_AS3_ex13114); if (state.failed) return ;

                }
                break;
            case 2 :
                // AS3_ex.g3:3000:11: ( ( '>' '>' )=>t1= '>' t2= '>' {...}?)
                {
                // AS3_ex.g3:3000:11: ( ( '>' '>' )=>t1= '>' t2= '>' {...}?)
                // AS3_ex.g3:3000:12: ( '>' '>' )=>t1= '>' t2= '>' {...}?
                {
                t1=(Token)match(input,GT,FOLLOW_GT_in_synpred294_AS3_ex13145); if (state.failed) return ;
                t2=(Token)match(input,GT,FOLLOW_GT_in_synpred294_AS3_ex13149); if (state.failed) return ;
                if ( !(( t1.getLine() == t2.getLine() && 
                          			t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() )) ) {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    throw new FailedPredicateException(input, "synpred294_AS3_ex", " $t1.getLine() == $t2.getLine() && \r\n          \t\t\t$t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() ");
                }

                }


                }
                break;
            case 3 :
                // AS3_ex.g3:3004:10: ( ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}?)
                {
                // AS3_ex.g3:3004:10: ( ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}?)
                // AS3_ex.g3:3004:11: ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}?
                {
                t1=(Token)match(input,GT,FOLLOW_GT_in_synpred294_AS3_ex13200); if (state.failed) return ;
                t2=(Token)match(input,GT,FOLLOW_GT_in_synpred294_AS3_ex13204); if (state.failed) return ;
                t3=(Token)match(input,GT,FOLLOW_GT_in_synpred294_AS3_ex13208); if (state.failed) return ;
                if ( !(( t1.getLine() == t2.getLine() && 
                          			t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() &&
                          			t2.getLine() == t3.getLine() && 
                          			t2.getCharPositionInLine() + 1 == t3.getCharPositionInLine() )) ) {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    throw new FailedPredicateException(input, "synpred294_AS3_ex", " $t1.getLine() == $t2.getLine() && \r\n          \t\t\t$t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() &&\r\n          \t\t\t$t2.getLine() == $t3.getLine() && \r\n          \t\t\t$t2.getCharPositionInLine() + 1 == $t3.getCharPositionInLine() ");
                }

                }


                }
                break;

        }

        pushFollow(FOLLOW_additiveExpression_in_synpred294_AS3_ex13255);
        additiveExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred294_AS3_ex

    // $ANTLR start synpred296_AS3_ex
    public final void synpred296_AS3_ex_fragment() throws RecognitionException {   
        Token op=null;

        // AS3_ex.g3:3023:36: (op= ( PLUS | SUB ) multiplicativeExpression )
        // AS3_ex.g3:3023:36: op= ( PLUS | SUB ) multiplicativeExpression
        {
        op=(Token)input.LT(1);
        if ( (input.LA(1)>=PLUS && input.LA(1)<=SUB) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }

        pushFollow(FOLLOW_multiplicativeExpression_in_synpred296_AS3_ex13321);
        multiplicativeExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred296_AS3_ex

    // $ANTLR start synpred299_AS3_ex
    public final void synpred299_AS3_ex_fragment() throws RecognitionException {   
        Token op=null;

        // AS3_ex.g3:3034:27: (op= ( STAR | DIV | MOD ) unaryExpression )
        // AS3_ex.g3:3034:27: op= ( STAR | DIV | MOD ) unaryExpression
        {
        op=(Token)input.LT(1);
        if ( (input.LA(1)>=STAR && input.LA(1)<=MOD) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }

        pushFollow(FOLLOW_unaryExpression_in_synpred299_AS3_ex13385);
        unaryExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred299_AS3_ex

    // $ANTLR start synpred300_AS3_ex
    public final void synpred300_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:3040:9: ( postfixExpression )
        // AS3_ex.g3:3040:9: postfixExpression
        {
        pushFollow(FOLLOW_postfixExpression_in_synpred300_AS3_ex13420);
        postfixExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred300_AS3_ex

    // $ANTLR start synpred302_AS3_ex
    public final void synpred302_AS3_ex_fragment() throws RecognitionException {   
        Token op=null;

        // AS3_ex.g3:3041:8: (op= ( NOT | INV ) unaryExpression )
        // AS3_ex.g3:3041:8: op= ( NOT | INV ) unaryExpression
        {
        op=(Token)input.LT(1);
        if ( (input.LA(1)>=NOT && input.LA(1)<=INV) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }

        pushFollow(FOLLOW_unaryExpression_in_synpred302_AS3_ex13441);
        unaryExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred302_AS3_ex

    // $ANTLR start synpred311_AS3_ex
    public final void synpred311_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:3054:32: ( postfixOp )
        // AS3_ex.g3:3054:32: postfixOp
        {
        pushFollow(FOLLOW_postfixOp_in_synpred311_AS3_ex13543);
        postfixOp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred311_AS3_ex

    // $ANTLR start synpred315_AS3_ex
    public final void synpred315_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:3081:7: ( arguments )
        // AS3_ex.g3:3081:7: arguments
        {
        pushFollow(FOLLOW_arguments_in_synpred315_AS3_ex13660);
        arguments();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred315_AS3_ex

    // $ANTLR start synpred316_AS3_ex
    public final void synpred316_AS3_ex_fragment() throws RecognitionException {   
        Token L=null;
        Token R=null;

        // AS3_ex.g3:3082:9: (L= LBRACK expression R= RBRACK )
        // AS3_ex.g3:3082:9: L= LBRACK expression R= RBRACK
        {
        L=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_synpred316_AS3_ex13672); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred316_AS3_ex13676);
        expression();

        state._fsp--;
        if (state.failed) return ;
        R=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_synpred316_AS3_ex13680); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred316_AS3_ex

    // $ANTLR start synpred317_AS3_ex
    public final void synpred317_AS3_ex_fragment() throws RecognitionException {   
        Token E=null;

        // AS3_ex.g3:3085:9: (E= XML_ELLIPSIS eitherIdentifier )
        // AS3_ex.g3:3085:9: E= XML_ELLIPSIS eitherIdentifier
        {
        E=(Token)match(input,XML_ELLIPSIS,FOLLOW_XML_ELLIPSIS_in_synpred317_AS3_ex13696); if (state.failed) return ;
        pushFollow(FOLLOW_eitherIdentifier_in_synpred317_AS3_ex13699);
        eitherIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred317_AS3_ex

    // $ANTLR start synpred319_AS3_ex
    public final void synpred319_AS3_ex_fragment() throws RecognitionException {   
        Token D=null;

        // AS3_ex.g3:3086:9: (D= DOT ( eitherIdentifier | parExpression ) )
        // AS3_ex.g3:3086:9: D= DOT ( eitherIdentifier | parExpression )
        {
        D=(Token)match(input,DOT,FOLLOW_DOT_in_synpred319_AS3_ex13713); if (state.failed) return ;
        // AS3_ex.g3:3086:15: ( eitherIdentifier | parExpression )
        int alt190=2;
        int LA190_0 = input.LA(1);

        if ( ((LA190_0>=AS && LA190_0<=STATIC)||LA190_0==STAR||LA190_0==XML_AT||LA190_0==IDENTIFIER) ) {
            alt190=1;
        }
        else if ( (LA190_0==LPAREN) ) {
            alt190=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 190, 0, input);

            throw nvae;
        }
        switch (alt190) {
            case 1 :
                // AS3_ex.g3:3086:16: eitherIdentifier
                {
                pushFollow(FOLLOW_eitherIdentifier_in_synpred319_AS3_ex13718);
                eitherIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // AS3_ex.g3:3086:94: parExpression
                {
                if ( state.backtracking==0 ) {
                  wrapEmit(D, ASPrettyPrinter.Break_Other_Connectors_code);
                }
                pushFollow(FOLLOW_parExpression_in_synpred319_AS3_ex13724);
                parExpression();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred319_AS3_ex

    // $ANTLR start synpred320_AS3_ex
    public final void synpred320_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:3087:9: ( typePostfixSyntax )
        // AS3_ex.g3:3087:9: typePostfixSyntax
        {
        pushFollow(FOLLOW_typePostfixSyntax_in_synpred320_AS3_ex13737);
        typePostfixSyntax();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred320_AS3_ex

    // $ANTLR start synpred321_AS3_ex
    public final void synpred321_AS3_ex_fragment() throws RecognitionException {   
        Token op=null;

        // AS3_ex.g3:3088:9: (op= XML_NS_OP expression )
        // AS3_ex.g3:3088:9: op= XML_NS_OP expression
        {
        op=(Token)match(input,XML_NS_OP,FOLLOW_XML_NS_OP_in_synpred321_AS3_ex13749); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred321_AS3_ex13753);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred321_AS3_ex

    // $ANTLR start synpred322_AS3_ex
    public final void synpred322_AS3_ex_fragment() throws RecognitionException {   
        Token I=null;

        // AS3_ex.g3:3094:4: (I= IDENTIFIER )
        // AS3_ex.g3:3094:4: I= IDENTIFIER
        {
        I=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred322_AS3_ex13790); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred322_AS3_ex

    // $ANTLR start synpred323_AS3_ex
    public final void synpred323_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:3095:5: ( xmlPropertyIdentifier )
        // AS3_ex.g3:3095:5: xmlPropertyIdentifier
        {
        pushFollow(FOLLOW_xmlPropertyIdentifier_in_synpred323_AS3_ex13800);
        xmlPropertyIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred323_AS3_ex

    // $ANTLR start synpred385_AS3_ex
    public final void synpred385_AS3_ex_fragment() throws RecognitionException {   
        Token T=null;

        // AS3_ex.g3:3226:9: (T= THIS )
        // AS3_ex.g3:3226:9: T= THIS
        {
        T=(Token)match(input,THIS,FOLLOW_THIS_in_synpred385_AS3_ex14801); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred385_AS3_ex

    // $ANTLR start synpred386_AS3_ex
    public final void synpred386_AS3_ex_fragment() throws RecognitionException {   
        Token S=null;

        // AS3_ex.g3:3227:9: (S= SUPER )
        // AS3_ex.g3:3227:9: S= SUPER
        {
        S=(Token)match(input,SUPER,FOLLOW_SUPER_in_synpred386_AS3_ex14815); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred386_AS3_ex

    // $ANTLR start synpred387_AS3_ex
    public final void synpred387_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:3228:9: ( literal )
        // AS3_ex.g3:3228:9: literal
        {
        pushFollow(FOLLOW_literal_in_synpred387_AS3_ex14827);
        literal();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred387_AS3_ex

    // $ANTLR start synpred390_AS3_ex
    public final void synpred390_AS3_ex_fragment() throws RecognitionException {   
        Token x=null;

        // AS3_ex.g3:3231:10: ( identifierLiteral x= XML_NS_OP )
        // AS3_ex.g3:3231:10: identifierLiteral x= XML_NS_OP
        {
        pushFollow(FOLLOW_identifierLiteral_in_synpred390_AS3_ex14863);
        identifierLiteral();

        state._fsp--;
        if (state.failed) return ;
        x=(Token)match(input,XML_NS_OP,FOLLOW_XML_NS_OP_in_synpred390_AS3_ex14867); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred390_AS3_ex

    // $ANTLR start synpred391_AS3_ex
    public final void synpred391_AS3_ex_fragment() throws RecognitionException {   
        Token x=null;

        // AS3_ex.g3:3231:9: ( ( identifierLiteral x= XML_NS_OP )? identifierLiteral )
        // AS3_ex.g3:3231:9: ( identifierLiteral x= XML_NS_OP )? identifierLiteral
        {
        // AS3_ex.g3:3231:9: ( identifierLiteral x= XML_NS_OP )?
        int alt192=2;
        int LA192_0 = input.LA(1);

        if ( (LA192_0==IDENTIFIER) ) {
            int LA192_1 = input.LA(2);

            if ( (LA192_1==XML_NS_OP) ) {
                alt192=1;
            }
        }
        else if ( (LA192_0==NATIVE||LA192_0==TO||(LA192_0>=EACH && LA192_0<=NAMESPACE)||(LA192_0>=DYNAMIC && LA192_0<=STATIC)) ) {
            int LA192_2 = input.LA(2);

            if ( (LA192_2==XML_NS_OP) ) {
                alt192=1;
            }
        }
        switch (alt192) {
            case 1 :
                // AS3_ex.g3:3231:10: identifierLiteral x= XML_NS_OP
                {
                pushFollow(FOLLOW_identifierLiteral_in_synpred391_AS3_ex14863);
                identifierLiteral();

                state._fsp--;
                if (state.failed) return ;
                x=(Token)match(input,XML_NS_OP,FOLLOW_XML_NS_OP_in_synpred391_AS3_ex14867); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_identifierLiteral_in_synpred391_AS3_ex14873);
        identifierLiteral();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred391_AS3_ex

    // $ANTLR start synpred392_AS3_ex
    public final void synpred392_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:3232:9: ( xmlPrimaryExpression )
        // AS3_ex.g3:3232:9: xmlPrimaryExpression
        {
        pushFollow(FOLLOW_xmlPrimaryExpression_in_synpred392_AS3_ex14884);
        xmlPrimaryExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred392_AS3_ex

    // $ANTLR start synpred394_AS3_ex
    public final void synpred394_AS3_ex_fragment() throws RecognitionException {   
        // AS3_ex.g3:3234:49: ( arrayLiteral )
        // AS3_ex.g3:3234:49: arrayLiteral
        {
        pushFollow(FOLLOW_arrayLiteral_in_synpred394_AS3_ex14920);
        arrayLiteral();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred394_AS3_ex

    // Delegated rules

    public final boolean synpred139_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred139_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred391_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred391_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred201_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred201_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred322_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred322_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred189_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred189_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred302_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred302_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred296_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred296_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred185_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred185_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred257_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred257_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred144_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred144_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred99_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred99_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred138_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred138_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred108_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred108_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred236_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred236_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred194_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred194_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred198_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred198_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred205_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred205_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred317_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred317_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred190_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred190_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred183_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred183_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred321_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred321_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred72_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred72_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred191_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred191_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred207_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred207_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred96_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred96_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred98_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred98_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred167_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred167_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred142_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred142_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred124_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred124_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred196_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred196_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred270_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred270_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred152_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred152_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred320_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred320_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred135_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred135_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred107_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred107_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred220_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred220_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred299_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred299_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred259_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred259_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred197_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred197_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred263_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred263_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred394_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred394_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred195_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred195_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred392_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred392_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred300_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred300_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred182_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred182_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred239_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred239_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred238_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred238_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred140_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred140_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred255_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred255_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred187_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred187_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred184_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred184_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred193_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred193_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred74_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred74_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred221_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred221_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred143_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred143_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred68_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred68_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred385_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred385_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred315_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred315_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred179_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred179_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred180_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred180_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred97_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred97_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred109_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred109_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred105_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred105_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred316_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred316_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred282_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred282_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred169_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred169_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred106_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred106_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred265_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred265_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred73_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred73_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred323_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred323_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred319_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred319_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred261_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred261_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred390_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred390_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred137_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred137_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred181_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred181_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred311_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred311_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred386_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred386_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred209_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred209_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred186_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred186_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred192_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred192_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred104_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred104_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred294_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred294_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred387_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred387_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred123_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred123_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred293_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred293_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred188_AS3_ex() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred188_AS3_ex_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA8 dfa8 = new DFA8(this);
    protected DFA34 dfa34 = new DFA34(this);
    protected DFA37 dfa37 = new DFA37(this);
    protected DFA49 dfa49 = new DFA49(this);
    protected DFA59 dfa59 = new DFA59(this);
    protected DFA61 dfa61 = new DFA61(this);
    protected DFA80 dfa80 = new DFA80(this);
    protected DFA83 dfa83 = new DFA83(this);
    protected DFA93 dfa93 = new DFA93(this);
    protected DFA121 dfa121 = new DFA121(this);
    protected DFA122 dfa122 = new DFA122(this);
    protected DFA123 dfa123 = new DFA123(this);
    protected DFA148 dfa148 = new DFA148(this);
    protected DFA152 dfa152 = new DFA152(this);
    protected DFA162 dfa162 = new DFA162(this);
    protected DFA161 dfa161 = new DFA161(this);
    static final String DFA8_eotS =
        "\133\uffff";
    static final String DFA8_eofS =
        "\1\1\132\uffff";
    static final String DFA8_minS =
        "\1\4\3\uffff\1\0\21\uffff\1\0\77\uffff\1\0\4\uffff";
    static final String DFA8_maxS =
        "\1\u0092\3\uffff\1\0\21\uffff\1\0\77\uffff\1\0\4\uffff";
    static final String DFA8_acceptS =
        "\1\uffff\1\2\130\uffff\1\1";
    static final String DFA8_specialS =
        "\4\uffff\1\0\21\uffff\1\1\77\uffff\1\2\4\uffff}>";
    static final String[] DFA8_transitionS = {
            "\75\1\1\4\4\1\1\uffff\5\1\1\26\6\1\2\uffff\10\1\1\126\6\1\2"+
            "\uffff\5\1\1\uffff\2\1\1\uffff\3\1\16\uffff\2\1\2\uffff\1\1"+
            "\4\uffff\1\1\2\uffff\1\1\1\uffff\1\1\1\uffff\3\1",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_eotS);
    static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_eofS);
    static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_minS);
    static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_maxS);
    static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_acceptS);
    static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_specialS);
    static final short[][] DFA8_transition;

    static {
        int numStates = DFA8_transitionS.length;
        DFA8_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA8_transition[i] = DFA.unpackEncodedString(DFA8_transitionS[i]);
        }
    }

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = DFA8_eot;
            this.eof = DFA8_eof;
            this.min = DFA8_min;
            this.max = DFA8_max;
            this.accept = DFA8_accept;
            this.special = DFA8_special;
            this.transition = DFA8_transition;
        }
        public String getDescription() {
            return "()* loopback of 1252:80: ({...}? => (s= SUB | d= DOT | c= COLON ) {...}? => (I2= IDENTIFIER | allKeywords ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA8_4 = input.LA(1);

                         
                        int index8_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred9_AS3_ex()&&(!promoteWhitespace()))) ) {s = 90;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA8_22 = input.LA(1);

                         
                        int index8_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred9_AS3_ex()&&(!promoteWhitespace()))) ) {s = 90;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_22);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA8_86 = input.LA(1);

                         
                        int index8_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred9_AS3_ex()&&(!promoteWhitespace()))) ) {s = 90;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index8_86);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 8, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA34_eotS =
        "\71\uffff";
    static final String DFA34_eofS =
        "\1\1\70\uffff";
    static final String DFA34_minS =
        "\1\4\2\uffff\10\0\1\uffff\5\0\50\uffff";
    static final String DFA34_maxS =
        "\1\u0092\2\uffff\10\0\1\uffff\5\0\50\uffff";
    static final String DFA34_acceptS =
        "\1\uffff\1\7\11\uffff\1\4\50\uffff\1\1\1\2\1\3\1\6\1\5";
    static final String DFA34_specialS =
        "\3\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\uffff\1\10\1\11\1\12"+
        "\1\13\1\14\50\uffff}>";
    static final String[] DFA34_transitionS = {
            "\5\13\1\10\1\13\1\20\7\13\1\12\2\13\1\17\3\13\1\6\1\13\1\4"+
            "\3\13\3\6\5\13\1\11\3\13\1\16\1\7\3\13\3\11\1\5\1\15\4\4\2\13"+
            "\1\1\1\13\1\uffff\1\14\3\uffff\1\13\7\uffff\3\13\2\uffff\2\13"+
            "\6\uffff\2\13\26\uffff\2\13\16\uffff\2\13\2\uffff\1\13\4\uffff"+
            "\1\13\2\uffff\1\13\1\uffff\1\3\1\uffff\3\13",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA34_eot = DFA.unpackEncodedString(DFA34_eotS);
    static final short[] DFA34_eof = DFA.unpackEncodedString(DFA34_eofS);
    static final char[] DFA34_min = DFA.unpackEncodedStringToUnsignedChars(DFA34_minS);
    static final char[] DFA34_max = DFA.unpackEncodedStringToUnsignedChars(DFA34_maxS);
    static final short[] DFA34_accept = DFA.unpackEncodedString(DFA34_acceptS);
    static final short[] DFA34_special = DFA.unpackEncodedString(DFA34_specialS);
    static final short[][] DFA34_transition;

    static {
        int numStates = DFA34_transitionS.length;
        DFA34_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA34_transition[i] = DFA.unpackEncodedString(DFA34_transitionS[i]);
        }
    }

    class DFA34 extends DFA {

        public DFA34(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 34;
            this.eot = DFA34_eot;
            this.eof = DFA34_eof;
            this.min = DFA34_min;
            this.max = DFA34_max;
            this.accept = DFA34_accept;
            this.special = DFA34_special;
            this.transition = DFA34_transition;
        }
        public String getDescription() {
            return "()* loopback of 1553:3: ( conditionalCompilerOption l= LCURLY mxmlEmbedded r= RCURLY | propertyDeclaration | functionDeclaration | statement | directive | interfaceFunctionDeclaration )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA34_3 = input.LA(1);

                         
                        int index34_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_AS3_ex()) ) {s = 52;}

                        else if ( (synpred97_AS3_ex()) ) {s = 53;}

                        else if ( (synpred98_AS3_ex()) ) {s = 54;}

                        else if ( (synpred99_AS3_ex()) ) {s = 11;}

                        else if ( (synpred101_AS3_ex()) ) {s = 55;}

                         
                        input.seek(index34_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA34_4 = input.LA(1);

                         
                        int index34_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_AS3_ex()) ) {s = 52;}

                        else if ( (synpred97_AS3_ex()) ) {s = 53;}

                        else if ( (synpred98_AS3_ex()) ) {s = 54;}

                        else if ( (synpred99_AS3_ex()) ) {s = 11;}

                        else if ( (synpred101_AS3_ex()) ) {s = 55;}

                         
                        input.seek(index34_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA34_5 = input.LA(1);

                         
                        int index34_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_AS3_ex()) ) {s = 52;}

                        else if ( (synpred97_AS3_ex()) ) {s = 53;}

                        else if ( (synpred98_AS3_ex()) ) {s = 54;}

                        else if ( (synpred99_AS3_ex()) ) {s = 11;}

                        else if ( (synpred101_AS3_ex()) ) {s = 55;}

                         
                        input.seek(index34_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA34_6 = input.LA(1);

                         
                        int index34_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_AS3_ex()) ) {s = 53;}

                        else if ( (synpred98_AS3_ex()) ) {s = 54;}

                        else if ( (synpred99_AS3_ex()) ) {s = 11;}

                        else if ( (synpred101_AS3_ex()) ) {s = 55;}

                         
                        input.seek(index34_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA34_7 = input.LA(1);

                         
                        int index34_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_AS3_ex()) ) {s = 53;}

                        else if ( (synpred99_AS3_ex()) ) {s = 11;}

                         
                        input.seek(index34_7);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA34_8 = input.LA(1);

                         
                        int index34_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_AS3_ex()) ) {s = 53;}

                        else if ( (synpred99_AS3_ex()) ) {s = 11;}

                         
                        input.seek(index34_8);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA34_9 = input.LA(1);

                         
                        int index34_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_AS3_ex()) ) {s = 52;}

                        else if ( (synpred97_AS3_ex()) ) {s = 53;}

                        else if ( (synpred98_AS3_ex()) ) {s = 54;}

                        else if ( (synpred99_AS3_ex()) ) {s = 11;}

                        else if ( (synpred101_AS3_ex()) ) {s = 55;}

                         
                        input.seek(index34_9);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA34_10 = input.LA(1);

                         
                        int index34_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_AS3_ex()) ) {s = 54;}

                        else if ( (synpred99_AS3_ex()) ) {s = 11;}

                        else if ( (synpred101_AS3_ex()) ) {s = 55;}

                         
                        input.seek(index34_10);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA34_12 = input.LA(1);

                         
                        int index34_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_AS3_ex()) ) {s = 11;}

                        else if ( (synpred100_AS3_ex()) ) {s = 56;}

                         
                        input.seek(index34_12);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA34_13 = input.LA(1);

                         
                        int index34_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_AS3_ex()) ) {s = 11;}

                        else if ( (synpred100_AS3_ex()) ) {s = 56;}

                         
                        input.seek(index34_13);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA34_14 = input.LA(1);

                         
                        int index34_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_AS3_ex()) ) {s = 11;}

                        else if ( (synpred100_AS3_ex()) ) {s = 56;}

                         
                        input.seek(index34_14);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA34_15 = input.LA(1);

                         
                        int index34_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_AS3_ex()) ) {s = 11;}

                        else if ( (synpred100_AS3_ex()) ) {s = 56;}

                         
                        input.seek(index34_15);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA34_16 = input.LA(1);

                         
                        int index34_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_AS3_ex()) ) {s = 11;}

                        else if ( (synpred100_AS3_ex()) ) {s = 56;}

                         
                        input.seek(index34_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 34, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA37_eotS =
        "\72\uffff";
    static final String DFA37_eofS =
        "\72\uffff";
    static final String DFA37_minS =
        "\1\4\12\0\1\uffff\5\0\51\uffff";
    static final String DFA37_maxS =
        "\1\u0092\12\0\1\uffff\5\0\51\uffff";
    static final String DFA37_acceptS =
        "\13\uffff\1\6\50\uffff\1\1\1\2\1\3\1\4\1\5\1\7";
    static final String DFA37_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\uffff\1\12"+
        "\1\13\1\14\1\15\1\16\51\uffff}>";
    static final String[] DFA37_transitionS = {
            "\4\13\1\6\1\10\1\13\1\20\7\13\1\12\2\13\1\17\2\13\1\5\1\4\1"+
            "\13\1\2\3\13\3\4\5\13\1\11\3\13\1\16\1\7\3\13\3\11\1\3\1\15"+
            "\4\2\2\13\1\uffff\1\13\1\uffff\1\14\3\uffff\1\13\7\uffff\3\13"+
            "\2\uffff\2\13\6\uffff\2\13\26\uffff\2\13\16\uffff\2\13\2\uffff"+
            "\1\13\4\uffff\1\13\2\uffff\1\13\1\uffff\1\1\1\uffff\3\13",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA37_eot = DFA.unpackEncodedString(DFA37_eotS);
    static final short[] DFA37_eof = DFA.unpackEncodedString(DFA37_eofS);
    static final char[] DFA37_min = DFA.unpackEncodedStringToUnsignedChars(DFA37_minS);
    static final char[] DFA37_max = DFA.unpackEncodedStringToUnsignedChars(DFA37_maxS);
    static final short[] DFA37_accept = DFA.unpackEncodedString(DFA37_acceptS);
    static final short[] DFA37_special = DFA.unpackEncodedString(DFA37_specialS);
    static final short[][] DFA37_transition;

    static {
        int numStates = DFA37_transitionS.length;
        DFA37_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA37_transition[i] = DFA.unpackEncodedString(DFA37_transitionS[i]);
        }
    }

    class DFA37 extends DFA {

        public DFA37(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 37;
            this.eot = DFA37_eot;
            this.eof = DFA37_eof;
            this.min = DFA37_min;
            this.max = DFA37_max;
            this.accept = DFA37_accept;
            this.special = DFA37_special;
            this.transition = DFA37_transition;
        }
        public String getDescription() {
            return "1568:1: packageElement : ( conditionalCompilerOption l= LCURLY ( packageElement )* r= RCURLY | classOrInterfaceDecl | propertyDeclaration | functionDeclaration | interfaceFunctionDeclaration | statement | directive );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA37_1 = input.LA(1);

                         
                        int index37_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred104_AS3_ex()) ) {s = 52;}

                        else if ( (synpred105_AS3_ex()) ) {s = 53;}

                        else if ( (synpred106_AS3_ex()) ) {s = 54;}

                        else if ( (synpred107_AS3_ex()) ) {s = 55;}

                        else if ( (synpred108_AS3_ex()) ) {s = 56;}

                        else if ( (synpred109_AS3_ex()) ) {s = 11;}

                         
                        input.seek(index37_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA37_2 = input.LA(1);

                         
                        int index37_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred104_AS3_ex()) ) {s = 52;}

                        else if ( (synpred105_AS3_ex()) ) {s = 53;}

                        else if ( (synpred106_AS3_ex()) ) {s = 54;}

                        else if ( (synpred107_AS3_ex()) ) {s = 55;}

                        else if ( (synpred108_AS3_ex()) ) {s = 56;}

                        else if ( (synpred109_AS3_ex()) ) {s = 11;}

                         
                        input.seek(index37_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA37_3 = input.LA(1);

                         
                        int index37_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred104_AS3_ex()) ) {s = 52;}

                        else if ( (synpred105_AS3_ex()) ) {s = 53;}

                        else if ( (synpred106_AS3_ex()) ) {s = 54;}

                        else if ( (synpred107_AS3_ex()) ) {s = 55;}

                        else if ( (synpred108_AS3_ex()) ) {s = 56;}

                        else if ( (synpred109_AS3_ex()) ) {s = 11;}

                         
                        input.seek(index37_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA37_4 = input.LA(1);

                         
                        int index37_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_AS3_ex()) ) {s = 53;}

                        else if ( (synpred106_AS3_ex()) ) {s = 54;}

                        else if ( (synpred107_AS3_ex()) ) {s = 55;}

                        else if ( (synpred108_AS3_ex()) ) {s = 56;}

                        else if ( (synpred109_AS3_ex()) ) {s = 11;}

                         
                        input.seek(index37_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA37_5 = input.LA(1);

                         
                        int index37_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_AS3_ex()) ) {s = 53;}

                        else if ( (synpred109_AS3_ex()) ) {s = 11;}

                         
                        input.seek(index37_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA37_6 = input.LA(1);

                         
                        int index37_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_AS3_ex()) ) {s = 53;}

                        else if ( (synpred109_AS3_ex()) ) {s = 11;}

                         
                        input.seek(index37_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA37_7 = input.LA(1);

                         
                        int index37_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_AS3_ex()) ) {s = 54;}

                        else if ( (synpred109_AS3_ex()) ) {s = 11;}

                         
                        input.seek(index37_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA37_8 = input.LA(1);

                         
                        int index37_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_AS3_ex()) ) {s = 54;}

                        else if ( (synpred109_AS3_ex()) ) {s = 11;}

                         
                        input.seek(index37_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA37_9 = input.LA(1);

                         
                        int index37_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred104_AS3_ex()) ) {s = 52;}

                        else if ( (synpred105_AS3_ex()) ) {s = 53;}

                        else if ( (synpred106_AS3_ex()) ) {s = 54;}

                        else if ( (synpred107_AS3_ex()) ) {s = 55;}

                        else if ( (synpred108_AS3_ex()) ) {s = 56;}

                        else if ( (synpred109_AS3_ex()) ) {s = 11;}

                         
                        input.seek(index37_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA37_10 = input.LA(1);

                         
                        int index37_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred107_AS3_ex()) ) {s = 55;}

                        else if ( (synpred108_AS3_ex()) ) {s = 56;}

                        else if ( (synpred109_AS3_ex()) ) {s = 11;}

                         
                        input.seek(index37_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA37_12 = input.LA(1);

                         
                        int index37_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_AS3_ex()) ) {s = 11;}

                        else if ( (true) ) {s = 57;}

                         
                        input.seek(index37_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA37_13 = input.LA(1);

                         
                        int index37_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_AS3_ex()) ) {s = 11;}

                        else if ( (true) ) {s = 57;}

                         
                        input.seek(index37_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA37_14 = input.LA(1);

                         
                        int index37_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_AS3_ex()) ) {s = 11;}

                        else if ( (true) ) {s = 57;}

                         
                        input.seek(index37_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA37_15 = input.LA(1);

                         
                        int index37_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_AS3_ex()) ) {s = 11;}

                        else if ( (true) ) {s = 57;}

                         
                        input.seek(index37_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA37_16 = input.LA(1);

                         
                        int index37_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_AS3_ex()) ) {s = 11;}

                        else if ( (true) ) {s = 57;}

                         
                        input.seek(index37_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 37, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA49_eotS =
        "\15\uffff";
    static final String DFA49_eofS =
        "\15\uffff";
    static final String DFA49_minS =
        "\1\4\5\0\7\uffff";
    static final String DFA49_maxS =
        "\1\u008e\5\0\7\uffff";
    static final String DFA49_acceptS =
        "\6\uffff\1\2\5\uffff\1\1";
    static final String DFA49_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\7\uffff}>";
    static final String[] DFA49_transitionS = {
            "\30\3\1\4\13\3\1\4\10\3\4\4\1\3\4\4\21\uffff\2\6\1\5\42\uffff"+
            "\1\2\17\uffff\2\6\7\uffff\1\6\2\uffff\1\6\1\uffff\1\1",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA49_eot = DFA.unpackEncodedString(DFA49_eotS);
    static final short[] DFA49_eof = DFA.unpackEncodedString(DFA49_eofS);
    static final char[] DFA49_min = DFA.unpackEncodedStringToUnsignedChars(DFA49_minS);
    static final char[] DFA49_max = DFA.unpackEncodedStringToUnsignedChars(DFA49_maxS);
    static final short[] DFA49_accept = DFA.unpackEncodedString(DFA49_acceptS);
    static final short[] DFA49_special = DFA.unpackEncodedString(DFA49_specialS);
    static final short[][] DFA49_transition;

    static {
        int numStates = DFA49_transitionS.length;
        DFA49_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA49_transition[i] = DFA.unpackEncodedString(DFA49_transitionS[i]);
        }
    }

    class DFA49 extends DFA {

        public DFA49(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 49;
            this.eot = DFA49_eot;
            this.eof = DFA49_eof;
            this.min = DFA49_min;
            this.max = DFA49_max;
            this.accept = DFA49_accept;
            this.special = DFA49_special;
            this.transition = DFA49_transition;
        }
        public String getDescription() {
            return "1697:5: ( eitherIdentifier E= ASSIGN )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA49_1 = input.LA(1);

                         
                        int index49_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_AS3_ex()) ) {s = 12;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index49_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA49_2 = input.LA(1);

                         
                        int index49_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_AS3_ex()) ) {s = 12;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index49_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA49_3 = input.LA(1);

                         
                        int index49_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_AS3_ex()) ) {s = 12;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index49_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA49_4 = input.LA(1);

                         
                        int index49_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_AS3_ex()) ) {s = 12;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index49_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA49_5 = input.LA(1);

                         
                        int index49_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_AS3_ex()) ) {s = 12;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index49_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 49, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA59_eotS =
        "\66\uffff";
    static final String DFA59_eofS =
        "\66\uffff";
    static final String DFA59_minS =
        "\1\4\10\0\1\uffff\5\0\47\uffff";
    static final String DFA59_maxS =
        "\1\u0092\10\0\1\uffff\5\0\47\uffff";
    static final String DFA59_acceptS =
        "\11\uffff\1\4\50\uffff\1\1\1\2\1\3\1\5";
    static final String DFA59_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\uffff\1\10\1\11\1\12"+
        "\1\13\1\14\47\uffff}>";
    static final String[] DFA59_transitionS = {
            "\5\11\1\6\1\11\1\16\7\11\1\10\2\11\1\15\3\11\1\4\1\11\1\2\3"+
            "\11\3\4\5\11\1\7\3\11\1\14\1\5\3\11\3\7\1\3\1\13\4\2\2\11\1"+
            "\uffff\1\11\1\uffff\1\12\3\uffff\1\11\7\uffff\3\11\2\uffff\2"+
            "\11\6\uffff\2\11\26\uffff\2\11\16\uffff\2\11\2\uffff\1\11\4"+
            "\uffff\1\11\2\uffff\1\11\1\uffff\1\1\1\uffff\3\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA59_eot = DFA.unpackEncodedString(DFA59_eotS);
    static final short[] DFA59_eof = DFA.unpackEncodedString(DFA59_eofS);
    static final char[] DFA59_min = DFA.unpackEncodedStringToUnsignedChars(DFA59_minS);
    static final char[] DFA59_max = DFA.unpackEncodedStringToUnsignedChars(DFA59_maxS);
    static final short[] DFA59_accept = DFA.unpackEncodedString(DFA59_acceptS);
    static final short[] DFA59_special = DFA.unpackEncodedString(DFA59_specialS);
    static final short[][] DFA59_transition;

    static {
        int numStates = DFA59_transitionS.length;
        DFA59_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA59_transition[i] = DFA.unpackEncodedString(DFA59_transitionS[i]);
        }
    }

    class DFA59 extends DFA {

        public DFA59(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 59;
            this.eot = DFA59_eot;
            this.eof = DFA59_eof;
            this.min = DFA59_min;
            this.max = DFA59_max;
            this.accept = DFA59_accept;
            this.special = DFA59_special;
            this.transition = DFA59_transition;
        }
        public String getDescription() {
            return "1779:1: classBodyElement : ( ( conditionalCompilerOption LCURLY )=> conditionalCompilerOption l= LCURLY ( classBodyElement )* r= RCURLY | propertyDeclaration | functionDeclaration | statement | directive );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA59_1 = input.LA(1);

                         
                        int index59_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_AS3_ex()) ) {s = 50;}

                        else if ( (synpred137_AS3_ex()) ) {s = 51;}

                        else if ( (synpred138_AS3_ex()) ) {s = 52;}

                        else if ( (synpred139_AS3_ex()) ) {s = 9;}

                         
                        input.seek(index59_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA59_2 = input.LA(1);

                         
                        int index59_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_AS3_ex()) ) {s = 50;}

                        else if ( (synpred137_AS3_ex()) ) {s = 51;}

                        else if ( (synpred138_AS3_ex()) ) {s = 52;}

                        else if ( (synpred139_AS3_ex()) ) {s = 9;}

                         
                        input.seek(index59_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA59_3 = input.LA(1);

                         
                        int index59_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_AS3_ex()) ) {s = 50;}

                        else if ( (synpred137_AS3_ex()) ) {s = 51;}

                        else if ( (synpred138_AS3_ex()) ) {s = 52;}

                        else if ( (synpred139_AS3_ex()) ) {s = 9;}

                         
                        input.seek(index59_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA59_4 = input.LA(1);

                         
                        int index59_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred137_AS3_ex()) ) {s = 51;}

                        else if ( (synpred138_AS3_ex()) ) {s = 52;}

                        else if ( (synpred139_AS3_ex()) ) {s = 9;}

                         
                        input.seek(index59_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA59_5 = input.LA(1);

                         
                        int index59_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred137_AS3_ex()) ) {s = 51;}

                        else if ( (synpred139_AS3_ex()) ) {s = 9;}

                         
                        input.seek(index59_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA59_6 = input.LA(1);

                         
                        int index59_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred137_AS3_ex()) ) {s = 51;}

                        else if ( (synpred139_AS3_ex()) ) {s = 9;}

                         
                        input.seek(index59_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA59_7 = input.LA(1);

                         
                        int index59_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_AS3_ex()) ) {s = 50;}

                        else if ( (synpred137_AS3_ex()) ) {s = 51;}

                        else if ( (synpred138_AS3_ex()) ) {s = 52;}

                        else if ( (synpred139_AS3_ex()) ) {s = 9;}

                         
                        input.seek(index59_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA59_8 = input.LA(1);

                         
                        int index59_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_AS3_ex()) ) {s = 52;}

                        else if ( (synpred139_AS3_ex()) ) {s = 9;}

                         
                        input.seek(index59_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA59_10 = input.LA(1);

                         
                        int index59_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_AS3_ex()) ) {s = 9;}

                        else if ( (true) ) {s = 53;}

                         
                        input.seek(index59_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA59_11 = input.LA(1);

                         
                        int index59_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_AS3_ex()) ) {s = 9;}

                        else if ( (true) ) {s = 53;}

                         
                        input.seek(index59_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA59_12 = input.LA(1);

                         
                        int index59_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_AS3_ex()) ) {s = 9;}

                        else if ( (true) ) {s = 53;}

                         
                        input.seek(index59_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA59_13 = input.LA(1);

                         
                        int index59_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_AS3_ex()) ) {s = 9;}

                        else if ( (true) ) {s = 53;}

                         
                        input.seek(index59_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA59_14 = input.LA(1);

                         
                        int index59_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_AS3_ex()) ) {s = 9;}

                        else if ( (true) ) {s = 53;}

                         
                        input.seek(index59_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 59, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA61_eotS =
        "\66\uffff";
    static final String DFA61_eofS =
        "\66\uffff";
    static final String DFA61_minS =
        "\1\4\10\0\1\uffff\5\0\47\uffff";
    static final String DFA61_maxS =
        "\1\u0092\10\0\1\uffff\5\0\47\uffff";
    static final String DFA61_acceptS =
        "\11\uffff\1\4\50\uffff\1\1\1\2\1\3\1\5";
    static final String DFA61_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\uffff\1\10\1\11\1\12"+
        "\1\13\1\14\47\uffff}>";
    static final String[] DFA61_transitionS = {
            "\5\11\1\6\1\11\1\16\7\11\1\10\2\11\1\15\3\11\1\4\1\11\1\2\3"+
            "\11\3\4\5\11\1\7\3\11\1\14\1\5\3\11\3\7\1\3\1\13\4\2\2\11\1"+
            "\uffff\1\11\1\uffff\1\12\3\uffff\1\11\7\uffff\3\11\2\uffff\2"+
            "\11\6\uffff\2\11\26\uffff\2\11\16\uffff\2\11\2\uffff\1\11\4"+
            "\uffff\1\11\2\uffff\1\11\1\uffff\1\1\1\uffff\3\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA61_eot = DFA.unpackEncodedString(DFA61_eotS);
    static final short[] DFA61_eof = DFA.unpackEncodedString(DFA61_eofS);
    static final char[] DFA61_min = DFA.unpackEncodedStringToUnsignedChars(DFA61_minS);
    static final char[] DFA61_max = DFA.unpackEncodedStringToUnsignedChars(DFA61_maxS);
    static final short[] DFA61_accept = DFA.unpackEncodedString(DFA61_acceptS);
    static final short[] DFA61_special = DFA.unpackEncodedString(DFA61_specialS);
    static final short[][] DFA61_transition;

    static {
        int numStates = DFA61_transitionS.length;
        DFA61_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA61_transition[i] = DFA.unpackEncodedString(DFA61_transitionS[i]);
        }
    }

    class DFA61 extends DFA {

        public DFA61(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 61;
            this.eot = DFA61_eot;
            this.eof = DFA61_eof;
            this.min = DFA61_min;
            this.max = DFA61_max;
            this.accept = DFA61_accept;
            this.special = DFA61_special;
            this.transition = DFA61_transition;
        }
        public String getDescription() {
            return "1797:1: interfaceElement : ( ( conditionalCompilerOption LCURLY )=> conditionalCompilerOption l= LCURLY ( interfaceElement )* r= RCURLY | propertyDeclaration | interfaceFunctionDeclaration | statement | directive );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA61_1 = input.LA(1);

                         
                        int index61_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred140_AS3_ex()) ) {s = 50;}

                        else if ( (synpred142_AS3_ex()) ) {s = 51;}

                        else if ( (synpred143_AS3_ex()) ) {s = 52;}

                        else if ( (synpred144_AS3_ex()) ) {s = 9;}

                         
                        input.seek(index61_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA61_2 = input.LA(1);

                         
                        int index61_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred140_AS3_ex()) ) {s = 50;}

                        else if ( (synpred142_AS3_ex()) ) {s = 51;}

                        else if ( (synpred143_AS3_ex()) ) {s = 52;}

                        else if ( (synpred144_AS3_ex()) ) {s = 9;}

                         
                        input.seek(index61_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA61_3 = input.LA(1);

                         
                        int index61_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred140_AS3_ex()) ) {s = 50;}

                        else if ( (synpred142_AS3_ex()) ) {s = 51;}

                        else if ( (synpred143_AS3_ex()) ) {s = 52;}

                        else if ( (synpred144_AS3_ex()) ) {s = 9;}

                         
                        input.seek(index61_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA61_4 = input.LA(1);

                         
                        int index61_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred142_AS3_ex()) ) {s = 51;}

                        else if ( (synpred143_AS3_ex()) ) {s = 52;}

                        else if ( (synpred144_AS3_ex()) ) {s = 9;}

                         
                        input.seek(index61_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA61_5 = input.LA(1);

                         
                        int index61_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred142_AS3_ex()) ) {s = 51;}

                        else if ( (synpred144_AS3_ex()) ) {s = 9;}

                         
                        input.seek(index61_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA61_6 = input.LA(1);

                         
                        int index61_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred142_AS3_ex()) ) {s = 51;}

                        else if ( (synpred144_AS3_ex()) ) {s = 9;}

                         
                        input.seek(index61_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA61_7 = input.LA(1);

                         
                        int index61_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred140_AS3_ex()) ) {s = 50;}

                        else if ( (synpred142_AS3_ex()) ) {s = 51;}

                        else if ( (synpred143_AS3_ex()) ) {s = 52;}

                        else if ( (synpred144_AS3_ex()) ) {s = 9;}

                         
                        input.seek(index61_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA61_8 = input.LA(1);

                         
                        int index61_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_AS3_ex()) ) {s = 52;}

                        else if ( (synpred144_AS3_ex()) ) {s = 9;}

                         
                        input.seek(index61_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA61_10 = input.LA(1);

                         
                        int index61_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_AS3_ex()) ) {s = 9;}

                        else if ( (true) ) {s = 53;}

                         
                        input.seek(index61_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA61_11 = input.LA(1);

                         
                        int index61_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_AS3_ex()) ) {s = 9;}

                        else if ( (true) ) {s = 53;}

                         
                        input.seek(index61_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA61_12 = input.LA(1);

                         
                        int index61_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_AS3_ex()) ) {s = 9;}

                        else if ( (true) ) {s = 53;}

                         
                        input.seek(index61_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA61_13 = input.LA(1);

                         
                        int index61_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_AS3_ex()) ) {s = 9;}

                        else if ( (true) ) {s = 53;}

                         
                        input.seek(index61_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA61_14 = input.LA(1);

                         
                        int index61_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_AS3_ex()) ) {s = 9;}

                        else if ( (true) ) {s = 53;}

                         
                        input.seek(index61_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 61, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA80_eotS =
        "\63\uffff";
    static final String DFA80_eofS =
        "\63\uffff";
    static final String DFA80_minS =
        "\1\4\2\0\6\uffff\1\0\30\uffff\1\0\12\uffff\1\0\2\uffff\1\0\2\uffff";
    static final String DFA80_maxS =
        "\1\u0092\2\0\6\uffff\1\0\30\uffff\1\0\12\uffff\1\0\2\uffff\1\0"+
        "\2\uffff";
    static final String DFA80_acceptS =
        "\3\uffff\1\1\56\uffff\1\2";
    static final String DFA80_specialS =
        "\1\uffff\1\0\1\1\6\uffff\1\2\30\uffff\1\3\12\uffff\1\4\2\uffff"+
        "\1\5\2\uffff}>";
    static final String[] DFA80_transitionS = {
            "\17\3\1\42\6\3\1\55\1\3\1\11\3\3\3\55\5\3\1\60\10\3\3\60\1"+
            "\2\1\3\4\11\2\3\1\uffff\1\3\1\uffff\1\3\3\uffff\1\3\7\uffff"+
            "\3\3\2\uffff\2\3\6\uffff\2\3\26\uffff\2\3\16\uffff\2\3\2\uffff"+
            "\1\3\4\uffff\1\3\2\uffff\1\3\1\uffff\1\1\1\uffff\3\3",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA80_eot = DFA.unpackEncodedString(DFA80_eotS);
    static final short[] DFA80_eof = DFA.unpackEncodedString(DFA80_eofS);
    static final char[] DFA80_min = DFA.unpackEncodedStringToUnsignedChars(DFA80_minS);
    static final char[] DFA80_max = DFA.unpackEncodedStringToUnsignedChars(DFA80_maxS);
    static final short[] DFA80_accept = DFA.unpackEncodedString(DFA80_acceptS);
    static final short[] DFA80_special = DFA.unpackEncodedString(DFA80_specialS);
    static final short[][] DFA80_transition;

    static {
        int numStates = DFA80_transitionS.length;
        DFA80_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA80_transition[i] = DFA.unpackEncodedString(DFA80_transitionS[i]);
        }
    }

    class DFA80 extends DFA {

        public DFA80(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 80;
            this.eot = DFA80_eot;
            this.eof = DFA80_eof;
            this.min = DFA80_min;
            this.max = DFA80_max;
            this.accept = DFA80_accept;
            this.special = DFA80_special;
            this.transition = DFA80_transition;
        }
        public String getDescription() {
            return "1930:8: ( statement | functionDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA80_1 = input.LA(1);

                         
                        int index80_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred167_AS3_ex()) ) {s = 3;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index80_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA80_2 = input.LA(1);

                         
                        int index80_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred167_AS3_ex()) ) {s = 3;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index80_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA80_9 = input.LA(1);

                         
                        int index80_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred167_AS3_ex()) ) {s = 3;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index80_9);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA80_34 = input.LA(1);

                         
                        int index80_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred167_AS3_ex()) ) {s = 3;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index80_34);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA80_45 = input.LA(1);

                         
                        int index80_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred167_AS3_ex()) ) {s = 3;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index80_45);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA80_48 = input.LA(1);

                         
                        int index80_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred167_AS3_ex()) ) {s = 3;}

                        else if ( (true) ) {s = 50;}

                         
                        input.seek(index80_48);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 80, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA83_eotS =
        "\103\uffff";
    static final String DFA83_eofS =
        "\103\uffff";
    static final String DFA83_minS =
        "\1\4\26\0\54\uffff";
    static final String DFA83_maxS =
        "\1\u0092\26\0\54\uffff";
    static final String DFA83_acceptS =
        "\27\uffff\1\24\27\uffff\1\25\1\1\1\21\1\23\1\3\1\2\1\4\1\5\1\6"+
        "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\22";
    static final String DFA83_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\54\uffff}>";
    static final String[] DFA83_transitionS = {
            "\1\27\1\17\3\27\1\12\1\20\1\10\1\27\1\22\4\27\1\21\1\27\1\24"+
            "\1\27\1\7\5\27\1\11\6\27\1\16\1\27\1\14\1\27\1\26\1\11\1\27"+
            "\1\13\1\27\1\6\1\25\1\27\1\23\1\15\3\11\1\2\1\5\4\11\1\57\1"+
            "\3\1\uffff\1\27\1\uffff\1\4\3\uffff\1\27\7\uffff\3\27\2\uffff"+
            "\2\27\6\uffff\2\27\26\uffff\2\27\16\uffff\2\27\2\uffff\1\27"+
            "\4\uffff\1\27\2\uffff\1\27\1\uffff\1\1\1\uffff\3\27",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA83_eot = DFA.unpackEncodedString(DFA83_eotS);
    static final short[] DFA83_eof = DFA.unpackEncodedString(DFA83_eofS);
    static final char[] DFA83_min = DFA.unpackEncodedStringToUnsignedChars(DFA83_minS);
    static final char[] DFA83_max = DFA.unpackEncodedStringToUnsignedChars(DFA83_maxS);
    static final short[] DFA83_accept = DFA.unpackEncodedString(DFA83_acceptS);
    static final short[] DFA83_special = DFA.unpackEncodedString(DFA83_specialS);
    static final short[][] DFA83_transition;

    static {
        int numStates = DFA83_transitionS.length;
        DFA83_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA83_transition[i] = DFA.unpackEncodedString(DFA83_transitionS[i]);
        }
    }

    class DFA83 extends DFA {

        public DFA83(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 83;
            this.eot = DFA83_eot;
            this.eof = DFA83_eof;
            this.min = DFA83_min;
            this.max = DFA83_max;
            this.accept = DFA83_accept;
            this.special = DFA83_special;
            this.transition = DFA83_transition;
        }
        public String getDescription() {
            return "1977:5: ( blockStatement | directive | namespaceDirective | constantVarStatement | tryStatement | switchStatement | withStatement | returnStatement | breakStatement | continueStatement | forStatement | forInStatement | forEachInStatement | doWhileStatement | whileStatement | ifStatement | variableStatement | throwStatement | labelledStatement | expression semic | emptyStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA83_1 = input.LA(1);

                         
                        int index83_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_AS3_ex()) ) {s = 48;}

                        else if ( (synpred195_AS3_ex()) ) {s = 49;}

                        else if ( (synpred197_AS3_ex()) ) {s = 50;}

                        else if ( (synpred198_AS3_ex()) ) {s = 23;}

                         
                        input.seek(index83_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA83_2 = input.LA(1);

                         
                        int index83_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_AS3_ex()) ) {s = 48;}

                        else if ( (synpred181_AS3_ex()) ) {s = 51;}

                        else if ( (synpred198_AS3_ex()) ) {s = 23;}

                         
                        input.seek(index83_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA83_3 = input.LA(1);

                         
                        int index83_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_AS3_ex()) ) {s = 48;}

                        else if ( (synpred198_AS3_ex()) ) {s = 23;}

                         
                        input.seek(index83_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA83_4 = input.LA(1);

                         
                        int index83_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_AS3_ex()) ) {s = 52;}

                        else if ( (synpred198_AS3_ex()) ) {s = 23;}

                         
                        input.seek(index83_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA83_5 = input.LA(1);

                         
                        int index83_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_AS3_ex()) ) {s = 52;}

                        else if ( (synpred198_AS3_ex()) ) {s = 23;}

                         
                        input.seek(index83_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA83_6 = input.LA(1);

                         
                        int index83_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_AS3_ex()) ) {s = 52;}

                        else if ( (synpred198_AS3_ex()) ) {s = 23;}

                         
                        input.seek(index83_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA83_7 = input.LA(1);

                         
                        int index83_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_AS3_ex()) ) {s = 52;}

                        else if ( (synpred198_AS3_ex()) ) {s = 23;}

                         
                        input.seek(index83_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA83_8 = input.LA(1);

                         
                        int index83_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_AS3_ex()) ) {s = 52;}

                        else if ( (synpred198_AS3_ex()) ) {s = 23;}

                         
                        input.seek(index83_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA83_9 = input.LA(1);

                         
                        int index83_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_AS3_ex()) ) {s = 48;}

                        else if ( (synpred198_AS3_ex()) ) {s = 23;}

                         
                        input.seek(index83_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA83_10 = input.LA(1);

                         
                        int index83_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_AS3_ex()) ) {s = 53;}

                        else if ( (synpred198_AS3_ex()) ) {s = 23;}

                         
                        input.seek(index83_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA83_11 = input.LA(1);

                         
                        int index83_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_AS3_ex()) ) {s = 54;}

                        else if ( (synpred198_AS3_ex()) ) {s = 23;}

                         
                        input.seek(index83_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA83_12 = input.LA(1);

                         
                        int index83_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred184_AS3_ex()) ) {s = 55;}

                        else if ( (synpred198_AS3_ex()) ) {s = 23;}

                         
                        input.seek(index83_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA83_13 = input.LA(1);

                         
                        int index83_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred185_AS3_ex()) ) {s = 56;}

                        else if ( (synpred198_AS3_ex()) ) {s = 23;}

                         
                        input.seek(index83_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA83_14 = input.LA(1);

                         
                        int index83_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred186_AS3_ex()) ) {s = 57;}

                        else if ( (synpred198_AS3_ex()) ) {s = 23;}

                         
                        input.seek(index83_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA83_15 = input.LA(1);

                         
                        int index83_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_AS3_ex()) ) {s = 58;}

                        else if ( (synpred198_AS3_ex()) ) {s = 23;}

                         
                        input.seek(index83_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA83_16 = input.LA(1);

                         
                        int index83_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred188_AS3_ex()) ) {s = 59;}

                        else if ( (synpred198_AS3_ex()) ) {s = 23;}

                         
                        input.seek(index83_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA83_17 = input.LA(1);

                         
                        int index83_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_AS3_ex()) ) {s = 60;}

                        else if ( (synpred190_AS3_ex()) ) {s = 61;}

                        else if ( (synpred191_AS3_ex()) ) {s = 62;}

                        else if ( (synpred198_AS3_ex()) ) {s = 23;}

                         
                        input.seek(index83_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA83_18 = input.LA(1);

                         
                        int index83_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred192_AS3_ex()) ) {s = 63;}

                        else if ( (synpred198_AS3_ex()) ) {s = 23;}

                         
                        input.seek(index83_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA83_19 = input.LA(1);

                         
                        int index83_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_AS3_ex()) ) {s = 64;}

                        else if ( (synpred198_AS3_ex()) ) {s = 23;}

                         
                        input.seek(index83_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA83_20 = input.LA(1);

                         
                        int index83_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_AS3_ex()) ) {s = 65;}

                        else if ( (synpred198_AS3_ex()) ) {s = 23;}

                         
                        input.seek(index83_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA83_21 = input.LA(1);

                         
                        int index83_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred195_AS3_ex()) ) {s = 49;}

                        else if ( (synpred198_AS3_ex()) ) {s = 23;}

                         
                        input.seek(index83_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA83_22 = input.LA(1);

                         
                        int index83_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred196_AS3_ex()) ) {s = 66;}

                        else if ( (synpred198_AS3_ex()) ) {s = 23;}

                         
                        input.seek(index83_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 83, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA93_eotS =
        "\63\uffff";
    static final String DFA93_eofS =
        "\1\2\62\uffff";
    static final String DFA93_minS =
        "\1\4\1\0\1\uffff\2\0\56\uffff";
    static final String DFA93_maxS =
        "\1\u0092\1\0\1\uffff\2\0\56\uffff";
    static final String DFA93_acceptS =
        "\2\uffff\1\2\3\uffff\1\1\54\uffff";
    static final String DFA93_specialS =
        "\1\uffff\1\0\1\uffff\1\1\1\2\56\uffff}>";
    static final String[] DFA93_transitionS = {
            "\1\6\1\1\1\3\4\6\1\4\60\6\1\2\1\6\1\uffff\1\6\3\uffff\1\6\7"+
            "\uffff\3\6\2\uffff\2\6\6\uffff\2\6\26\uffff\2\6\16\uffff\2\6"+
            "\2\uffff\1\6\4\uffff\1\6\2\uffff\1\6\1\uffff\1\6\1\uffff\3\6",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA93_eot = DFA.unpackEncodedString(DFA93_eotS);
    static final short[] DFA93_eof = DFA.unpackEncodedString(DFA93_eofS);
    static final char[] DFA93_min = DFA.unpackEncodedStringToUnsignedChars(DFA93_minS);
    static final char[] DFA93_max = DFA.unpackEncodedStringToUnsignedChars(DFA93_maxS);
    static final short[] DFA93_accept = DFA.unpackEncodedString(DFA93_acceptS);
    static final short[] DFA93_special = DFA.unpackEncodedString(DFA93_specialS);
    static final short[][] DFA93_transition;

    static {
        int numStates = DFA93_transitionS.length;
        DFA93_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA93_transition[i] = DFA.unpackEncodedString(DFA93_transitionS[i]);
        }
    }

    class DFA93 extends DFA {

        public DFA93(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 93;
            this.eot = DFA93_eot;
            this.eof = DFA93_eof;
            this.min = DFA93_min;
            this.max = DFA93_max;
            this.accept = DFA93_accept;
            this.special = DFA93_special;
            this.transition = DFA93_transition;
        }
        public String getDescription() {
            return "()* loopback of 2169:6: ( statement )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA93_1 = input.LA(1);

                         
                        int index93_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_AS3_ex()) ) {s = 6;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index93_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA93_3 = input.LA(1);

                         
                        int index93_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_AS3_ex()) ) {s = 6;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index93_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA93_4 = input.LA(1);

                         
                        int index93_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_AS3_ex()) ) {s = 6;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index93_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 93, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA121_eotS =
        "\36\uffff";
    static final String DFA121_eofS =
        "\36\uffff";
    static final String DFA121_minS =
        "\1\4\31\0\1\uffff\1\0\2\uffff";
    static final String DFA121_maxS =
        "\1\u0092\31\0\1\uffff\1\0\2\uffff";
    static final String DFA121_acceptS =
        "\32\uffff\1\2\2\uffff\1\1";
    static final String DFA121_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\uffff\1\31\2\uffff}>";
    static final String[] DFA121_transitionS = {
            "\10\33\1\31\3\33\1\5\2\33\1\20\10\33\1\16\1\30\1\3\5\33\1\2"+
            "\1\33\1\1\1\33\1\16\1\4\1\33\1\31\2\33\1\31\2\33\4\16\1\33\4"+
            "\16\1\uffff\1\14\1\uffff\1\27\1\uffff\1\13\3\uffff\1\25\7\uffff"+
            "\2\32\1\21\2\uffff\2\32\6\uffff\2\32\26\uffff\1\17\1\26\16\uffff"+
            "\1\10\1\11\2\uffff\1\12\4\uffff\1\7\2\uffff\1\6\1\uffff\1\15"+
            "\1\uffff\1\22\1\23\1\24",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA121_eot = DFA.unpackEncodedString(DFA121_eotS);
    static final short[] DFA121_eof = DFA.unpackEncodedString(DFA121_eofS);
    static final char[] DFA121_min = DFA.unpackEncodedStringToUnsignedChars(DFA121_minS);
    static final char[] DFA121_max = DFA.unpackEncodedStringToUnsignedChars(DFA121_maxS);
    static final short[] DFA121_accept = DFA.unpackEncodedString(DFA121_acceptS);
    static final short[] DFA121_special = DFA.unpackEncodedString(DFA121_specialS);
    static final short[][] DFA121_transition;

    static {
        int numStates = DFA121_transitionS.length;
        DFA121_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA121_transition[i] = DFA.unpackEncodedString(DFA121_transitionS[i]);
        }
    }

    class DFA121 extends DFA {

        public DFA121(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 121;
            this.eot = DFA121_eot;
            this.eof = DFA121_eof;
            this.min = DFA121_min;
            this.max = DFA121_max;
            this.accept = DFA121_accept;
            this.special = DFA121_special;
            this.transition = DFA121_transition;
        }
        public String getDescription() {
            return "2721:7: ( ( leftHandSideExpression assignmentOperator )=> leftHandSideExpression assignmentOperator assignmentExpression | conditionalExpression )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA121_1 = input.LA(1);

                         
                        int index121_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index121_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA121_2 = input.LA(1);

                         
                        int index121_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index121_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA121_3 = input.LA(1);

                         
                        int index121_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index121_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA121_4 = input.LA(1);

                         
                        int index121_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index121_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA121_5 = input.LA(1);

                         
                        int index121_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index121_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA121_6 = input.LA(1);

                         
                        int index121_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index121_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA121_7 = input.LA(1);

                         
                        int index121_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index121_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA121_8 = input.LA(1);

                         
                        int index121_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index121_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA121_9 = input.LA(1);

                         
                        int index121_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index121_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA121_10 = input.LA(1);

                         
                        int index121_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index121_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA121_11 = input.LA(1);

                         
                        int index121_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index121_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA121_12 = input.LA(1);

                         
                        int index121_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index121_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA121_13 = input.LA(1);

                         
                        int index121_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index121_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA121_14 = input.LA(1);

                         
                        int index121_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index121_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA121_15 = input.LA(1);

                         
                        int index121_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index121_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA121_16 = input.LA(1);

                         
                        int index121_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index121_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA121_17 = input.LA(1);

                         
                        int index121_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index121_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA121_18 = input.LA(1);

                         
                        int index121_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index121_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA121_19 = input.LA(1);

                         
                        int index121_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index121_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA121_20 = input.LA(1);

                         
                        int index121_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index121_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA121_21 = input.LA(1);

                         
                        int index121_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index121_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA121_22 = input.LA(1);

                         
                        int index121_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index121_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA121_23 = input.LA(1);

                         
                        int index121_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index121_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA121_24 = input.LA(1);

                         
                        int index121_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index121_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA121_25 = input.LA(1);

                         
                        int index121_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index121_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA121_27 = input.LA(1);

                         
                        int index121_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index121_27);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 121, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA122_eotS =
        "\36\uffff";
    static final String DFA122_eofS =
        "\36\uffff";
    static final String DFA122_minS =
        "\1\4\31\0\1\uffff\1\0\2\uffff";
    static final String DFA122_maxS =
        "\1\u0092\31\0\1\uffff\1\0\2\uffff";
    static final String DFA122_acceptS =
        "\32\uffff\1\2\2\uffff\1\1";
    static final String DFA122_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\uffff\1\31\2\uffff}>";
    static final String[] DFA122_transitionS = {
            "\10\33\1\31\3\33\1\5\2\33\1\20\10\33\1\16\1\30\1\3\5\33\1\2"+
            "\1\33\1\1\1\33\1\16\1\4\1\33\1\31\2\33\1\31\2\33\4\16\1\33\4"+
            "\16\1\uffff\1\14\1\uffff\1\27\1\uffff\1\13\3\uffff\1\25\7\uffff"+
            "\2\32\1\21\2\uffff\2\32\6\uffff\2\32\26\uffff\1\17\1\26\16\uffff"+
            "\1\10\1\11\2\uffff\1\12\4\uffff\1\7\2\uffff\1\6\1\uffff\1\15"+
            "\1\uffff\1\22\1\23\1\24",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA122_eot = DFA.unpackEncodedString(DFA122_eotS);
    static final short[] DFA122_eof = DFA.unpackEncodedString(DFA122_eofS);
    static final char[] DFA122_min = DFA.unpackEncodedStringToUnsignedChars(DFA122_minS);
    static final char[] DFA122_max = DFA.unpackEncodedStringToUnsignedChars(DFA122_maxS);
    static final short[] DFA122_accept = DFA.unpackEncodedString(DFA122_acceptS);
    static final short[] DFA122_special = DFA.unpackEncodedString(DFA122_specialS);
    static final short[][] DFA122_transition;

    static {
        int numStates = DFA122_transitionS.length;
        DFA122_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA122_transition[i] = DFA.unpackEncodedString(DFA122_transitionS[i]);
        }
    }

    class DFA122 extends DFA {

        public DFA122(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 122;
            this.eot = DFA122_eot;
            this.eof = DFA122_eof;
            this.min = DFA122_min;
            this.max = DFA122_max;
            this.accept = DFA122_accept;
            this.special = DFA122_special;
            this.transition = DFA122_transition;
        }
        public String getDescription() {
            return "2736:8: ( ( leftHandSideExpression assignmentOperator )=> leftHandSideExpression assignmentOperator assignmentExpressionNoIn | conditionalExpressionNoIn )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA122_1 = input.LA(1);

                         
                        int index122_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index122_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA122_2 = input.LA(1);

                         
                        int index122_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index122_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA122_3 = input.LA(1);

                         
                        int index122_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index122_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA122_4 = input.LA(1);

                         
                        int index122_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index122_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA122_5 = input.LA(1);

                         
                        int index122_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index122_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA122_6 = input.LA(1);

                         
                        int index122_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index122_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA122_7 = input.LA(1);

                         
                        int index122_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index122_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA122_8 = input.LA(1);

                         
                        int index122_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index122_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA122_9 = input.LA(1);

                         
                        int index122_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index122_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA122_10 = input.LA(1);

                         
                        int index122_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index122_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA122_11 = input.LA(1);

                         
                        int index122_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index122_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA122_12 = input.LA(1);

                         
                        int index122_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index122_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA122_13 = input.LA(1);

                         
                        int index122_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index122_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA122_14 = input.LA(1);

                         
                        int index122_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index122_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA122_15 = input.LA(1);

                         
                        int index122_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index122_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA122_16 = input.LA(1);

                         
                        int index122_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index122_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA122_17 = input.LA(1);

                         
                        int index122_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index122_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA122_18 = input.LA(1);

                         
                        int index122_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index122_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA122_19 = input.LA(1);

                         
                        int index122_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index122_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA122_20 = input.LA(1);

                         
                        int index122_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index122_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA122_21 = input.LA(1);

                         
                        int index122_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index122_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA122_22 = input.LA(1);

                         
                        int index122_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index122_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA122_23 = input.LA(1);

                         
                        int index122_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index122_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA122_24 = input.LA(1);

                         
                        int index122_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index122_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA122_25 = input.LA(1);

                         
                        int index122_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index122_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA122_27 = input.LA(1);

                         
                        int index122_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 26;}

                         
                        input.seek(index122_27);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 122, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA123_eotS =
        "\21\uffff";
    static final String DFA123_eofS =
        "\21\uffff";
    static final String DFA123_minS =
        "\1\104\7\uffff\1\104\5\uffff\1\104\2\uffff";
    static final String DFA123_maxS =
        "\1\152\7\uffff\1\104\5\uffff\1\136\2\uffff";
    static final String DFA123_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\uffff\1\12\1\13\1\14\1\15"+
        "\1\16\1\uffff\1\10\1\11";
    static final String DFA123_specialS =
        "\21\uffff}>";
    static final String[] DFA123_transitionS = {
            "\1\10\10\uffff\1\2\20\uffff\1\1\1\3\1\4\1\5\1\6\1\7\2\uffff"+
            "\1\15\1\14\1\11\1\12\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\16",
            "",
            "",
            "",
            "",
            "",
            "\1\20\31\uffff\1\17",
            "",
            ""
    };

    static final short[] DFA123_eot = DFA.unpackEncodedString(DFA123_eotS);
    static final short[] DFA123_eof = DFA.unpackEncodedString(DFA123_eofS);
    static final char[] DFA123_min = DFA.unpackEncodedStringToUnsignedChars(DFA123_minS);
    static final char[] DFA123_max = DFA.unpackEncodedStringToUnsignedChars(DFA123_maxS);
    static final short[] DFA123_accept = DFA.unpackEncodedString(DFA123_acceptS);
    static final short[] DFA123_special = DFA.unpackEncodedString(DFA123_specialS);
    static final short[][] DFA123_transition;

    static {
        int numStates = DFA123_transitionS.length;
        DFA123_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA123_transition[i] = DFA.unpackEncodedString(DFA123_transitionS[i]);
        }
    }

    class DFA123 extends DFA {

        public DFA123(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 123;
            this.eot = DFA123_eot;
            this.eof = DFA123_eof;
            this.min = DFA123_min;
            this.max = DFA123_max;
            this.accept = DFA123_accept;
            this.special = DFA123_special;
            this.transition = DFA123_transition;
        }
        public String getDescription() {
            return "2756:1: assignmentOperator_int : ( ASSIGN | s= STAR a= ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | SHL_ASSIGN | ( ( '>' '>' '=' )=>t1= '>' t2= '>' t3= '=' {...}? -> SHR_ASSIGN ) | ( ( '>' '>' '>' '=' )=>t1= '>' t2= '>' t3= '>' t4= '=' {...}? -> SHU_ASSIGN ) | AND_ASSIGN | XOR_ASSIGN | OR_ASSIGN | LOR_ASSIGN | LAND_ASSIGN );";
        }
    }
    static final String DFA148_eotS =
        "\36\uffff";
    static final String DFA148_eofS =
        "\36\uffff";
    static final String DFA148_minS =
        "\1\4\30\uffff\2\0\3\uffff";
    static final String DFA148_maxS =
        "\1\u0092\30\uffff\2\0\3\uffff";
    static final String DFA148_acceptS =
        "\1\uffff\1\1\32\uffff\1\3\1\2";
    static final String DFA148_specialS =
        "\31\uffff\1\0\1\1\3\uffff}>";
    static final String[] DFA148_transitionS = {
            "\10\1\1\31\36\1\1\31\2\1\1\31\13\1\1\uffff\1\1\1\uffff\1\1"+
            "\1\uffff\1\1\3\uffff\1\1\7\uffff\2\34\1\1\2\uffff\2\34\6\uffff"+
            "\2\32\26\uffff\2\1\16\uffff\2\1\2\uffff\1\1\4\uffff\1\1\2\uffff"+
            "\1\1\1\uffff\1\1\1\uffff\3\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA148_eot = DFA.unpackEncodedString(DFA148_eotS);
    static final short[] DFA148_eof = DFA.unpackEncodedString(DFA148_eofS);
    static final char[] DFA148_min = DFA.unpackEncodedStringToUnsignedChars(DFA148_minS);
    static final char[] DFA148_max = DFA.unpackEncodedStringToUnsignedChars(DFA148_maxS);
    static final short[] DFA148_accept = DFA.unpackEncodedString(DFA148_acceptS);
    static final short[] DFA148_special = DFA.unpackEncodedString(DFA148_specialS);
    static final short[][] DFA148_transition;

    static {
        int numStates = DFA148_transitionS.length;
        DFA148_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA148_transition[i] = DFA.unpackEncodedString(DFA148_transitionS[i]);
        }
    }

    class DFA148 extends DFA {

        public DFA148(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 148;
            this.eot = DFA148_eot;
            this.eof = DFA148_eof;
            this.min = DFA148_min;
            this.max = DFA148_max;
            this.accept = DFA148_accept;
            this.special = DFA148_special;
            this.transition = DFA148_transition;
        }
        public String getDescription() {
            return "3039:1: unaryExpression : ( postfixExpression | op= ( NOT | INV ) unaryExpression | unaryOp postfixExpression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA148_25 = input.LA(1);

                         
                        int index148_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_AS3_ex()) ) {s = 1;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index148_25);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA148_26 = input.LA(1);

                         
                        int index148_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_AS3_ex()) ) {s = 29;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index148_26);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 148, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA152_eotS =
        "\15\uffff";
    static final String DFA152_eofS =
        "\1\1\14\uffff";
    static final String DFA152_minS =
        "\1\4\1\uffff\5\0\6\uffff";
    static final String DFA152_maxS =
        "\1\u0092\1\uffff\5\0\6\uffff";
    static final String DFA152_acceptS =
        "\1\uffff\1\7\5\uffff\1\2\1\1\1\3\1\4\1\5\1\6";
    static final String DFA152_specialS =
        "\2\uffff\1\2\1\0\1\4\1\3\1\1\6\uffff}>";
    static final String[] DFA152_transitionS = {
            "\71\1\1\3\1\1\1\2\1\1\1\5\4\1\1\uffff\14\1\2\uffff\17\1\2\uffff"+
            "\5\1\1\uffff\1\4\2\uffff\1\6\2\1\16\uffff\2\1\2\uffff\1\1\4"+
            "\uffff\1\1\2\uffff\1\1\1\uffff\1\1\1\uffff\3\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA152_eot = DFA.unpackEncodedString(DFA152_eotS);
    static final short[] DFA152_eof = DFA.unpackEncodedString(DFA152_eofS);
    static final char[] DFA152_min = DFA.unpackEncodedStringToUnsignedChars(DFA152_minS);
    static final char[] DFA152_max = DFA.unpackEncodedStringToUnsignedChars(DFA152_maxS);
    static final short[] DFA152_accept = DFA.unpackEncodedString(DFA152_acceptS);
    static final short[] DFA152_special = DFA.unpackEncodedString(DFA152_specialS);
    static final short[][] DFA152_transition;

    static {
        int numStates = DFA152_transitionS.length;
        DFA152_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA152_transition[i] = DFA.unpackEncodedString(DFA152_transitionS[i]);
        }
    }

    class DFA152 extends DFA {

        public DFA152(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 152;
            this.eot = DFA152_eot;
            this.eof = DFA152_eof;
            this.min = DFA152_min;
            this.max = DFA152_max;
            this.accept = DFA152_accept;
            this.special = DFA152_special;
            this.transition = DFA152_transition;
        }
        public String getDescription() {
            return "()* loopback of 3080:5: ( arguments | L= LBRACK expression R= RBRACK | E= XML_ELLIPSIS eitherIdentifier | D= DOT ( eitherIdentifier | parExpression ) | typePostfixSyntax | op= XML_NS_OP expression )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA152_3 = input.LA(1);

                         
                        int index152_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_AS3_ex()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA152_6 = input.LA(1);

                         
                        int index152_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_AS3_ex()) ) {s = 12;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_6);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA152_2 = input.LA(1);

                         
                        int index152_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred316_AS3_ex()) ) {s = 7;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA152_5 = input.LA(1);

                         
                        int index152_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_AS3_ex()) ) {s = 10;}

                        else if ( (synpred320_AS3_ex()) ) {s = 11;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA152_4 = input.LA(1);

                         
                        int index152_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_AS3_ex()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 152, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA162_eotS =
        "\34\uffff";
    static final String DFA162_eofS =
        "\34\uffff";
    static final String DFA162_minS =
        "\1\4\5\0\7\uffff\2\0\6\uffff\1\0\6\uffff";
    static final String DFA162_maxS =
        "\1\u0092\5\0\7\uffff\2\0\6\uffff\1\0\6\uffff";
    static final String DFA162_acceptS =
        "\6\uffff\1\3\4\uffff\1\4\1\5\2\uffff\1\7\7\uffff\1\10\1\1\1\2\1"+
        "\6\1\11";
    static final String DFA162_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\7\uffff\1\5\1\6\6\uffff\1\7\6\uffff}>";
    static final String[] DFA162_transitionS = {
            "\14\17\1\5\13\17\1\16\1\17\1\3\5\17\1\2\1\17\1\1\1\17\1\16"+
            "\1\4\7\17\4\16\1\17\4\16\1\uffff\1\14\1\uffff\1\27\1\uffff\1"+
            "\13\3\uffff\1\25\11\uffff\1\17\42\uffff\2\17\16\uffff\2\6\2"+
            "\uffff\1\6\4\uffff\1\6\2\uffff\1\6\1\uffff\1\15\1\uffff\3\17",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA162_eot = DFA.unpackEncodedString(DFA162_eotS);
    static final short[] DFA162_eof = DFA.unpackEncodedString(DFA162_eofS);
    static final char[] DFA162_min = DFA.unpackEncodedStringToUnsignedChars(DFA162_minS);
    static final char[] DFA162_max = DFA.unpackEncodedStringToUnsignedChars(DFA162_maxS);
    static final short[] DFA162_accept = DFA.unpackEncodedString(DFA162_acceptS);
    static final short[] DFA162_special = DFA.unpackEncodedString(DFA162_specialS);
    static final short[][] DFA162_transition;

    static {
        int numStates = DFA162_transitionS.length;
        DFA162_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA162_transition[i] = DFA.unpackEncodedString(DFA162_transitionS[i]);
        }
    }

    class DFA162 extends DFA {

        public DFA162(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 162;
            this.eot = DFA162_eot;
            this.eof = DFA162_eof;
            this.min = DFA162_min;
            this.max = DFA162_max;
            this.accept = DFA162_accept;
            this.special = DFA162_special;
            this.transition = DFA162_transition;
        }
        public String getDescription() {
            return "3225:1: primaryExpressionHelper : (T= THIS | S= SUPER | literal | arrayLiteral | objectLiteral | ( identifierLiteral x= XML_NS_OP )? identifierLiteral | xmlPrimaryExpression | parExpression | l= LT type g= GT ( arrayLiteral )? );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA162_1 = input.LA(1);

                         
                        int index162_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_AS3_ex()) ) {s = 24;}

                        else if ( (synpred392_AS3_ex()) ) {s = 15;}

                         
                        input.seek(index162_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA162_2 = input.LA(1);

                         
                        int index162_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred386_AS3_ex()) ) {s = 25;}

                        else if ( (synpred392_AS3_ex()) ) {s = 15;}

                         
                        input.seek(index162_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA162_3 = input.LA(1);

                         
                        int index162_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred387_AS3_ex()) ) {s = 6;}

                        else if ( (synpred392_AS3_ex()) ) {s = 15;}

                         
                        input.seek(index162_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA162_4 = input.LA(1);

                         
                        int index162_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred387_AS3_ex()) ) {s = 6;}

                        else if ( (synpred392_AS3_ex()) ) {s = 15;}

                         
                        input.seek(index162_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA162_5 = input.LA(1);

                         
                        int index162_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred387_AS3_ex()) ) {s = 6;}

                        else if ( (synpred392_AS3_ex()) ) {s = 15;}

                         
                        input.seek(index162_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA162_13 = input.LA(1);

                         
                        int index162_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred391_AS3_ex()) ) {s = 26;}

                        else if ( (synpred392_AS3_ex()) ) {s = 15;}

                         
                        input.seek(index162_13);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA162_14 = input.LA(1);

                         
                        int index162_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred391_AS3_ex()) ) {s = 26;}

                        else if ( (synpred392_AS3_ex()) ) {s = 15;}

                         
                        input.seek(index162_14);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA162_21 = input.LA(1);

                         
                        int index162_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred392_AS3_ex()) ) {s = 15;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index162_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 162, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA161_eotS =
        "\131\uffff";
    static final String DFA161_eofS =
        "\1\2\130\uffff";
    static final String DFA161_minS =
        "\1\4\1\0\127\uffff";
    static final String DFA161_maxS =
        "\1\u0092\1\0\127\uffff";
    static final String DFA161_acceptS =
        "\2\uffff\1\2\125\uffff\1\1";
    static final String DFA161_specialS =
        "\1\uffff\1\0\127\uffff}>";
    static final String[] DFA161_transitionS = {
            "\73\2\1\1\6\2\1\uffff\14\2\2\uffff\17\2\2\uffff\5\2\1\uffff"+
            "\1\2\2\uffff\3\2\16\uffff\2\2\2\uffff\1\2\4\uffff\1\2\2\uffff"+
            "\1\2\1\uffff\1\2\1\uffff\3\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA161_eot = DFA.unpackEncodedString(DFA161_eotS);
    static final short[] DFA161_eof = DFA.unpackEncodedString(DFA161_eofS);
    static final char[] DFA161_min = DFA.unpackEncodedStringToUnsignedChars(DFA161_minS);
    static final char[] DFA161_max = DFA.unpackEncodedStringToUnsignedChars(DFA161_maxS);
    static final short[] DFA161_accept = DFA.unpackEncodedString(DFA161_acceptS);
    static final short[] DFA161_special = DFA.unpackEncodedString(DFA161_specialS);
    static final short[][] DFA161_transition;

    static {
        int numStates = DFA161_transitionS.length;
        DFA161_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA161_transition[i] = DFA.unpackEncodedString(DFA161_transitionS[i]);
        }
    }

    class DFA161 extends DFA {

        public DFA161(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 161;
            this.eot = DFA161_eot;
            this.eof = DFA161_eof;
            this.min = DFA161_min;
            this.max = DFA161_max;
            this.accept = DFA161_accept;
            this.special = DFA161_special;
            this.transition = DFA161_transition;
        }
        public String getDescription() {
            return "3234:48: ( arrayLiteral )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA161_1 = input.LA(1);

                         
                        int index161_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred394_AS3_ex()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index161_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 161, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_TRUE_in_booleanLiteral3642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FALSE_in_booleanLiteral3650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEC_NUMBER_LITERAL_in_numericLiteral3684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HEX_NUMBER_LITERAL_in_numericLiteral3692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SINGLE_QUOTE_LITERAL_in_stringLiteral3727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_QUOTE_LITERAL_in_stringLiteral3734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_EXPR_LITERAL_in_regularExpresionLiteral3759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_identifierLiteral3792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_notQuiteReservedWord_in_identifierLiteral3797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_xmlNameLiteral3832 = new BitSet(new long[]{0x0000000000000002L,0x0000000020001002L});
    public static final BitSet FOLLOW_allKeywords_in_xmlNameLiteral3837 = new BitSet(new long[]{0x0000000000000002L,0x0000000020001002L});
    public static final BitSet FOLLOW_SUB_in_xmlNameLiteral3848 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_DOT_in_xmlNameLiteral3856 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_COLON_in_xmlNameLiteral3864 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_xmlNameLiteral3875 = new BitSet(new long[]{0x0000000000000002L,0x0000000020001002L});
    public static final BitSet FOLLOW_allKeywords_in_xmlNameLiteral3881 = new BitSet(new long[]{0x0000000000000002L,0x0000000020001002L});
    public static final BitSet FOLLOW_NULL_in_literal3934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanLiteral_in_literal3940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteral_in_literal3944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringLiteral_in_literal3948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_regularExpresionLiteral_in_literal3952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlComment_in_xmlMarkup3988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlCDATA_in_xmlMarkup3992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlPI_in_xmlMarkup3996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_XML_COMMENT_in_xmlComment4031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_XML_CDATA_in_xmlCDATA4073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_XML_PI_in_xmlPI4116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_xmlExprEval4154 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_expression_in_xmlExprEval4158 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_RCURLY_in_xmlExprEval4162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_allKeywords_in_xmlTextElement4180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_xmlTextElement4193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlTextElement_in_xmlText4908 = new BitSet(new long[]{0xF7FFFFFFFFFFFFF2L,0x00019FCFFFE7FFB7L,0x0000000000085203L});
    public static final BitSet FOLLOW_xmlPropertyIdentifier_in_xmlPrimaryExpression4932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlInitialiser_in_xmlPrimaryExpression4942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlListInitialiser_in_xmlPrimaryExpression4952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlAttributeIdentifier_in_xmlPropertyIdentifier5045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlQualifiedIdentifier_in_xmlPropertyIdentifier5057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_xmlPropertyIdentifier5071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_XML_AT_in_xmlAttributeIdentifier5136 = new BitSet(new long[]{0x83FFFFFFFFFFFFF0L,0x0000000000002000L,0x0000000000004000L});
    public static final BitSet FOLLOW_xmlQualifiedIdentifier_in_xmlAttributeIdentifier5162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlPropertySelector_in_xmlAttributeIdentifier5177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_indexSuffix_in_xmlAttributeIdentifier5192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlNameLiteral_in_xmlPropertySelector5282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_xmlPropertySelector5295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlPropertySelector_in_xmlQualifiedIdentifier5316 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_XML_NS_OP_in_xmlQualifiedIdentifier5321 = new BitSet(new long[]{0x83FFFFFFFFFFFFF0L,0x0000000000002000L,0x0000000000004000L});
    public static final BitSet FOLLOW_xmlPropertySelector_in_xmlQualifiedIdentifier5356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_indexSuffix_in_xmlQualifiedIdentifier5368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlMarkup_in_xmlInitialiser5399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlElement_in_xmlInitialiser5409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_xmlElement5475 = new BitSet(new long[]{0x0BFFFFFFFFFFFFF0L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_xmlTagName_in_xmlElement5481 = new BitSet(new long[]{0x0BFFFFFFFFFFFFF0L,0x0000200000000010L,0x0000000000004000L});
    public static final BitSet FOLLOW_xmlAttributes_in_xmlElement5483 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000010L});
    public static final BitSet FOLLOW_XML_TEND_in_xmlElement5503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_xmlElement5559 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x0001DFCFFFE7FFBFL,0x00000000000F5203L});
    public static final BitSet FOLLOW_xmlElementContent_in_xmlElement5563 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_XML_E_TEND_in_xmlElement5578 = new BitSet(new long[]{0x0BFFFFFFFFFFFFF0L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_xmlTagName_in_xmlElement5593 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_GT_in_xmlElement5597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlAttribute_in_xmlAttributes5636 = new BitSet(new long[]{0x0BFFFFFFFFFFFFF2L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_xmlExprEval_in_xmlTagName5666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlNameLiteral_in_xmlTagName5671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlTagName_in_xmlAttribute5694 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_ASSIGN_in_xmlAttribute5698 = new BitSet(new long[]{0x0800000000000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_xmlExprEval_in_xmlAttribute5717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringLiteral_in_xmlAttribute5729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlElementContentHelper_in_xmlElementContent5761 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0x00019FCFFFE7FFBFL,0x00000000000F5203L});
    public static final BitSet FOLLOW_xmlExprEval_in_xmlElementContentHelper5781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlMarkup_in_xmlElementContentHelper5791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlElement_in_xmlElementContentHelper5801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlText_in_xmlElementContentHelper5812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_XML_LS_STD_in_xmlListInitialiser5854 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00059FCFFFE7FFBFL,0x00000000000F5203L});
    public static final BitSet FOLLOW_xmlElementContent_in_xmlListInitialiser5869 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_XML_LS_END_in_xmlListInitialiser5882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_semic5920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EOF_in_semic5934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RCURLY_in_semic5948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_packageDeclaration_in_fileContents5968 = new BitSet(new long[]{0xAFFFFFFFFFFFFFF2L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_packageElement_in_fileContents5971 = new BitSet(new long[]{0xAFFFFFFFFFFFFFF2L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_EOF_in_fileContents5977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PACKAGE_in_packageDeclaration5994 = new BitSet(new long[]{0x0BFFFFFFFFFFFFF0L,0x0000000000002000L,0x0000000000004000L});
    public static final BitSet FOLLOW_type_in_packageDeclaration6001 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_LCURLY_in_packageDeclaration6015 = new BitSet(new long[]{0xBFFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_packageElement_in_packageDeclaration6031 = new BitSet(new long[]{0xBFFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_RCURLY_in_packageDeclaration6057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalCompilerOption_in_mxmlEmbedded6081 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_LCURLY_in_mxmlEmbedded6089 = new BitSet(new long[]{0xBFFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_mxmlEmbedded_in_mxmlEmbedded6099 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_RCURLY_in_mxmlEmbedded6108 = new BitSet(new long[]{0xAFFFFFFFFFFFFFF2L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_propertyDeclaration_in_mxmlEmbedded6121 = new BitSet(new long[]{0xAFFFFFFFFFFFFFF2L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_functionDeclaration_in_mxmlEmbedded6125 = new BitSet(new long[]{0xAFFFFFFFFFFFFFF2L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_statement_in_mxmlEmbedded6129 = new BitSet(new long[]{0xAFFFFFFFFFFFFFF2L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_directive_in_mxmlEmbedded6133 = new BitSet(new long[]{0xAFFFFFFFFFFFFFF2L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_interfaceFunctionDeclaration_in_mxmlEmbedded6137 = new BitSet(new long[]{0xAFFFFFFFFFFFFFF2L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_EOF_in_mxmlEmbedded6154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalCompilerOption_in_packageElement6180 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_LCURLY_in_packageElement6188 = new BitSet(new long[]{0xBFFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_packageElement_in_packageElement6198 = new BitSet(new long[]{0xBFFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_RCURLY_in_packageElement6213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDecl_in_packageElement6228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyDeclaration_in_packageElement6232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionDeclaration_in_packageElement6236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceFunctionDeclaration_in_packageElement6240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_packageElement6244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directive_in_packageElement6248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_importDeclaration6273 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000002000L,0x0000000000004000L});
    public static final BitSet FOLLOW_type_in_importDeclaration6277 = new BitSet(new long[]{0x1400000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_importDeclaration6282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_STAR_in_importDeclaration6288 = new BitSet(new long[]{0x1400000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_semic_in_importDeclaration6294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalDirAndBindingDecls_in_classOrInterfaceDecl6311 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_memberModifiers_in_classOrInterfaceDecl6319 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_classOrInterfaceDecl6323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_classOrInterfaceDecl6327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bindingDecl_in_directive6344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_includeDirective_in_directive6348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_useNamespaceDirective_in_directive6352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importDeclaration_in_directive6356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_defaultXMLNamespaceDirective_in_directive6362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalCompilerOption_in_conditionalDirAndBindingDecls6388 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_bindingDecl_in_conditionalDirAndBindingDecls6405 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_xmlKeyword6423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierLiteral_in_conditionalCompilerOption6439 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_XML_NS_OP_in_conditionalCompilerOption6443 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_identifierLiteral_in_conditionalCompilerOption6447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_defaultXMLNamespaceDirective6474 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_xmlKeyword_in_defaultXMLNamespaceDirective6478 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_NAMESPACE_in_defaultXMLNamespaceDirective6486 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_ASSIGN_in_defaultXMLNamespaceDirective6494 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_assignmentExpression_in_defaultXMLNamespaceDirective6498 = new BitSet(new long[]{0x1400000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_semic_in_defaultXMLNamespaceDirective6500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_bindingDecl6535 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_XML_AT_in_bindingDecl6546 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_bindingDecl6552 = new BitSet(new long[]{0x2000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_LPAREN_in_bindingDecl6576 = new BitSet(new long[]{0x43FFFFFFFFFFFFF0L,0x0001000000003800L,0x0000000000005203L});
    public static final BitSet FOLLOW_bindingDeclArg_in_bindingDecl6588 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_COMMA_in_bindingDecl6593 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0001000000003800L,0x0000000000005203L});
    public static final BitSet FOLLOW_bindingDeclArg_in_bindingDecl6597 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_RPAREN_in_bindingDecl6608 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_RBRACK_in_bindingDecl6629 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_SEMI_in_bindingDecl6635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INCLUDE_in_includeDirective6665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_stringLiteral_in_includeDirective6668 = new BitSet(new long[]{0x1400000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_semic_in_includeDirective6670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eitherIdentifier_in_bindingDeclArg6699 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_ASSIGN_in_bindingDeclArg6703 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0001000000003800L,0x0000000000005203L});
    public static final BitSet FOLLOW_stringLiteral_in_bindingDeclArg6716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_bindingDeclArg6723 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001200L});
    public static final BitSet FOLLOW_SUB_in_bindingDeclArg6731 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001200L});
    public static final BitSet FOLLOW_numericLiteral_in_bindingDeclArg6738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eitherIdentifier_in_bindingDeclArg6743 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_bindingDeclArg6748 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0001000000002000L,0x0000000000004000L});
    public static final BitSet FOLLOW_eitherIdentifier_in_bindingDeclArg6752 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_INTERFACE_in_interfaceDeclaration6789 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000002000L,0x0000000000004000L});
    public static final BitSet FOLLOW_type_in_interfaceDeclaration6793 = new BitSet(new long[]{0x0800000000008000L});
    public static final BitSet FOLLOW_EXTENDS_in_interfaceDeclaration6801 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000002000L,0x0000000000004000L});
    public static final BitSet FOLLOW_typeList_in_interfaceDeclaration6815 = new BitSet(new long[]{0x0800000000008000L});
    public static final BitSet FOLLOW_interfaceBody_in_interfaceDeclaration6842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_interfaceBody6858 = new BitSet(new long[]{0xBFFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_interfaceElement_in_interfaceBody6874 = new BitSet(new long[]{0xBFFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_RCURLY_in_interfaceBody6900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLASS_in_classDeclaration6927 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000002000L,0x0000000000004000L});
    public static final BitSet FOLLOW_type_in_classDeclaration6931 = new BitSet(new long[]{0x0800000000208000L});
    public static final BitSet FOLLOW_EXTENDS_in_classDeclaration6940 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000002000L,0x0000000000004000L});
    public static final BitSet FOLLOW_type_in_classDeclaration6952 = new BitSet(new long[]{0x0800000000208000L});
    public static final BitSet FOLLOW_IMPLEMENTS_in_classDeclaration6972 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000002000L,0x0000000000004000L});
    public static final BitSet FOLLOW_typeList_in_classDeclaration6986 = new BitSet(new long[]{0x0800000000208000L});
    public static final BitSet FOLLOW_classBody_in_classDeclaration7012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_classBody7041 = new BitSet(new long[]{0xBFFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_classBodyElement_in_classBody7051 = new BitSet(new long[]{0xBFFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_RCURLY_in_classBody7068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalCompilerOption_in_classBodyElement7107 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_LCURLY_in_classBodyElement7115 = new BitSet(new long[]{0xBFFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_classBodyElement_in_classBodyElement7125 = new BitSet(new long[]{0xBFFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_RCURLY_in_classBodyElement7144 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyDeclaration_in_classBodyElement7158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionDeclaration_in_classBodyElement7162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_classBodyElement7166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directive_in_classBodyElement7170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalCompilerOption_in_interfaceElement7202 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_LCURLY_in_interfaceElement7210 = new BitSet(new long[]{0xBFFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_interfaceElement_in_interfaceElement7220 = new BitSet(new long[]{0xBFFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_RCURLY_in_interfaceElement7239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyDeclaration_in_interfaceElement7253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceFunctionDeclaration_in_interfaceElement7257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_interfaceElement7261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directive_in_interfaceElement7264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalDirAndBindingDecls_in_interfaceFunctionDeclaration7299 = new BitSet(new long[]{0x03C0000714080000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_memberModifiers_in_interfaceFunctionDeclaration7305 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_FUNCTION_in_interfaceFunctionDeclaration7310 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_SET_in_interfaceFunctionDeclaration7329 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_GET_in_interfaceFunctionDeclaration7336 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_interfaceFunctionDeclaration7353 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_notQuiteReservedWord_in_interfaceFunctionDeclaration7359 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_formalParameterList_in_interfaceFunctionDeclaration7362 = new BitSet(new long[]{0x1400000000000000L,0x0000000020000002L});
    public static final BitSet FOLLOW_COLON_in_interfaceFunctionDeclaration7367 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000002000L,0x0000000000004000L});
    public static final BitSet FOLLOW_type_in_interfaceFunctionDeclaration7371 = new BitSet(new long[]{0x1400000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_semic_in_interfaceFunctionDeclaration7375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalDirAndBindingDecls_in_propertyDeclaration7405 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_memberModifiers_in_propertyDeclaration7412 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_variableStatement_in_propertyDeclaration7416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constantVarStatement_in_propertyDeclaration7420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespaceDirective_in_propertyDeclaration7424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalDirAndBindingDecls_in_functionDeclaration7458 = new BitSet(new long[]{0x03C0000714080000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_memberModifiers_in_functionDeclaration7465 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_FUNCTION_in_functionDeclaration7470 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_set_in_functionDeclaration7491 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_functionDeclaration7512 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_notQuiteReservedWord_in_functionDeclaration7518 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_formalParameterList_in_functionDeclaration7521 = new BitSet(new long[]{0x0800000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COLON_in_functionDeclaration7526 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000002000L,0x0000000000004000L});
    public static final BitSet FOLLOW_type_in_functionDeclaration7530 = new BitSet(new long[]{0x0800000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_functionBody_in_functionDeclaration7546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_in_functionExpression7581 = new BitSet(new long[]{0x2000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_functionExpression7588 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_formalParameterList_in_functionExpression7593 = new BitSet(new long[]{0x0800000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COLON_in_functionExpression7598 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000002000L,0x0000000000004000L});
    public static final BitSet FOLLOW_type_in_functionExpression7602 = new BitSet(new long[]{0x0800000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_functionBody_in_functionExpression7616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_formalParameterList7652 = new BitSet(new long[]{0x43FFFFFFFFFFFFF0L,0x0000080000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_variableDeclaration_in_formalParameterList7673 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_COMMA_in_formalParameterList7710 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_variableDeclaration_in_formalParameterList7745 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_COMMA_in_formalParameterList7780 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_formalEllipsisParameter_in_formalParameterList7785 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_formalEllipsisParameter_in_formalParameterList7817 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_formalParameterList7835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELLIPSIS_in_formalEllipsisParameter7882 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_variableIdentifierDecl_in_formalEllipsisParameter7887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_functionBody7916 = new BitSet(new long[]{0xBFFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_statement_in_functionBody7935 = new BitSet(new long[]{0xBFFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_functionDeclaration_in_functionBody7939 = new BitSet(new long[]{0xBFFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_RCURLY_in_functionBody7972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_memberModifier_in_memberModifiers8000 = new BitSet(new long[]{0x03C0000714000002L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_set_in_memberModifier8027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_blockStatement_in_statement8176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directive_in_statement8187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespaceDirective_in_statement8198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constantVarStatement_in_statement8211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tryStatement_in_statement8224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchStatement_in_statement8236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_withStatement_in_statement8250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_returnStatement_in_statement8264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_breakStatement_in_statement8278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continueStatement_in_statement8292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forStatement_in_statement8309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forInStatement_in_statement8326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forEachInStatement_in_statement8343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_doWhileStatement_in_statement8360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whileStatement_in_statement8377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ifStatement_in_statement8392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableStatement_in_statement8406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throwStatement_in_statement8421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_labelledStatement_in_statement8437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_statement8469 = new BitSet(new long[]{0x1400000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_semic_in_statement8471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_emptyStatement_in_statement8486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalCompilerOption_in_blockStatement8528 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_LCURLY_in_blockStatement8534 = new BitSet(new long[]{0xBFFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_statement_in_blockStatement8551 = new BitSet(new long[]{0xBFFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_RCURLY_in_blockStatement8571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THROW_in_throwStatement8596 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_expression_in_throwStatement8607 = new BitSet(new long[]{0x1400000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_semic_in_throwStatement8609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_in_constantVarStatement8640 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_variableDeclarationList_in_constantVarStatement8645 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_SEMI_in_constantVarStatement8650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USE_in_useNamespaceDirective8698 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_NAMESPACE_in_useNamespaceDirective8707 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_useNamespaceDirective8714 = new BitSet(new long[]{0x1400000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_COMMA_in_useNamespaceDirective8719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_useNamespaceDirective8723 = new BitSet(new long[]{0x1400000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_semic_in_useNamespaceDirective8727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMESPACE_in_namespaceDirective8766 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_namespaceDirective8777 = new BitSet(new long[]{0x1400000000000000L,0x0000000040000002L});
    public static final BitSet FOLLOW_ASSIGN_in_namespaceDirective8783 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_stringLiteral_in_namespaceDirective8788 = new BitSet(new long[]{0x1400000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_semic_in_namespaceDirective8793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRY_in_tryStatement8832 = new BitSet(new long[]{0x0BFFFFFFFFFFFFF0L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_blockStatement_in_tryStatement8838 = new BitSet(new long[]{0x0000000000020080L});
    public static final BitSet FOLLOW_catchClause_in_tryStatement8852 = new BitSet(new long[]{0x0000000000020080L});
    public static final BitSet FOLLOW_finallyClause_in_tryStatement8855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catchClause_in_tryStatement8867 = new BitSet(new long[]{0x0000000000000082L});
    public static final BitSet FOLLOW_finallyClause_in_tryStatement8880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CATCH_in_catchClause8909 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_catchClause8916 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_variableIdentifierDecl_in_catchClause8920 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_catchClause8924 = new BitSet(new long[]{0x0BFFFFFFFFFFFFF0L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_blockStatement_in_catchClause8928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FINALLY_in_finallyClause8952 = new BitSet(new long[]{0x0BFFFFFFFFFFFFF0L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_blockStatement_in_finallyClause8957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_labelledStatement8983 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COLON_in_labelledStatement8996 = new BitSet(new long[]{0xAFFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_statement_in_labelledStatement9012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SWITCH_in_switchStatement9064 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_parExpression_in_switchStatement9075 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_LCURLY_in_switchStatement9087 = new BitSet(new long[]{0x1000000000000840L});
    public static final BitSet FOLLOW_switchBlockStatementGroup_in_switchStatement9103 = new BitSet(new long[]{0x1000000000000840L});
    public static final BitSet FOLLOW_RCURLY_in_switchStatement9123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchLabel_in_switchBlockStatementGroup9161 = new BitSet(new long[]{0xAFFFFFFFFFFFFFF2L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_statement_in_switchBlockStatementGroup9178 = new BitSet(new long[]{0xAFFFFFFFFFFFFFF2L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_breakStatement_in_switchBlockStatementGroup9201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_switchLabel9227 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_expression_in_switchLabel9233 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COLON_in_switchLabel9237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_switchLabel9258 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COLON_in_switchLabel9264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITH_in_withStatement9312 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_withStatement9320 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_expression_in_withStatement9325 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_withStatement9330 = new BitSet(new long[]{0xAFFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_statement_in_withStatement9351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURN_in_returnStatement9395 = new BitSet(new long[]{0xBFFFFFFFFFFFFFF0L,0x000300000303380AL,0x0000000000075213L});
    public static final BitSet FOLLOW_expression_in_returnStatement9416 = new BitSet(new long[]{0x1400000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_semic_in_returnStatement9420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BREAK_in_breakStatement9447 = new BitSet(new long[]{0x1400000000000000L,0x0000000000000002L,0x0000000000004000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_breakStatement9470 = new BitSet(new long[]{0x1400000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_semic_in_breakStatement9475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTINUE_in_continueStatement9501 = new BitSet(new long[]{0x1400000000000000L,0x0000000000000002L,0x0000000000004000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_continueStatement9521 = new BitSet(new long[]{0x1400000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_semic_in_continueStatement9526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_forStatement9564 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_forStatement9572 = new BitSet(new long[]{0xBFFFFFFFFFFFFFF0L,0x000300000303380AL,0x0000000000075213L});
    public static final BitSet FOLLOW_forControl_in_forStatement9576 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_forStatement9580 = new BitSet(new long[]{0xAFFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_statement_in_forStatement9599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_forInStatement9655 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_forInStatement9663 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000000002008L,0x0000000000075213L});
    public static final BitSet FOLLOW_forInControl_in_forInStatement9667 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_forInStatement9671 = new BitSet(new long[]{0xAFFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_statement_in_forInStatement9692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_forEachInStatement9754 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_EACH_in_forEachInStatement9772 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_forEachInStatement9780 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000000002008L,0x0000000000075213L});
    public static final BitSet FOLLOW_forInControl_in_forEachInStatement9784 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_forEachInStatement9788 = new BitSet(new long[]{0xAFFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_statement_in_forEachInStatement9805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forInit_in_forControl9847 = new BitSet(new long[]{0x1400000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_semic_in_forControl9852 = new BitSet(new long[]{0xBFFFFFFFFFFFFFF0L,0x000300000303380AL,0x0000000000075213L});
    public static final BitSet FOLLOW_expression_in_forControl9857 = new BitSet(new long[]{0x1400000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_semic_in_forControl9861 = new BitSet(new long[]{0xABFFFFFFFFFFFFF2L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_forUpdate_in_forControl9865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forInDecl_in_forInControl9893 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_IN_in_forInControl9897 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_expression_in_forInControl9901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_leftHandSideExpression_in_forInDecl9920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VAR_in_forInDecl9932 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_variableDeclarationNoIn_in_forInDecl9936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VAR_in_forInit9957 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_variableDeclarationNoInList_in_forInit9960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionNoIn_in_forInit9970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_forUpdate9989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DO_in_doWhileStatement10031 = new BitSet(new long[]{0xAFFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_statement_in_doWhileStatement10051 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_WHILE_in_doWhileStatement10090 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_parExpression_in_doWhileStatement10094 = new BitSet(new long[]{0x1400000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_semic_in_doWhileStatement10096 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_SEMI_in_doWhileStatement10101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_whileStatement10150 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_parExpression_in_whileStatement10155 = new BitSet(new long[]{0xAFFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_statement_in_whileStatement10175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_ifStatement10262 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_parExpression_in_ifStatement10297 = new BitSet(new long[]{0xAFFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_statement_in_ifStatement10369 = new BitSet(new long[]{0x0000000000004002L});
    public static final BitSet FOLLOW_ELSE_in_ifStatement10446 = new BitSet(new long[]{0xAFFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_statement_in_ifStatement10534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_emptyStatement10617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_variableStatement10664 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_VAR_in_variableStatement10672 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_variableDeclaration_in_variableStatement10676 = new BitSet(new long[]{0x1400000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_COMMA_in_variableStatement10684 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_variableDeclaration_in_variableStatement10688 = new BitSet(new long[]{0x1400000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_semic_in_variableStatement10693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclaration_in_variableDeclarationList10742 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_COMMA_in_variableDeclarationList10749 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_variableDeclaration_in_variableDeclarationList10753 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_variableDeclarationNoIn_in_variableDeclarationNoInList10802 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_COMMA_in_variableDeclarationNoInList10808 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_variableDeclarationNoIn_in_variableDeclarationNoInList10812 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_variableIdentifierDecl_in_variableDeclaration10849 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_ASSIGN_in_variableDeclaration10855 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_assignmentExpression_in_variableDeclaration10871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableIdentifierDecl_in_variableDeclarationNoIn10900 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_ASSIGN_in_variableDeclarationNoIn10906 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_assignmentExpressionNoIn_in_variableDeclarationNoIn10930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierLiteral_in_variableIdentifierDecl10955 = new BitSet(new long[]{0x0000000000000002L,0x0000000020000000L});
    public static final BitSet FOLLOW_COLON_in_variableIdentifierDecl10961 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000002000L,0x0000000000004000L});
    public static final BitSet FOLLOW_type_in_variableIdentifierDecl10965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedName_in_type10989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_type10995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_type11003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeList11036 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_COMMA_in_typeList11041 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000002000L,0x0000000000004000L});
    public static final BitSet FOLLOW_type_in_typeList11045 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_typeSpecifier_in_standardQualifiedName11076 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_standardQualifiedName11081 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_typeSpecifier_in_standardQualifiedName11085 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_standardQualifiedName_in_qualifiedName11114 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_typePostfixSyntax_in_qualifiedName11117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_typePostfixSyntax11139 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_LT_in_typePostfixSyntax11149 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000002000L,0x0000000000004000L});
    public static final BitSet FOLLOW_standardQualifiedName_in_typePostfixSyntax11154 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_STAR_in_typePostfixSyntax11160 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_typePostfixSyntax_in_typePostfixSyntax11166 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_GT_in_typePostfixSyntax11172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_qualifiedIdentifier11205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_parExpression11242 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_expression_in_parExpression11249 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_parExpression11254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignmentExpression_in_expression11301 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_COMMA_in_expression11308 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_assignmentExpression_in_expression11313 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_assignmentExpressionNoIn_in_expressionNoIn11357 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_COMMA_in_expressionNoIn11364 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_assignmentExpressionNoIn_in_expressionNoIn11369 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_leftHandSideExpression_in_assignmentExpression11437 = new BitSet(new long[]{0x0000000000000000L,0x000007CFC0002010L});
    public static final BitSet FOLLOW_assignmentOperator_in_assignmentExpression11440 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_assignmentExpression_in_assignmentExpression11443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_assignmentExpression11452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn11522 = new BitSet(new long[]{0x0000000000000000L,0x000007CFC0002010L});
    public static final BitSet FOLLOW_assignmentOperator_in_assignmentExpressionNoIn11525 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn11528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn11537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignmentOperator_int_in_assignmentOperator11574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSIGN_in_assignmentOperator_int11600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_assignmentOperator_int11609 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_ASSIGN_in_assignmentOperator_int11613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIV_ASSIGN_in_assignmentOperator_int11624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MOD_ASSIGN_in_assignmentOperator_int11633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ADD_ASSIGN_in_assignmentOperator_int11642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUB_ASSIGN_in_assignmentOperator_int11651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHL_ASSIGN_in_assignmentOperator_int11659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_assignmentOperator_int11685 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_GT_in_assignmentOperator_int11689 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_ASSIGN_in_assignmentOperator_int11693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_assignmentOperator_int11739 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_GT_in_assignmentOperator_int11743 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_GT_in_assignmentOperator_int11747 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_ASSIGN_in_assignmentOperator_int11751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_ASSIGN_in_assignmentOperator_int11782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_XOR_ASSIGN_in_assignmentOperator_int11791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_ASSIGN_in_assignmentOperator_int11800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOR_ASSIGN_in_assignmentOperator_int11808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAND_ASSIGN_in_assignmentOperator_int11816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logicalORExpression_in_conditionalExpression11851 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_QUE_in_conditionalExpression11857 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_assignmentExpression_in_conditionalExpression11862 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COLON_in_conditionalExpression11869 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_assignmentExpression_in_conditionalExpression11874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn11926 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_QUE_in_conditionalExpressionNoIn11932 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_assignmentExpression_in_conditionalExpressionNoIn11936 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COLON_in_conditionalExpressionNoIn11943 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_assignmentExpression_in_conditionalExpressionNoIn11948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logicalANDExpression_in_logicalORExpression12005 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_LOR_in_logicalORExpression12011 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_logicalANDExpression_in_logicalORExpression12015 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn12068 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_LOR_in_logicalORExpressionNoIn12074 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn12078 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_bitwiseORExpression_in_logicalANDExpression12135 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
    public static final BitSet FOLLOW_LAND_in_logicalANDExpression12141 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_bitwiseORExpression_in_logicalANDExpression12145 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
    public static final BitSet FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn12197 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
    public static final BitSet FOLLOW_LAND_in_logicalANDExpressionNoIn12203 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn12207 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
    public static final BitSet FOLLOW_bitwiseXORExpression_in_bitwiseORExpression12264 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_OR_in_bitwiseORExpression12270 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_bitwiseXORExpression_in_bitwiseORExpression12274 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn12326 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_OR_in_bitwiseORExpressionNoIn12332 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn12336 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression12392 = new BitSet(new long[]{0x0000000000000002L,0x0000000000800000L});
    public static final BitSet FOLLOW_XOR_in_bitwiseXORExpression12398 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression12402 = new BitSet(new long[]{0x0000000000000002L,0x0000000000800000L});
    public static final BitSet FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn12454 = new BitSet(new long[]{0x0000000000000002L,0x0000000000800000L});
    public static final BitSet FOLLOW_XOR_in_bitwiseXORExpressionNoIn12460 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn12464 = new BitSet(new long[]{0x0000000000000002L,0x0000000000800000L});
    public static final BitSet FOLLOW_equalityExpression_in_bitwiseANDExpression12516 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});
    public static final BitSet FOLLOW_AND_in_bitwiseANDExpression12522 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_equalityExpression_in_bitwiseANDExpression12526 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});
    public static final BitSet FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn12578 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});
    public static final BitSet FOLLOW_AND_in_bitwiseANDExpressionNoIn12584 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn12588 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});
    public static final BitSet FOLLOW_relationalExpression_in_equalityExpression12641 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000780L});
    public static final BitSet FOLLOW_set_in_equalityExpression12647 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_relationalExpression_in_equalityExpression12659 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000780L});
    public static final BitSet FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn12711 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000780L});
    public static final BitSet FOLLOW_set_in_equalityExpressionNoIn12717 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn12730 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000780L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression12783 = new BitSet(new long[]{0x0000000009800012L,0x0000000000000038L});
    public static final BitSet FOLLOW_GT_in_relationalExpression12803 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000043033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_ASSIGN_in_relationalExpression12808 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_set_in_relationalExpression12841 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression12879 = new BitSet(new long[]{0x0000000009800012L,0x0000000000000038L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpressionNoIn12940 = new BitSet(new long[]{0x0000000009000012L,0x0000000000000038L});
    public static final BitSet FOLLOW_GT_in_relationalExpressionNoIn12960 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000043033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_ASSIGN_in_relationalExpressionNoIn12965 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_set_in_relationalExpressionNoIn12998 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpressionNoIn13034 = new BitSet(new long[]{0x0000000009000012L,0x0000000000000038L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression13092 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040010L});
    public static final BitSet FOLLOW_SHL_in_shiftExpression13114 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_GT_in_shiftExpression13145 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_GT_in_shiftExpression13149 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_GT_in_shiftExpression13200 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_GT_in_shiftExpression13204 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_GT_in_shiftExpression13208 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression13255 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040010L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression13307 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001800L});
    public static final BitSet FOLLOW_set_in_additiveExpression13313 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression13321 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001800L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression13370 = new BitSet(new long[]{0x0000000000000002L,0x000000000000E000L});
    public static final BitSet FOLLOW_set_in_multiplicativeExpression13376 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression13385 = new BitSet(new long[]{0x0000000000000002L,0x000000000000E000L});
    public static final BitSet FOLLOW_postfixExpression_in_unaryExpression13420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_unaryExpression13431 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression13441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryOp_in_unaryExpression13451 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000000002008L,0x0000000000075213L});
    public static final BitSet FOLLOW_postfixExpression_in_unaryExpression13453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_unaryOp13484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_leftHandSideExpression_in_postfixExpression13541 = new BitSet(new long[]{0x0000000000000002L,0x0000000000030000L});
    public static final BitSet FOLLOW_postfixOp_in_postfixExpression13543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_postfixOp13569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primaryExpression_in_memberExpression13591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionExpression_in_memberExpression13596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_newExpression_in_memberExpression13601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_newExpression13614 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000000002008L,0x0000000000075213L});
    public static final BitSet FOLLOW_primaryExpression_in_newExpression13619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_memberExpression_in_leftHandSideExpression13645 = new BitSet(new long[]{0xA000000000000002L,0x0000900000000002L});
    public static final BitSet FOLLOW_arguments_in_leftHandSideExpression13660 = new BitSet(new long[]{0xA000000000000002L,0x0000900000000002L});
    public static final BitSet FOLLOW_LBRACK_in_leftHandSideExpression13672 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_expression_in_leftHandSideExpression13676 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_RBRACK_in_leftHandSideExpression13680 = new BitSet(new long[]{0xA000000000000002L,0x0000900000000002L});
    public static final BitSet FOLLOW_XML_ELLIPSIS_in_leftHandSideExpression13696 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0001000000002000L,0x0000000000004000L});
    public static final BitSet FOLLOW_eitherIdentifier_in_leftHandSideExpression13699 = new BitSet(new long[]{0xA000000000000002L,0x0000900000000002L});
    public static final BitSet FOLLOW_DOT_in_leftHandSideExpression13713 = new BitSet(new long[]{0x23FFFFFFFFFFFFF0L,0x0001000000002000L,0x0000000000004000L});
    public static final BitSet FOLLOW_eitherIdentifier_in_leftHandSideExpression13718 = new BitSet(new long[]{0xA000000000000002L,0x0000900000000002L});
    public static final BitSet FOLLOW_parExpression_in_leftHandSideExpression13724 = new BitSet(new long[]{0xA000000000000002L,0x0000900000000002L});
    public static final BitSet FOLLOW_typePostfixSyntax_in_leftHandSideExpression13737 = new BitSet(new long[]{0xA000000000000002L,0x0000900000000002L});
    public static final BitSet FOLLOW_XML_NS_OP_in_leftHandSideExpression13749 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_expression_in_leftHandSideExpression13753 = new BitSet(new long[]{0xA000000000000002L,0x0000900000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_eitherIdentifier13790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlPropertyIdentifier_in_eitherIdentifier13800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_allKeywords_in_eitherIdentifier13806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_typeSpecifier13819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_notQuiteReservedWord_in_typeSpecifier13825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERNAL_in_typeSpecifier13831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_typeSpecifier13839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_notQuiteReservedWord13857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_reservedWord_in_allKeywords13910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_notQuiteReservedWord_in_allKeywords13914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_reservedWord13931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_arguments14493 = new BitSet(new long[]{0xEBFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_assignmentExpression_in_arguments14506 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_COMMA_in_arguments14536 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_assignmentExpression_in_arguments14561 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_RPAREN_in_arguments14587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_indexSuffix_in_suffix14617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyReferenceSuffix_in_suffix14621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_indexSuffix14662 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_expression_in_indexSuffix14667 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_RBRACK_in_indexSuffix14672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_propertyReferenceSuffix14700 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_propertyReferenceSuffix14707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_propertyReferenceSuffix14724 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0001000000002000L,0x0000000000004000L});
    public static final BitSet FOLLOW_xmlPropertyIdentifier_in_propertyReferenceSuffix14729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_propertyReferenceSuffix14744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primaryExpressionHelper_in_primaryExpression14774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_primaryExpressionHelper14801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_primaryExpressionHelper14815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_primaryExpressionHelper14827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayLiteral_in_primaryExpressionHelper14839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_objectLiteral_in_primaryExpressionHelper14850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierLiteral_in_primaryExpressionHelper14863 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_XML_NS_OP_in_primaryExpressionHelper14867 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_identifierLiteral_in_primaryExpressionHelper14873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlPrimaryExpression_in_primaryExpressionHelper14884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_primaryExpressionHelper14894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_primaryExpressionHelper14907 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000002000L,0x0000000000004000L});
    public static final BitSet FOLLOW_type_in_primaryExpressionHelper14911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_GT_in_primaryExpressionHelper14915 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_arrayLiteral_in_primaryExpressionHelper14920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_objectLiteral14945 = new BitSet(new long[]{0x13FFFFFFFFFFFFF0L,0x0000000000000000L,0x0000000000005203L});
    public static final BitSet FOLLOW_propertyNameAndValueList_in_objectLiteral14949 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_RCURLY_in_objectLiteral14954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyNameAndValue_in_propertyNameAndValueList14997 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_COMMA_in_propertyNameAndValueList15021 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000000000L,0x0000000000005203L});
    public static final BitSet FOLLOW_propertyNameAndValue_in_propertyNameAndValueList15025 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_propertyName_in_propertyNameAndValue15055 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COLON_in_propertyNameAndValue15059 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_assignmentExpression_in_propertyNameAndValue15077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierLiteral_in_propertyName15096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringLiteral_in_propertyName15107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteral_in_propertyName15118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_arrayLiteral15141 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033809L,0x0000000000075213L});
    public static final BitSet FOLLOW_elementList_in_arrayLiteral15145 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_RBRACK_in_arrayLiteral15150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignmentExpression_in_elementList15198 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_COMMA_in_elementList15218 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_assignmentExpression_in_elementList15235 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_COMMA_in_elementList15248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUB_in_synpred9_AS3_ex3848 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_DOT_in_synpred9_AS3_ex3856 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_COLON_in_synpred9_AS3_ex3864 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred9_AS3_ex3875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_allKeywords_in_synpred9_AS3_ex3881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlTextElement_in_synpred68_AS3_ex4908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlQualifiedIdentifier_in_synpred72_AS3_ex5057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlQualifiedIdentifier_in_synpred73_AS3_ex5162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlPropertySelector_in_synpred74_AS3_ex5177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalCompilerOption_in_synpred96_AS3_ex6081 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_LCURLY_in_synpred96_AS3_ex6089 = new BitSet(new long[]{0xBFFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_mxmlEmbedded_in_synpred96_AS3_ex6099 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_RCURLY_in_synpred96_AS3_ex6108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyDeclaration_in_synpred97_AS3_ex6121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionDeclaration_in_synpred98_AS3_ex6125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_synpred99_AS3_ex6129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directive_in_synpred100_AS3_ex6133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceFunctionDeclaration_in_synpred101_AS3_ex6137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalCompilerOption_in_synpred104_AS3_ex6180 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_LCURLY_in_synpred104_AS3_ex6188 = new BitSet(new long[]{0xBFFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_packageElement_in_synpred104_AS3_ex6198 = new BitSet(new long[]{0xBFFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_RCURLY_in_synpred104_AS3_ex6213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDecl_in_synpred105_AS3_ex6228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyDeclaration_in_synpred106_AS3_ex6232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionDeclaration_in_synpred107_AS3_ex6236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceFunctionDeclaration_in_synpred108_AS3_ex6240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_synpred109_AS3_ex6244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred123_AS3_ex6635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eitherIdentifier_in_synpred124_AS3_ex6699 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred124_AS3_ex6703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalCompilerOption_in_synpred135_AS3_ex7091 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_LCURLY_in_synpred135_AS3_ex7093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyDeclaration_in_synpred137_AS3_ex7158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionDeclaration_in_synpred138_AS3_ex7162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_synpred139_AS3_ex7166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalCompilerOption_in_synpred140_AS3_ex7185 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_LCURLY_in_synpred140_AS3_ex7187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyDeclaration_in_synpred142_AS3_ex7253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceFunctionDeclaration_in_synpred143_AS3_ex7257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_synpred144_AS3_ex7261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_memberModifiers_in_synpred152_AS3_ex7412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_synpred167_AS3_ex7935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_memberModifier_in_synpred169_AS3_ex8000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_blockStatement_in_synpred179_AS3_ex8176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directive_in_synpred180_AS3_ex8187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespaceDirective_in_synpred181_AS3_ex8198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constantVarStatement_in_synpred182_AS3_ex8211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tryStatement_in_synpred183_AS3_ex8224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchStatement_in_synpred184_AS3_ex8236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_withStatement_in_synpred185_AS3_ex8250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_returnStatement_in_synpred186_AS3_ex8264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_breakStatement_in_synpred187_AS3_ex8278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continueStatement_in_synpred188_AS3_ex8292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forStatement_in_synpred189_AS3_ex8309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forInStatement_in_synpred190_AS3_ex8326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forEachInStatement_in_synpred191_AS3_ex8343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_doWhileStatement_in_synpred192_AS3_ex8360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whileStatement_in_synpred193_AS3_ex8377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ifStatement_in_synpred194_AS3_ex8392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableStatement_in_synpred195_AS3_ex8406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throwStatement_in_synpred196_AS3_ex8421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_labelledStatement_in_synpred197_AS3_ex8437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_synpred198_AS3_ex8469 = new BitSet(new long[]{0x1400000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_semic_in_synpred198_AS3_ex8471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred201_AS3_ex8650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catchClause_in_synpred205_AS3_ex8852 = new BitSet(new long[]{0x0000000000020080L});
    public static final BitSet FOLLOW_finallyClause_in_synpred205_AS3_ex8855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catchClause_in_synpred207_AS3_ex8867 = new BitSet(new long[]{0x0000000000000082L});
    public static final BitSet FOLLOW_statement_in_synpred209_AS3_ex9178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred220_AS3_ex10101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_synpred221_AS3_ex10446 = new BitSet(new long[]{0xAFFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_statement_in_synpred221_AS3_ex10534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred236_AS3_ex11308 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_assignmentExpression_in_synpred236_AS3_ex11313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_leftHandSideExpression_in_synpred238_AS3_ex11430 = new BitSet(new long[]{0x0000000000000000L,0x000007CFC0002010L});
    public static final BitSet FOLLOW_assignmentOperator_in_synpred238_AS3_ex11433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_leftHandSideExpression_in_synpred239_AS3_ex11514 = new BitSet(new long[]{0x0000000000000000L,0x000007CFC0002010L});
    public static final BitSet FOLLOW_assignmentOperator_in_synpred239_AS3_ex11517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUE_in_synpred255_AS3_ex11857 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_assignmentExpression_in_synpred255_AS3_ex11862 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COLON_in_synpred255_AS3_ex11869 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_assignmentExpression_in_synpred255_AS3_ex11874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOR_in_synpred257_AS3_ex12011 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_logicalANDExpression_in_synpred257_AS3_ex12015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAND_in_synpred259_AS3_ex12141 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_bitwiseORExpression_in_synpred259_AS3_ex12145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_in_synpred261_AS3_ex12270 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_bitwiseXORExpression_in_synpred261_AS3_ex12274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_XOR_in_synpred263_AS3_ex12398 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_bitwiseANDExpression_in_synpred263_AS3_ex12402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_in_synpred265_AS3_ex12522 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_equalityExpression_in_synpred265_AS3_ex12526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred270_AS3_ex12647 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_relationalExpression_in_synpred270_AS3_ex12659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_synpred282_AS3_ex12803 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000043033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred282_AS3_ex12808 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_set_in_synpred282_AS3_ex12841 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_shiftExpression_in_synpred282_AS3_ex12879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_synpred293_AS3_ex13190 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_GT_in_synpred293_AS3_ex13192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_GT_in_synpred293_AS3_ex13194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHL_in_synpred294_AS3_ex13114 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_GT_in_synpred294_AS3_ex13145 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_GT_in_synpred294_AS3_ex13149 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_GT_in_synpred294_AS3_ex13200 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_GT_in_synpred294_AS3_ex13204 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_GT_in_synpred294_AS3_ex13208 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_additiveExpression_in_synpred294_AS3_ex13255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred296_AS3_ex13313 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_synpred296_AS3_ex13321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred299_AS3_ex13376 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_unaryExpression_in_synpred299_AS3_ex13385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_postfixExpression_in_synpred300_AS3_ex13420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred302_AS3_ex13431 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_unaryExpression_in_synpred302_AS3_ex13441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_postfixOp_in_synpred311_AS3_ex13543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_synpred315_AS3_ex13660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_synpred316_AS3_ex13672 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_expression_in_synpred316_AS3_ex13676 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_RBRACK_in_synpred316_AS3_ex13680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_XML_ELLIPSIS_in_synpred317_AS3_ex13696 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0001000000002000L,0x0000000000004000L});
    public static final BitSet FOLLOW_eitherIdentifier_in_synpred317_AS3_ex13699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred319_AS3_ex13713 = new BitSet(new long[]{0x23FFFFFFFFFFFFF0L,0x0001000000002000L,0x0000000000004000L});
    public static final BitSet FOLLOW_eitherIdentifier_in_synpred319_AS3_ex13718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_synpred319_AS3_ex13724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typePostfixSyntax_in_synpred320_AS3_ex13737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_XML_NS_OP_in_synpred321_AS3_ex13749 = new BitSet(new long[]{0xABFFFFFFFFFFFFF0L,0x0003000003033808L,0x0000000000075213L});
    public static final BitSet FOLLOW_expression_in_synpred321_AS3_ex13753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred322_AS3_ex13790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlPropertyIdentifier_in_synpred323_AS3_ex13800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_synpred385_AS3_ex14801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_synpred386_AS3_ex14815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_synpred387_AS3_ex14827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierLiteral_in_synpred390_AS3_ex14863 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_XML_NS_OP_in_synpred390_AS3_ex14867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierLiteral_in_synpred391_AS3_ex14863 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_XML_NS_OP_in_synpred391_AS3_ex14867 = new BitSet(new long[]{0x03FFFFFFFFFFFFF0L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_identifierLiteral_in_synpred391_AS3_ex14873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlPrimaryExpression_in_synpred392_AS3_ex14884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayLiteral_in_synpred394_AS3_ex14920 = new BitSet(new long[]{0x0000000000000002L});

}